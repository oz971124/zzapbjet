
99.WASHING_MACHINE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009108  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  080092b8  080092b8  000192b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094a8  080094a8  00020194  2**0
                  CONTENTS
  4 .ARM          00000008  080094a8  080094a8  000194a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094b0  080094b0  00020194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094b0  080094b0  000194b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094b4  080094b4  000194b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  080094b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020194  2**0
                  CONTENTS
 10 .bss          00000b04  20000194  20000194  00020194  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000c98  20000c98  00020194  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a2e5  00000000  00000000  00020207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003a67  00000000  00000000  0003a4ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000016f8  00000000  00000000  0003df58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000011e9  00000000  00000000  0003f650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027c5c  00000000  00000000  00040839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001d7d1  00000000  00000000  00068495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e7898  00000000  00000000  00085c66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006adc  00000000  00000000  0016d500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  00173fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000194 	.word	0x20000194
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080092a0 	.word	0x080092a0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000198 	.word	0x20000198
 80001ec:	080092a0 	.word	0x080092a0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b970 	b.w	8000d74 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9e08      	ldr	r6, [sp, #32]
 8000ab2:	460d      	mov	r5, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	460f      	mov	r7, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14a      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4694      	mov	ip, r2
 8000ac0:	d965      	bls.n	8000b8e <__udivmoddi4+0xe2>
 8000ac2:	fab2 f382 	clz	r3, r2
 8000ac6:	b143      	cbz	r3, 8000ada <__udivmoddi4+0x2e>
 8000ac8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000acc:	f1c3 0220 	rsb	r2, r3, #32
 8000ad0:	409f      	lsls	r7, r3
 8000ad2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ad6:	4317      	orrs	r7, r2
 8000ad8:	409c      	lsls	r4, r3
 8000ada:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ade:	fa1f f58c 	uxth.w	r5, ip
 8000ae2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ae6:	0c22      	lsrs	r2, r4, #16
 8000ae8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000aec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000af0:	fb01 f005 	mul.w	r0, r1, r5
 8000af4:	4290      	cmp	r0, r2
 8000af6:	d90a      	bls.n	8000b0e <__udivmoddi4+0x62>
 8000af8:	eb1c 0202 	adds.w	r2, ip, r2
 8000afc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b00:	f080 811c 	bcs.w	8000d3c <__udivmoddi4+0x290>
 8000b04:	4290      	cmp	r0, r2
 8000b06:	f240 8119 	bls.w	8000d3c <__udivmoddi4+0x290>
 8000b0a:	3902      	subs	r1, #2
 8000b0c:	4462      	add	r2, ip
 8000b0e:	1a12      	subs	r2, r2, r0
 8000b10:	b2a4      	uxth	r4, r4
 8000b12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b1a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b1e:	fb00 f505 	mul.w	r5, r0, r5
 8000b22:	42a5      	cmp	r5, r4
 8000b24:	d90a      	bls.n	8000b3c <__udivmoddi4+0x90>
 8000b26:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b2e:	f080 8107 	bcs.w	8000d40 <__udivmoddi4+0x294>
 8000b32:	42a5      	cmp	r5, r4
 8000b34:	f240 8104 	bls.w	8000d40 <__udivmoddi4+0x294>
 8000b38:	4464      	add	r4, ip
 8000b3a:	3802      	subs	r0, #2
 8000b3c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b40:	1b64      	subs	r4, r4, r5
 8000b42:	2100      	movs	r1, #0
 8000b44:	b11e      	cbz	r6, 8000b4e <__udivmoddi4+0xa2>
 8000b46:	40dc      	lsrs	r4, r3
 8000b48:	2300      	movs	r3, #0
 8000b4a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0xbc>
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	f000 80ed 	beq.w	8000d36 <__udivmoddi4+0x28a>
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b62:	4608      	mov	r0, r1
 8000b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b68:	fab3 f183 	clz	r1, r3
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	d149      	bne.n	8000c04 <__udivmoddi4+0x158>
 8000b70:	42ab      	cmp	r3, r5
 8000b72:	d302      	bcc.n	8000b7a <__udivmoddi4+0xce>
 8000b74:	4282      	cmp	r2, r0
 8000b76:	f200 80f8 	bhi.w	8000d6a <__udivmoddi4+0x2be>
 8000b7a:	1a84      	subs	r4, r0, r2
 8000b7c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b80:	2001      	movs	r0, #1
 8000b82:	4617      	mov	r7, r2
 8000b84:	2e00      	cmp	r6, #0
 8000b86:	d0e2      	beq.n	8000b4e <__udivmoddi4+0xa2>
 8000b88:	e9c6 4700 	strd	r4, r7, [r6]
 8000b8c:	e7df      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b8e:	b902      	cbnz	r2, 8000b92 <__udivmoddi4+0xe6>
 8000b90:	deff      	udf	#255	; 0xff
 8000b92:	fab2 f382 	clz	r3, r2
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f040 8090 	bne.w	8000cbc <__udivmoddi4+0x210>
 8000b9c:	1a8a      	subs	r2, r1, r2
 8000b9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba2:	fa1f fe8c 	uxth.w	lr, ip
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bac:	fb07 2015 	mls	r0, r7, r5, r2
 8000bb0:	0c22      	lsrs	r2, r4, #16
 8000bb2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bb6:	fb0e f005 	mul.w	r0, lr, r5
 8000bba:	4290      	cmp	r0, r2
 8000bbc:	d908      	bls.n	8000bd0 <__udivmoddi4+0x124>
 8000bbe:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x122>
 8000bc8:	4290      	cmp	r0, r2
 8000bca:	f200 80cb 	bhi.w	8000d64 <__udivmoddi4+0x2b8>
 8000bce:	4645      	mov	r5, r8
 8000bd0:	1a12      	subs	r2, r2, r0
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bd8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bdc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000be0:	fb0e fe00 	mul.w	lr, lr, r0
 8000be4:	45a6      	cmp	lr, r4
 8000be6:	d908      	bls.n	8000bfa <__udivmoddi4+0x14e>
 8000be8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bec:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bf0:	d202      	bcs.n	8000bf8 <__udivmoddi4+0x14c>
 8000bf2:	45a6      	cmp	lr, r4
 8000bf4:	f200 80bb 	bhi.w	8000d6e <__udivmoddi4+0x2c2>
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	eba4 040e 	sub.w	r4, r4, lr
 8000bfe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c02:	e79f      	b.n	8000b44 <__udivmoddi4+0x98>
 8000c04:	f1c1 0720 	rsb	r7, r1, #32
 8000c08:	408b      	lsls	r3, r1
 8000c0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c12:	fa05 f401 	lsl.w	r4, r5, r1
 8000c16:	fa20 f307 	lsr.w	r3, r0, r7
 8000c1a:	40fd      	lsrs	r5, r7
 8000c1c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c20:	4323      	orrs	r3, r4
 8000c22:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c26:	fa1f fe8c 	uxth.w	lr, ip
 8000c2a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c2e:	0c1c      	lsrs	r4, r3, #16
 8000c30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c34:	fb08 f50e 	mul.w	r5, r8, lr
 8000c38:	42a5      	cmp	r5, r4
 8000c3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c3e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c42:	d90b      	bls.n	8000c5c <__udivmoddi4+0x1b0>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c4c:	f080 8088 	bcs.w	8000d60 <__udivmoddi4+0x2b4>
 8000c50:	42a5      	cmp	r5, r4
 8000c52:	f240 8085 	bls.w	8000d60 <__udivmoddi4+0x2b4>
 8000c56:	f1a8 0802 	sub.w	r8, r8, #2
 8000c5a:	4464      	add	r4, ip
 8000c5c:	1b64      	subs	r4, r4, r5
 8000c5e:	b29d      	uxth	r5, r3
 8000c60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c64:	fb09 4413 	mls	r4, r9, r3, r4
 8000c68:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c6c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c70:	45a6      	cmp	lr, r4
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x1da>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c7c:	d26c      	bcs.n	8000d58 <__udivmoddi4+0x2ac>
 8000c7e:	45a6      	cmp	lr, r4
 8000c80:	d96a      	bls.n	8000d58 <__udivmoddi4+0x2ac>
 8000c82:	3b02      	subs	r3, #2
 8000c84:	4464      	add	r4, ip
 8000c86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c8a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c8e:	eba4 040e 	sub.w	r4, r4, lr
 8000c92:	42ac      	cmp	r4, r5
 8000c94:	46c8      	mov	r8, r9
 8000c96:	46ae      	mov	lr, r5
 8000c98:	d356      	bcc.n	8000d48 <__udivmoddi4+0x29c>
 8000c9a:	d053      	beq.n	8000d44 <__udivmoddi4+0x298>
 8000c9c:	b156      	cbz	r6, 8000cb4 <__udivmoddi4+0x208>
 8000c9e:	ebb0 0208 	subs.w	r2, r0, r8
 8000ca2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ca6:	fa04 f707 	lsl.w	r7, r4, r7
 8000caa:	40ca      	lsrs	r2, r1
 8000cac:	40cc      	lsrs	r4, r1
 8000cae:	4317      	orrs	r7, r2
 8000cb0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbc:	f1c3 0120 	rsb	r1, r3, #32
 8000cc0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cc8:	fa25 f101 	lsr.w	r1, r5, r1
 8000ccc:	409d      	lsls	r5, r3
 8000cce:	432a      	orrs	r2, r5
 8000cd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd4:	fa1f fe8c 	uxth.w	lr, ip
 8000cd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cdc:	fb07 1510 	mls	r5, r7, r0, r1
 8000ce0:	0c11      	lsrs	r1, r2, #16
 8000ce2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ce6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cea:	428d      	cmp	r5, r1
 8000cec:	fa04 f403 	lsl.w	r4, r4, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x258>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cfa:	d22f      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000cfc:	428d      	cmp	r5, r1
 8000cfe:	d92d      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d00:	3802      	subs	r0, #2
 8000d02:	4461      	add	r1, ip
 8000d04:	1b49      	subs	r1, r1, r5
 8000d06:	b292      	uxth	r2, r2
 8000d08:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d0c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d14:	fb05 f10e 	mul.w	r1, r5, lr
 8000d18:	4291      	cmp	r1, r2
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x282>
 8000d1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d20:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d24:	d216      	bcs.n	8000d54 <__udivmoddi4+0x2a8>
 8000d26:	4291      	cmp	r1, r2
 8000d28:	d914      	bls.n	8000d54 <__udivmoddi4+0x2a8>
 8000d2a:	3d02      	subs	r5, #2
 8000d2c:	4462      	add	r2, ip
 8000d2e:	1a52      	subs	r2, r2, r1
 8000d30:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d34:	e738      	b.n	8000ba8 <__udivmoddi4+0xfc>
 8000d36:	4631      	mov	r1, r6
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e708      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000d3c:	4639      	mov	r1, r7
 8000d3e:	e6e6      	b.n	8000b0e <__udivmoddi4+0x62>
 8000d40:	4610      	mov	r0, r2
 8000d42:	e6fb      	b.n	8000b3c <__udivmoddi4+0x90>
 8000d44:	4548      	cmp	r0, r9
 8000d46:	d2a9      	bcs.n	8000c9c <__udivmoddi4+0x1f0>
 8000d48:	ebb9 0802 	subs.w	r8, r9, r2
 8000d4c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d50:	3b01      	subs	r3, #1
 8000d52:	e7a3      	b.n	8000c9c <__udivmoddi4+0x1f0>
 8000d54:	4645      	mov	r5, r8
 8000d56:	e7ea      	b.n	8000d2e <__udivmoddi4+0x282>
 8000d58:	462b      	mov	r3, r5
 8000d5a:	e794      	b.n	8000c86 <__udivmoddi4+0x1da>
 8000d5c:	4640      	mov	r0, r8
 8000d5e:	e7d1      	b.n	8000d04 <__udivmoddi4+0x258>
 8000d60:	46d0      	mov	r8, sl
 8000d62:	e77b      	b.n	8000c5c <__udivmoddi4+0x1b0>
 8000d64:	3d02      	subs	r5, #2
 8000d66:	4462      	add	r2, ip
 8000d68:	e732      	b.n	8000bd0 <__udivmoddi4+0x124>
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e70a      	b.n	8000b84 <__udivmoddi4+0xd8>
 8000d6e:	4464      	add	r4, ip
 8000d70:	3802      	subs	r0, #2
 8000d72:	e742      	b.n	8000bfa <__udivmoddi4+0x14e>

08000d74 <__aeabi_idiv0>:
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <complete_sound>:
   3, 3, 1, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 3, 3,
   3, 1, 1, 1, 3, 3, 1, 1, 1, 1, 1, 1, 6,
};

void complete_sound(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
	int divide_freq = 1600000;
 8000d7e:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <complete_sound+0x8c>)
 8000d80:	603b      	str	r3, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, 200);
 8000d82:	4b21      	ldr	r3, [pc, #132]	; (8000e08 <complete_sound+0x90>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	22c8      	movs	r2, #200	; 0xc8
 8000d88:	641a      	str	r2, [r3, #64]	; 0x40
	for (int i=0; i < 28; i++)
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	e02d      	b.n	8000dec <complete_sound+0x74>
	{
		__HAL_TIM_SET_AUTORELOAD(&htim5, divide_freq / mode_complete_note[i]);
 8000d90:	6839      	ldr	r1, [r7, #0]
 8000d92:	4a1e      	ldr	r2, [pc, #120]	; (8000e0c <complete_sound+0x94>)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d9a:	4b1b      	ldr	r3, [pc, #108]	; (8000e08 <complete_sound+0x90>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	fbb1 f2f2 	udiv	r2, r1, r2
 8000da2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000da4:	683a      	ldr	r2, [r7, #0]
 8000da6:	4919      	ldr	r1, [pc, #100]	; (8000e0c <complete_sound+0x94>)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db2:	4a15      	ldr	r2, [pc, #84]	; (8000e08 <complete_sound+0x90>)
 8000db4:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, divide_freq / mode_complete_note[i] / 2);
 8000db6:	683a      	ldr	r2, [r7, #0]
 8000db8:	4914      	ldr	r1, [pc, #80]	; (8000e0c <complete_sound+0x94>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000dc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8000dc4:	4b10      	ldr	r3, [pc, #64]	; (8000e08 <complete_sound+0x90>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	0852      	lsrs	r2, r2, #1
 8000dca:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_Delay(300*mode_complete_rythm[i]);
 8000dcc:	4a10      	ldr	r2, [pc, #64]	; (8000e10 <complete_sound+0x98>)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000dd8:	fb02 f303 	mul.w	r3, r2, r3
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f002 fa4d 	bl	800327c <HAL_Delay>
		noTone();
 8000de2:	f000 f851 	bl	8000e88 <noTone>
	for (int i=0; i < 28; i++)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	3301      	adds	r3, #1
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2b1b      	cmp	r3, #27
 8000df0:	ddce      	ble.n	8000d90 <complete_sound+0x18>
	}
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, 0);
 8000df2:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <complete_sound+0x90>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2200      	movs	r2, #0
 8000df8:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	00186a00 	.word	0x00186a00
 8000e08:	200004c8 	.word	0x200004c8
 8000e0c:	20000000 	.word	0x20000000
 8000e10:	20000070 	.word	0x20000070

08000e14 <bbig>:

void bbig(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
	int divide_freq = 1600000;
 8000e1a:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <bbig+0x68>)
 8000e1c:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, 200);
 8000e1e:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <bbig+0x6c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	22c8      	movs	r2, #200	; 0xc8
 8000e24:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_AUTORELOAD(&htim5, divide_freq / G4);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a16      	ldr	r2, [pc, #88]	; (8000e84 <bbig+0x70>)
 8000e2a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e2e:	11d2      	asrs	r2, r2, #7
 8000e30:	17db      	asrs	r3, r3, #31
 8000e32:	1ad2      	subs	r2, r2, r3
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <bbig+0x6c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a11      	ldr	r2, [pc, #68]	; (8000e84 <bbig+0x70>)
 8000e3e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e42:	11d2      	asrs	r2, r2, #7
 8000e44:	17db      	asrs	r3, r3, #31
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <bbig+0x6c>)
 8000e4c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, divide_freq / G4 / 2);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a0c      	ldr	r2, [pc, #48]	; (8000e84 <bbig+0x70>)
 8000e52:	fb82 1203 	smull	r1, r2, r2, r3
 8000e56:	1212      	asrs	r2, r2, #8
 8000e58:	17db      	asrs	r3, r3, #31
 8000e5a:	1ad2      	subs	r2, r2, r3
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <bbig+0x6c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(100);
 8000e62:	2064      	movs	r0, #100	; 0x64
 8000e64:	f002 fa0a 	bl	800327c <HAL_Delay>
	noTone();
 8000e68:	f000 f80e 	bl	8000e88 <noTone>
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, 0);
 8000e6c:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <bbig+0x6c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2200      	movs	r2, #0
 8000e72:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	00186a00 	.word	0x00186a00
 8000e80:	200004c8 	.word	0x200004c8
 8000e84:	5397829d 	.word	0x5397829d

08000e88 <noTone>:
};

 unsigned int duration[] = {1,1,2,2,2,2,1,1,2,2,2,2,1,1,2,2,2,2,2,1,1,2,2,2,2};

 void noTone()
 {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
     htim5.Instance->CCR1=0;
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <noTone+0x18>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2200      	movs	r2, #0
 8000e92:	635a      	str	r2, [r3, #52]	; 0x34
     HAL_Delay(50);
 8000e94:	2032      	movs	r0, #50	; 0x32
 8000e96:	f002 f9f1 	bl	800327c <HAL_Delay>
 }
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200004c8 	.word	0x200004c8

08000ea4 <FND_update>:
#endif
	}
}

void FND_update(unsigned int value)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	FND[0] = FND_font[value % 10];
 8000eac:	6879      	ldr	r1, [r7, #4]
 8000eae:	4b28      	ldr	r3, [pc, #160]	; (8000f50 <FND_update+0xac>)
 8000eb0:	fba3 2301 	umull	r2, r3, r3, r1
 8000eb4:	08da      	lsrs	r2, r3, #3
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	4413      	add	r3, r2
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	1aca      	subs	r2, r1, r3
 8000ec0:	4b24      	ldr	r3, [pc, #144]	; (8000f54 <FND_update+0xb0>)
 8000ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	4b23      	ldr	r3, [pc, #140]	; (8000f58 <FND_update+0xb4>)
 8000eca:	801a      	strh	r2, [r3, #0]
	FND[1] = FND_font[value / 10 % 10];
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a20      	ldr	r2, [pc, #128]	; (8000f50 <FND_update+0xac>)
 8000ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed4:	08d9      	lsrs	r1, r3, #3
 8000ed6:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <FND_update+0xac>)
 8000ed8:	fba3 2301 	umull	r2, r3, r3, r1
 8000edc:	08da      	lsrs	r2, r3, #3
 8000ede:	4613      	mov	r3, r2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	4413      	add	r3, r2
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	1aca      	subs	r2, r1, r3
 8000ee8:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <FND_update+0xb0>)
 8000eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <FND_update+0xb4>)
 8000ef2:	805a      	strh	r2, [r3, #2]
	FND[2] = FND_font[value / 100 % 10];
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a19      	ldr	r2, [pc, #100]	; (8000f5c <FND_update+0xb8>)
 8000ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8000efc:	0959      	lsrs	r1, r3, #5
 8000efe:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <FND_update+0xac>)
 8000f00:	fba3 2301 	umull	r2, r3, r3, r1
 8000f04:	08da      	lsrs	r2, r3, #3
 8000f06:	4613      	mov	r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	4413      	add	r3, r2
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	1aca      	subs	r2, r1, r3
 8000f10:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <FND_update+0xb0>)
 8000f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <FND_update+0xb4>)
 8000f1a:	809a      	strh	r2, [r3, #4]
	FND[3] = FND_font[value / 1000 % 10];
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a10      	ldr	r2, [pc, #64]	; (8000f60 <FND_update+0xbc>)
 8000f20:	fba2 2303 	umull	r2, r3, r2, r3
 8000f24:	0999      	lsrs	r1, r3, #6
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <FND_update+0xac>)
 8000f28:	fba3 2301 	umull	r2, r3, r3, r1
 8000f2c:	08da      	lsrs	r2, r3, #3
 8000f2e:	4613      	mov	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4413      	add	r3, r2
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	1aca      	subs	r2, r1, r3
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <FND_update+0xb0>)
 8000f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <FND_update+0xb4>)
 8000f42:	80da      	strh	r2, [r3, #6]

	return;
 8000f44:	bf00      	nop
}
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	cccccccd 	.word	0xcccccccd
 8000f54:	200000e8 	.word	0x200000e8
 8000f58:	200001b0 	.word	0x200001b0
 8000f5c:	51eb851f 	.word	0x51eb851f
 8000f60:	10624dd3 	.word	0x10624dd3

08000f64 <FND4digit_off>:
void FND4digit_off(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
#if 0 // common 에노우드 WCN4-
	HAL_GPIO_WritePin(FND_COM_PORT, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(FND_DATA_PORT,FND_font[8]|FND_p, GPIO_PIN_SET);
#else // common 캐소우드 CL5642AH30
	HAL_GPIO_WritePin(FND_COM_PORT, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_SET);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000f6e:	4808      	ldr	r0, [pc, #32]	; (8000f90 <FND4digit_off+0x2c>)
 8000f70:	f003 f838 	bl	8003fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FND_DATA_PORT,FND_font[8]|FND_p, GPIO_PIN_RESET);
 8000f74:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <FND4digit_off+0x30>)
 8000f76:	6a1b      	ldr	r3, [r3, #32]
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	2200      	movs	r2, #0
 8000f82:	4619      	mov	r1, r3
 8000f84:	4804      	ldr	r0, [pc, #16]	; (8000f98 <FND4digit_off+0x34>)
 8000f86:	f003 f82d 	bl	8003fe4 <HAL_GPIO_WritePin>
#endif
	return;
 8000f8a:	bf00      	nop
}
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40020800 	.word	0x40020800
 8000f94:	200000e8 	.word	0x200000e8
 8000f98:	40020400 	.word	0x40020400

08000f9c <FND_print>:
	return;
}


void FND_print(int value)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

	static int i = 0;

	int min = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
	int second = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	613b      	str	r3, [r7, #16]
	int sum = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]

	min = value / 60;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a25      	ldr	r2, [pc, #148]	; (8001048 <FND_print+0xac>)
 8000fb4:	fb82 1203 	smull	r1, r2, r2, r3
 8000fb8:	441a      	add	r2, r3
 8000fba:	1152      	asrs	r2, r2, #5
 8000fbc:	17db      	asrs	r3, r3, #31
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	617b      	str	r3, [r7, #20]
	second = value % 60;
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	4b20      	ldr	r3, [pc, #128]	; (8001048 <FND_print+0xac>)
 8000fc6:	fb83 1302 	smull	r1, r3, r3, r2
 8000fca:	4413      	add	r3, r2
 8000fcc:	1159      	asrs	r1, r3, #5
 8000fce:	17d3      	asrs	r3, r2, #31
 8000fd0:	1ac9      	subs	r1, r1, r3
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	011b      	lsls	r3, r3, #4
 8000fd6:	1a5b      	subs	r3, r3, r1
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	613b      	str	r3, [r7, #16]
	sum = min * 100 + second;
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	2264      	movs	r2, #100	; 0x64
 8000fe2:	fb02 f303 	mul.w	r3, r2, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4413      	add	r3, r2
 8000fea:	60fb      	str	r3, [r7, #12]

	FND_update(sum);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff ff58 	bl	8000ea4 <FND_update>

	FND4digit_off();
 8000ff4:	f7ff ffb6 	bl	8000f64 <FND4digit_off>

	HAL_GPIO_WritePin(FND_COM_PORT,FND_digit[i], GPIO_PIN_RESET);
 8000ff8:	4b14      	ldr	r3, [pc, #80]	; (800104c <FND_print+0xb0>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a14      	ldr	r2, [pc, #80]	; (8001050 <FND_print+0xb4>)
 8000ffe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001002:	2200      	movs	r2, #0
 8001004:	4619      	mov	r1, r3
 8001006:	4813      	ldr	r0, [pc, #76]	; (8001054 <FND_print+0xb8>)
 8001008:	f002 ffec 	bl	8003fe4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FND_DATA_PORT, FND[i], GPIO_PIN_SET);
 800100c:	4b0f      	ldr	r3, [pc, #60]	; (800104c <FND_print+0xb0>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a11      	ldr	r2, [pc, #68]	; (8001058 <FND_print+0xbc>)
 8001012:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001016:	2201      	movs	r2, #1
 8001018:	4619      	mov	r1, r3
 800101a:	4810      	ldr	r0, [pc, #64]	; (800105c <FND_print+0xc0>)
 800101c:	f002 ffe2 	bl	8003fe4 <HAL_GPIO_WritePin>

	i++;
 8001020:	4b0a      	ldr	r3, [pc, #40]	; (800104c <FND_print+0xb0>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	3301      	adds	r3, #1
 8001026:	4a09      	ldr	r2, [pc, #36]	; (800104c <FND_print+0xb0>)
 8001028:	6013      	str	r3, [r2, #0]
	i%=4;
 800102a:	4b08      	ldr	r3, [pc, #32]	; (800104c <FND_print+0xb0>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	425a      	negs	r2, r3
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	f002 0203 	and.w	r2, r2, #3
 8001038:	bf58      	it	pl
 800103a:	4253      	negpl	r3, r2
 800103c:	4a03      	ldr	r2, [pc, #12]	; (800104c <FND_print+0xb0>)
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	88888889 	.word	0x88888889
 800104c:	200001b8 	.word	0x200001b8
 8001050:	200000e0 	.word	0x200000e0
 8001054:	40020800 	.word	0x40020800
 8001058:	200001b0 	.word	0x200001b0
 800105c:	40020400 	.word	0x40020400

08001060 <i2c_lcd_washer>:

extern I2C_HandleTypeDef hi2c1;
extern UART_HandleTypeDef huart3;

void i2c_lcd_washer(int wash, int rinse, int dry, char *mode)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08c      	sub	sp, #48	; 0x30
 8001064:	af02      	add	r7, sp, #8
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
 800106c:	603b      	str	r3, [r7, #0]
	i2c_lcd_init();
 800106e:	f000 f937 	bl	80012e0 <i2c_lcd_init>
	move_cursor(0,0);
 8001072:	2100      	movs	r1, #0
 8001074:	2000      	movs	r0, #0
 8001076:	f000 f961 	bl	800133c <move_cursor>
	lcd_string("WAS|RIN|DRY|MODE");
 800107a:	4850      	ldr	r0, [pc, #320]	; (80011bc <i2c_lcd_washer+0x15c>)
 800107c:	f000 f949 	bl	8001312 <lcd_string>
	char temp[20];

	if (wash == 0 && rinse == 0 && dry == 0)
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10d      	bne.n	80010a2 <i2c_lcd_washer+0x42>
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d10a      	bne.n	80010a2 <i2c_lcd_washer+0x42>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d107      	bne.n	80010a2 <i2c_lcd_washer+0x42>
	{
		sprintf(temp, "   |   |   |%s", mode);
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	683a      	ldr	r2, [r7, #0]
 8001098:	4949      	ldr	r1, [pc, #292]	; (80011c0 <i2c_lcd_washer+0x160>)
 800109a:	4618      	mov	r0, r3
 800109c:	f007 f8c6 	bl	800822c <siprintf>
 80010a0:	e07f      	b.n	80011a2 <i2c_lcd_washer+0x142>
	}
	else if (wash == 0 && rinse == 0 && dry != 0)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d10d      	bne.n	80010c4 <i2c_lcd_washer+0x64>
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d10a      	bne.n	80010c4 <i2c_lcd_washer+0x64>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d007      	beq.n	80010c4 <i2c_lcd_washer+0x64>
	{
		sprintf(temp, "   |   | %d |%s", dry, mode);
 80010b4:	f107 0014 	add.w	r0, r7, #20
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	4941      	ldr	r1, [pc, #260]	; (80011c4 <i2c_lcd_washer+0x164>)
 80010be:	f007 f8b5 	bl	800822c <siprintf>
 80010c2:	e06e      	b.n	80011a2 <i2c_lcd_washer+0x142>
	}
	else if (wash == 0 && rinse != 0 && dry == 0)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d10d      	bne.n	80010e6 <i2c_lcd_washer+0x86>
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d00a      	beq.n	80010e6 <i2c_lcd_washer+0x86>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d107      	bne.n	80010e6 <i2c_lcd_washer+0x86>
	{
		sprintf(temp, "   | %d |   |%s", rinse, mode);
 80010d6:	f107 0014 	add.w	r0, r7, #20
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	68ba      	ldr	r2, [r7, #8]
 80010de:	493a      	ldr	r1, [pc, #232]	; (80011c8 <i2c_lcd_washer+0x168>)
 80010e0:	f007 f8a4 	bl	800822c <siprintf>
 80010e4:	e05d      	b.n	80011a2 <i2c_lcd_washer+0x142>
	}
	else if (wash == 0 && rinse != 0 && dry != 0)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d10f      	bne.n	800110c <i2c_lcd_washer+0xac>
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d00c      	beq.n	800110c <i2c_lcd_washer+0xac>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d009      	beq.n	800110c <i2c_lcd_washer+0xac>
	{
		sprintf(temp, "   | %d | %d |%s", rinse, dry, mode);
 80010f8:	f107 0014 	add.w	r0, r7, #20
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	4931      	ldr	r1, [pc, #196]	; (80011cc <i2c_lcd_washer+0x16c>)
 8001106:	f007 f891 	bl	800822c <siprintf>
 800110a:	e04a      	b.n	80011a2 <i2c_lcd_washer+0x142>
	}
	else if (wash != 0 && rinse == 0 && dry == 0)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d00d      	beq.n	800112e <i2c_lcd_washer+0xce>
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d10a      	bne.n	800112e <i2c_lcd_washer+0xce>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d107      	bne.n	800112e <i2c_lcd_washer+0xce>
	{
		sprintf(temp, " %d |   |   |%s", wash, mode);
 800111e:	f107 0014 	add.w	r0, r7, #20
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	492a      	ldr	r1, [pc, #168]	; (80011d0 <i2c_lcd_washer+0x170>)
 8001128:	f007 f880 	bl	800822c <siprintf>
 800112c:	e039      	b.n	80011a2 <i2c_lcd_washer+0x142>
	}
	else if (wash != 0 && rinse == 0 && dry != 0)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d00f      	beq.n	8001154 <i2c_lcd_washer+0xf4>
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10c      	bne.n	8001154 <i2c_lcd_washer+0xf4>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d009      	beq.n	8001154 <i2c_lcd_washer+0xf4>
	{
		sprintf(temp, " %d |   | %d |%s", wash, dry, mode);
 8001140:	f107 0014 	add.w	r0, r7, #20
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	4921      	ldr	r1, [pc, #132]	; (80011d4 <i2c_lcd_washer+0x174>)
 800114e:	f007 f86d 	bl	800822c <siprintf>
 8001152:	e026      	b.n	80011a2 <i2c_lcd_washer+0x142>
	}
	else if (wash != 0 && rinse != 0 && dry == 0)
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00f      	beq.n	800117a <i2c_lcd_washer+0x11a>
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d00c      	beq.n	800117a <i2c_lcd_washer+0x11a>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d109      	bne.n	800117a <i2c_lcd_washer+0x11a>
	{
		sprintf(temp, " %d | %d |   |%s", wash, rinse, mode);
 8001166:	f107 0014 	add.w	r0, r7, #20
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	68fa      	ldr	r2, [r7, #12]
 8001172:	4919      	ldr	r1, [pc, #100]	; (80011d8 <i2c_lcd_washer+0x178>)
 8001174:	f007 f85a 	bl	800822c <siprintf>
 8001178:	e013      	b.n	80011a2 <i2c_lcd_washer+0x142>
	}
	else if (wash != 0 && rinse != 0 && dry != 0)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d010      	beq.n	80011a2 <i2c_lcd_washer+0x142>
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d00d      	beq.n	80011a2 <i2c_lcd_washer+0x142>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d00a      	beq.n	80011a2 <i2c_lcd_washer+0x142>
	{
		sprintf(temp, " %d | %d | %d |%s", wash, rinse, dry, mode);
 800118c:	f107 0014 	add.w	r0, r7, #20
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	490f      	ldr	r1, [pc, #60]	; (80011dc <i2c_lcd_washer+0x17c>)
 800119e:	f007 f845 	bl	800822c <siprintf>
	}

	move_cursor(1,0);
 80011a2:	2100      	movs	r1, #0
 80011a4:	2001      	movs	r0, #1
 80011a6:	f000 f8c9 	bl	800133c <move_cursor>
	lcd_string(temp);
 80011aa:	f107 0314 	add.w	r3, r7, #20
 80011ae:	4618      	mov	r0, r3
 80011b0:	f000 f8af 	bl	8001312 <lcd_string>
}
 80011b4:	bf00      	nop
 80011b6:	3728      	adds	r7, #40	; 0x28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	080092b8 	.word	0x080092b8
 80011c0:	080092cc 	.word	0x080092cc
 80011c4:	080092dc 	.word	0x080092dc
 80011c8:	080092ec 	.word	0x080092ec
 80011cc:	080092fc 	.word	0x080092fc
 80011d0:	08009310 	.word	0x08009310
 80011d4:	08009320 	.word	0x08009320
 80011d8:	08009334 	.word	0x08009334
 80011dc:	08009348 	.word	0x08009348

080011e0 <i2c_lcd_washer_init>:

void i2c_lcd_washer_init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
	i2c_lcd_init();
 80011e4:	f000 f87c 	bl	80012e0 <i2c_lcd_init>
	move_cursor(0,0);
 80011e8:	2100      	movs	r1, #0
 80011ea:	2000      	movs	r0, #0
 80011ec:	f000 f8a6 	bl	800133c <move_cursor>
	lcd_string("WAS|RIN|DRY|MODE");
 80011f0:	4805      	ldr	r0, [pc, #20]	; (8001208 <i2c_lcd_washer_init+0x28>)
 80011f2:	f000 f88e 	bl	8001312 <lcd_string>
	move_cursor(1,0);
 80011f6:	2100      	movs	r1, #0
 80011f8:	2001      	movs	r0, #1
 80011fa:	f000 f89f 	bl	800133c <move_cursor>
	lcd_string("   |   |   |BASI");
 80011fe:	4803      	ldr	r0, [pc, #12]	; (800120c <i2c_lcd_washer_init+0x2c>)
 8001200:	f000 f887 	bl	8001312 <lcd_string>
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	080092b8 	.word	0x080092b8
 800120c:	0800935c 	.word	0x0800935c

08001210 <lcd_command>:
		HAL_Delay(500);
	}
}

void lcd_command(uint8_t command)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af02      	add	r7, sp, #8
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = command & 0xf0;
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	f023 030f 	bic.w	r3, r3, #15
 8001220:	73fb      	strb	r3, [r7, #15]
	low_nibble = (command<<4) & 0xf0;
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	011b      	lsls	r3, r3, #4
 8001226:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	f043 030c 	orr.w	r3, r3, #12
 800122e:	b2db      	uxtb	r3, r3
 8001230:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 8001232:	7bfb      	ldrb	r3, [r7, #15]
 8001234:	f043 0308 	orr.w	r3, r3, #8
 8001238:	b2db      	uxtb	r3, r3
 800123a:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 800123c:	7bbb      	ldrb	r3, [r7, #14]
 800123e:	f043 030c 	orr.w	r3, r3, #12
 8001242:	b2db      	uxtb	r3, r3
 8001244:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 8001246:	7bbb      	ldrb	r3, [r7, #14]
 8001248:	f043 0308 	orr.w	r3, r3, #8
 800124c:	b2db      	uxtb	r3, r3
 800124e:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 8001250:	bf00      	nop
 8001252:	f107 0208 	add.w	r2, r7, #8
 8001256:	2364      	movs	r3, #100	; 0x64
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	2304      	movs	r3, #4
 800125c:	214e      	movs	r1, #78	; 0x4e
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <lcd_command+0x64>)
 8001260:	f003 f81e 	bl	80042a0 <HAL_I2C_Master_Transmit>
 8001264:	4603      	mov	r3, r0
			i2c_buffer, 4, 100)!=HAL_OK){
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1f3      	bne.n	8001252 <lcd_command+0x42>
		//HAL_Delay(1);
	}
	return;
 800126a:	bf00      	nop
}
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200003e4 	.word	0x200003e4

08001278 <lcd_data>:

// 1 byte write
void lcd_data(uint8_t data)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af02      	add	r7, sp, #8
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = data & 0xf0;
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	f023 030f 	bic.w	r3, r3, #15
 8001288:	73fb      	strb	r3, [r7, #15]
	low_nibble = (data<<4) & 0xf0;
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	011b      	lsls	r3, r3, #4
 800128e:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	f043 030d 	orr.w	r3, r3, #13
 8001296:	b2db      	uxtb	r3, r3
 8001298:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	f043 0309 	orr.w	r3, r3, #9
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 80012a4:	7bbb      	ldrb	r3, [r7, #14]
 80012a6:	f043 030d 	orr.w	r3, r3, #13
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 80012ae:	7bbb      	ldrb	r3, [r7, #14]
 80012b0:	f043 0309 	orr.w	r3, r3, #9
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 80012b8:	bf00      	nop
 80012ba:	f107 0208 	add.w	r2, r7, #8
 80012be:	2364      	movs	r3, #100	; 0x64
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	2304      	movs	r3, #4
 80012c4:	214e      	movs	r1, #78	; 0x4e
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <lcd_data+0x64>)
 80012c8:	f002 ffea 	bl	80042a0 <HAL_I2C_Master_Transmit>
 80012cc:	4603      	mov	r3, r0
			i2c_buffer, 4, 100)!=HAL_OK){
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f3      	bne.n	80012ba <lcd_data+0x42>
		//HAL_Delay(1);
	}
	return;
 80012d2:	bf00      	nop
}
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200003e4 	.word	0x200003e4

080012e0 <i2c_lcd_init>:
// lcd 초기화
void i2c_lcd_init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0

	lcd_command(0x33);
 80012e4:	2033      	movs	r0, #51	; 0x33
 80012e6:	f7ff ff93 	bl	8001210 <lcd_command>
	lcd_command(0x32);
 80012ea:	2032      	movs	r0, #50	; 0x32
 80012ec:	f7ff ff90 	bl	8001210 <lcd_command>
	lcd_command(0x28);	//Function Set 4-bit mode
 80012f0:	2028      	movs	r0, #40	; 0x28
 80012f2:	f7ff ff8d 	bl	8001210 <lcd_command>
	lcd_command(DISPLAY_ON);
 80012f6:	200c      	movs	r0, #12
 80012f8:	f7ff ff8a 	bl	8001210 <lcd_command>
	lcd_command(0x06);	//Entry mode set
 80012fc:	2006      	movs	r0, #6
 80012fe:	f7ff ff87 	bl	8001210 <lcd_command>
	lcd_command(CLEAR_DISPLAY);
 8001302:	2001      	movs	r0, #1
 8001304:	f7ff ff84 	bl	8001210 <lcd_command>
	HAL_Delay(2);
 8001308:	2002      	movs	r0, #2
 800130a:	f001 ffb7 	bl	800327c <HAL_Delay>
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}

08001312 <lcd_string>:

// null을 만날때 까지 string을 LCD에 출력
void lcd_string(uint8_t *str)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
	while(*str)
 800131a:	e006      	b.n	800132a <lcd_string+0x18>
	{
		lcd_data(*str++);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	1c5a      	adds	r2, r3, #1
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ffa7 	bl	8001278 <lcd_data>
	while(*str)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1f4      	bne.n	800131c <lcd_string+0xa>
	}
}
 8001332:	bf00      	nop
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <move_cursor>:

// 해당 줄,col으로 이동 하는 함수
void move_cursor(uint8_t row, uint8_t column)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	460a      	mov	r2, r1
 8001346:	71fb      	strb	r3, [r7, #7]
 8001348:	4613      	mov	r3, r2
 800134a:	71bb      	strb	r3, [r7, #6]
	lcd_command(0x80 | row<<6 | column);
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	019b      	lsls	r3, r3, #6
 8001350:	b2da      	uxtb	r2, r3
 8001352:	79bb      	ldrb	r3, [r7, #6]
 8001354:	4313      	orrs	r3, r2
 8001356:	b2db      	uxtb	r3, r3
 8001358:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800135c:	b2db      	uxtb	r3, r3
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff ff56 	bl	8001210 <lcd_command>
	return;
 8001364:	bf00      	nop
}
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <HAL_SYSTICK_Handler>:
// call by SysTick_Handler of stm32f4xx_it.c
// ARM default timer
// enter here every 1ms
volatile int t1ms_counter = 0;	// volatile : for disable optimize
void HAL_SYSTICK_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
	t1ms_counter++;	// 1ms timer
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <HAL_SYSTICK_Handler+0x18>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	3301      	adds	r3, #1
 8001376:	4a03      	ldr	r2, [pc, #12]	; (8001384 <HAL_SYSTICK_Handler+0x18>)
 8001378:	6013      	str	r3, [r2, #0]
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	20000af0 	.word	0x20000af0

08001388 <delay_us>:

void delay_us(unsigned long us)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim11, 0);	// tim11 clear
 8001390:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <delay_us+0x2c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2200      	movs	r2, #0
 8001396:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim11) < us)
 8001398:	bf00      	nop
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <delay_us+0x2c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d8f9      	bhi.n	800139a <delay_us+0x12>
	{

	}
}
 80013a6:	bf00      	nop
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	20000558 	.word	0x20000558

080013b8 <HAL_TIM_PeriodElapsedCallback>:
  */
volatile int TIM10_10ms_counter = 0;
volatile int TIM10_10ms_ultrasonic = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
   if (htim->Instance == TIM10)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a09      	ldr	r2, [pc, #36]	; (80013ec <HAL_TIM_PeriodElapsedCallback+0x34>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d109      	bne.n	80013de <HAL_TIM_PeriodElapsedCallback+0x26>
   {
      TIM10_10ms_counter++;			// 10ms timer counter
 80013ca:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	3301      	adds	r3, #1
 80013d0:	4a07      	ldr	r2, [pc, #28]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80013d2:	6013      	str	r3, [r2, #0]
      TIM10_10ms_ultrasonic++;
 80013d4:	4b07      	ldr	r3, [pc, #28]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	3301      	adds	r3, #1
 80013da:	4a06      	ldr	r2, [pc, #24]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80013dc:	6013      	str	r3, [r2, #0]
   }
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	40014400 	.word	0x40014400
 80013f0:	20000af4 	.word	0x20000af4
 80013f4:	20000af8 	.word	0x20000af8

080013f8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8001400:	1d39      	adds	r1, r7, #4
 8001402:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001406:	2201      	movs	r2, #1
 8001408:	4803      	ldr	r0, [pc, #12]	; (8001418 <__io_putchar+0x20>)
 800140a:	f005 fb16 	bl	8006a3a <HAL_UART_Transmit>

  return ch;
 800140e:	687b      	ldr	r3, [r7, #4]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	200005a0 	.word	0x200005a0

0800141c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001420:	f001 feba 	bl	8003198 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001424:	f000 f838 	bl	8001498 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001428:	f000 fad6 	bl	80019d8 <MX_GPIO_Init>
  MX_ETH_Init();
 800142c:	f000 f89e 	bl	800156c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001430:	f000 fa7a 	bl	8001928 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001434:	f000 faa2 	bl	800197c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM10_Init();
 8001438:	f000 fa2e 	bl	8001898 <MX_TIM10_Init>
  MX_TIM11_Init();
 800143c:	f000 fa50 	bl	80018e0 <MX_TIM11_Init>
  MX_TIM3_Init();
 8001440:	f000 f922 	bl	8001688 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001444:	f000 f8e0 	bl	8001608 <MX_I2C1_Init>
  MX_TIM4_Init();
 8001448:	f000 f972 	bl	8001730 <MX_TIM4_Init>
  MX_TIM5_Init();
 800144c:	f000 f9ca 	bl	80017e4 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim10);
 8001450:	480c      	ldr	r0, [pc, #48]	; (8001484 <main+0x68>)
 8001452:	f004 f8ad 	bl	80055b0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8001456:	480c      	ldr	r0, [pc, #48]	; (8001488 <main+0x6c>)
 8001458:	f004 f8aa 	bl	80055b0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);	// for count pulse (rising edge & falling edge)
 800145c:	2100      	movs	r1, #0
 800145e:	480b      	ldr	r0, [pc, #44]	; (800148c <main+0x70>)
 8001460:	f004 fa7e 	bl	8005960 <HAL_TIM_IC_Start_IT>
  i2c_lcd_washer_init();
 8001464:	f7ff febc 	bl	80011e0 <i2c_lcd_washer_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
printf("START!!!\n");
 8001468:	4809      	ldr	r0, [pc, #36]	; (8001490 <main+0x74>)
 800146a:	f006 fed7 	bl	800821c <puts>
__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, 0);
 800146e:	4b09      	ldr	r3, [pc, #36]	; (8001494 <main+0x78>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2200      	movs	r2, #0
 8001474:	641a      	str	r2, [r3, #64]	; 0x40
HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);	// start sound
 8001476:	210c      	movs	r1, #12
 8001478:	4806      	ldr	r0, [pc, #24]	; (8001494 <main+0x78>)
 800147a:	f004 f959 	bl	8005730 <HAL_TIM_PWM_Start>

  while (1)
  {
	  washer_main();
 800147e:	f001 f81b 	bl	80024b8 <washer_main>
 8001482:	e7fc      	b.n	800147e <main+0x62>
 8001484:	20000510 	.word	0x20000510
 8001488:	20000558 	.word	0x20000558
 800148c:	20000438 	.word	0x20000438
 8001490:	08009380 	.word	0x08009380
 8001494:	200004c8 	.word	0x200004c8

08001498 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b094      	sub	sp, #80	; 0x50
 800149c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800149e:	f107 0320 	add.w	r3, r7, #32
 80014a2:	2230      	movs	r2, #48	; 0x30
 80014a4:	2100      	movs	r1, #0
 80014a6:	4618      	mov	r0, r3
 80014a8:	f006 ffb8 	bl	800841c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014bc:	2300      	movs	r3, #0
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	4b28      	ldr	r3, [pc, #160]	; (8001564 <SystemClock_Config+0xcc>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	4a27      	ldr	r2, [pc, #156]	; (8001564 <SystemClock_Config+0xcc>)
 80014c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ca:	6413      	str	r3, [r2, #64]	; 0x40
 80014cc:	4b25      	ldr	r3, [pc, #148]	; (8001564 <SystemClock_Config+0xcc>)
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014d8:	2300      	movs	r3, #0
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	4b22      	ldr	r3, [pc, #136]	; (8001568 <SystemClock_Config+0xd0>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a21      	ldr	r2, [pc, #132]	; (8001568 <SystemClock_Config+0xd0>)
 80014e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014e6:	6013      	str	r3, [r2, #0]
 80014e8:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <SystemClock_Config+0xd0>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014f4:	2301      	movs	r3, #1
 80014f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80014f8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014fe:	2302      	movs	r3, #2
 8001500:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001502:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001506:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001508:	2304      	movs	r3, #4
 800150a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800150c:	23a8      	movs	r3, #168	; 0xa8
 800150e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001510:	2302      	movs	r3, #2
 8001512:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001514:	2307      	movs	r3, #7
 8001516:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001518:	f107 0320 	add.w	r3, r7, #32
 800151c:	4618      	mov	r0, r3
 800151e:	f003 fb5f 	bl	8004be0 <HAL_RCC_OscConfig>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001528:	f000 fb84 	bl	8001c34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800152c:	230f      	movs	r3, #15
 800152e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001530:	2302      	movs	r3, #2
 8001532:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001538:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800153c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800153e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001542:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001544:	f107 030c 	add.w	r3, r7, #12
 8001548:	2105      	movs	r1, #5
 800154a:	4618      	mov	r0, r3
 800154c:	f003 fdc0 	bl	80050d0 <HAL_RCC_ClockConfig>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001556:	f000 fb6d 	bl	8001c34 <Error_Handler>
  }
}
 800155a:	bf00      	nop
 800155c:	3750      	adds	r7, #80	; 0x50
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40023800 	.word	0x40023800
 8001568:	40007000 	.word	0x40007000

0800156c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001570:	4b1f      	ldr	r3, [pc, #124]	; (80015f0 <MX_ETH_Init+0x84>)
 8001572:	4a20      	ldr	r2, [pc, #128]	; (80015f4 <MX_ETH_Init+0x88>)
 8001574:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001576:	4b20      	ldr	r3, [pc, #128]	; (80015f8 <MX_ETH_Init+0x8c>)
 8001578:	2200      	movs	r2, #0
 800157a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800157c:	4b1e      	ldr	r3, [pc, #120]	; (80015f8 <MX_ETH_Init+0x8c>)
 800157e:	2280      	movs	r2, #128	; 0x80
 8001580:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001582:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <MX_ETH_Init+0x8c>)
 8001584:	22e1      	movs	r2, #225	; 0xe1
 8001586:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <MX_ETH_Init+0x8c>)
 800158a:	2200      	movs	r2, #0
 800158c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800158e:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <MX_ETH_Init+0x8c>)
 8001590:	2200      	movs	r2, #0
 8001592:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001594:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <MX_ETH_Init+0x8c>)
 8001596:	2200      	movs	r2, #0
 8001598:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800159a:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <MX_ETH_Init+0x84>)
 800159c:	4a16      	ldr	r2, [pc, #88]	; (80015f8 <MX_ETH_Init+0x8c>)
 800159e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80015a0:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <MX_ETH_Init+0x84>)
 80015a2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80015a6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <MX_ETH_Init+0x84>)
 80015aa:	4a14      	ldr	r2, [pc, #80]	; (80015fc <MX_ETH_Init+0x90>)
 80015ac:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <MX_ETH_Init+0x84>)
 80015b0:	4a13      	ldr	r2, [pc, #76]	; (8001600 <MX_ETH_Init+0x94>)
 80015b2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80015b4:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <MX_ETH_Init+0x84>)
 80015b6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80015ba:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80015bc:	480c      	ldr	r0, [pc, #48]	; (80015f0 <MX_ETH_Init+0x84>)
 80015be:	f002 f825 	bl	800360c <HAL_ETH_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80015c8:	f000 fb34 	bl	8001c34 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80015cc:	2238      	movs	r2, #56	; 0x38
 80015ce:	2100      	movs	r1, #0
 80015d0:	480c      	ldr	r0, [pc, #48]	; (8001604 <MX_ETH_Init+0x98>)
 80015d2:	f006 ff23 	bl	800841c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <MX_ETH_Init+0x98>)
 80015d8:	2221      	movs	r2, #33	; 0x21
 80015da:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <MX_ETH_Init+0x98>)
 80015de:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80015e2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80015e4:	4b07      	ldr	r3, [pc, #28]	; (8001604 <MX_ETH_Init+0x98>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000334 	.word	0x20000334
 80015f4:	40028000 	.word	0x40028000
 80015f8:	20000afc 	.word	0x20000afc
 80015fc:	20000294 	.word	0x20000294
 8001600:	200001f4 	.word	0x200001f4
 8001604:	200001bc 	.word	0x200001bc

08001608 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800160c:	4b1b      	ldr	r3, [pc, #108]	; (800167c <MX_I2C1_Init+0x74>)
 800160e:	4a1c      	ldr	r2, [pc, #112]	; (8001680 <MX_I2C1_Init+0x78>)
 8001610:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001612:	4b1a      	ldr	r3, [pc, #104]	; (800167c <MX_I2C1_Init+0x74>)
 8001614:	4a1b      	ldr	r2, [pc, #108]	; (8001684 <MX_I2C1_Init+0x7c>)
 8001616:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001618:	4b18      	ldr	r3, [pc, #96]	; (800167c <MX_I2C1_Init+0x74>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800161e:	4b17      	ldr	r3, [pc, #92]	; (800167c <MX_I2C1_Init+0x74>)
 8001620:	2200      	movs	r2, #0
 8001622:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001624:	4b15      	ldr	r3, [pc, #84]	; (800167c <MX_I2C1_Init+0x74>)
 8001626:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800162a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800162c:	4b13      	ldr	r3, [pc, #76]	; (800167c <MX_I2C1_Init+0x74>)
 800162e:	2200      	movs	r2, #0
 8001630:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001632:	4b12      	ldr	r3, [pc, #72]	; (800167c <MX_I2C1_Init+0x74>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001638:	4b10      	ldr	r3, [pc, #64]	; (800167c <MX_I2C1_Init+0x74>)
 800163a:	2200      	movs	r2, #0
 800163c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800163e:	4b0f      	ldr	r3, [pc, #60]	; (800167c <MX_I2C1_Init+0x74>)
 8001640:	2200      	movs	r2, #0
 8001642:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001644:	480d      	ldr	r0, [pc, #52]	; (800167c <MX_I2C1_Init+0x74>)
 8001646:	f002 fce7 	bl	8004018 <HAL_I2C_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001650:	f000 faf0 	bl	8001c34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001654:	2100      	movs	r1, #0
 8001656:	4809      	ldr	r0, [pc, #36]	; (800167c <MX_I2C1_Init+0x74>)
 8001658:	f003 f929 	bl	80048ae <HAL_I2CEx_ConfigAnalogFilter>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001662:	f000 fae7 	bl	8001c34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001666:	2100      	movs	r1, #0
 8001668:	4804      	ldr	r0, [pc, #16]	; (800167c <MX_I2C1_Init+0x74>)
 800166a:	f003 f95c 	bl	8004926 <HAL_I2CEx_ConfigDigitalFilter>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001674:	f000 fade 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}
 800167c:	200003e4 	.word	0x200003e4
 8001680:	40005400 	.word	0x40005400
 8001684:	000186a0 	.word	0x000186a0

08001688 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800168e:	f107 0310 	add.w	r3, r7, #16
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001698:	463b      	mov	r3, r7
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]
 80016a2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016a4:	4b20      	ldr	r3, [pc, #128]	; (8001728 <MX_TIM3_Init+0xa0>)
 80016a6:	4a21      	ldr	r2, [pc, #132]	; (800172c <MX_TIM3_Init+0xa4>)
 80016a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80016aa:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <MX_TIM3_Init+0xa0>)
 80016ac:	2253      	movs	r2, #83	; 0x53
 80016ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b0:	4b1d      	ldr	r3, [pc, #116]	; (8001728 <MX_TIM3_Init+0xa0>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80016b6:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <MX_TIM3_Init+0xa0>)
 80016b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016be:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <MX_TIM3_Init+0xa0>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c4:	4b18      	ldr	r3, [pc, #96]	; (8001728 <MX_TIM3_Init+0xa0>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80016ca:	4817      	ldr	r0, [pc, #92]	; (8001728 <MX_TIM3_Init+0xa0>)
 80016cc:	f004 f8f8 	bl	80058c0 <HAL_TIM_IC_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80016d6:	f000 faad 	bl	8001c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016de:	2300      	movs	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016e2:	f107 0310 	add.w	r3, r7, #16
 80016e6:	4619      	mov	r1, r3
 80016e8:	480f      	ldr	r0, [pc, #60]	; (8001728 <MX_TIM3_Init+0xa0>)
 80016ea:	f005 f8c9 	bl	8006880 <HAL_TIMEx_MasterConfigSynchronization>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80016f4:	f000 fa9e 	bl	8001c34 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80016f8:	230a      	movs	r3, #10
 80016fa:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016fc:	2301      	movs	r3, #1
 80016fe:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001700:	2300      	movs	r3, #0
 8001702:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001708:	463b      	mov	r3, r7
 800170a:	2200      	movs	r2, #0
 800170c:	4619      	mov	r1, r3
 800170e:	4806      	ldr	r0, [pc, #24]	; (8001728 <MX_TIM3_Init+0xa0>)
 8001710:	f004 fb56 	bl	8005dc0 <HAL_TIM_IC_ConfigChannel>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800171a:	f000 fa8b 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800171e:	bf00      	nop
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000438 	.word	0x20000438
 800172c:	40000400 	.word	0x40000400

08001730 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08a      	sub	sp, #40	; 0x28
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001736:	f107 0320 	add.w	r3, r7, #32
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001740:	1d3b      	adds	r3, r7, #4
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
 800174c:	611a      	str	r2, [r3, #16]
 800174e:	615a      	str	r2, [r3, #20]
 8001750:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001752:	4b22      	ldr	r3, [pc, #136]	; (80017dc <MX_TIM4_Init+0xac>)
 8001754:	4a22      	ldr	r2, [pc, #136]	; (80017e0 <MX_TIM4_Init+0xb0>)
 8001756:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840-1;
 8001758:	4b20      	ldr	r3, [pc, #128]	; (80017dc <MX_TIM4_Init+0xac>)
 800175a:	f240 3247 	movw	r2, #839	; 0x347
 800175e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001760:	4b1e      	ldr	r3, [pc, #120]	; (80017dc <MX_TIM4_Init+0xac>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001766:	4b1d      	ldr	r3, [pc, #116]	; (80017dc <MX_TIM4_Init+0xac>)
 8001768:	2263      	movs	r2, #99	; 0x63
 800176a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800176c:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <MX_TIM4_Init+0xac>)
 800176e:	2200      	movs	r2, #0
 8001770:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001772:	4b1a      	ldr	r3, [pc, #104]	; (80017dc <MX_TIM4_Init+0xac>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001778:	4818      	ldr	r0, [pc, #96]	; (80017dc <MX_TIM4_Init+0xac>)
 800177a:	f003 ff89 	bl	8005690 <HAL_TIM_PWM_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001784:	f000 fa56 	bl	8001c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001788:	2300      	movs	r3, #0
 800178a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001790:	f107 0320 	add.w	r3, r7, #32
 8001794:	4619      	mov	r1, r3
 8001796:	4811      	ldr	r0, [pc, #68]	; (80017dc <MX_TIM4_Init+0xac>)
 8001798:	f005 f872 	bl	8006880 <HAL_TIMEx_MasterConfigSynchronization>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80017a2:	f000 fa47 	bl	8001c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017a6:	2360      	movs	r3, #96	; 0x60
 80017a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 70-1;
 80017aa:	2345      	movs	r3, #69	; 0x45
 80017ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80017b2:	2304      	movs	r3, #4
 80017b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	2200      	movs	r2, #0
 80017ba:	4619      	mov	r1, r3
 80017bc:	4807      	ldr	r0, [pc, #28]	; (80017dc <MX_TIM4_Init+0xac>)
 80017be:	f004 fb9b 	bl	8005ef8 <HAL_TIM_PWM_ConfigChannel>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80017c8:	f000 fa34 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80017cc:	4803      	ldr	r0, [pc, #12]	; (80017dc <MX_TIM4_Init+0xac>)
 80017ce:	f000 fc49 	bl	8002064 <HAL_TIM_MspPostInit>

}
 80017d2:	bf00      	nop
 80017d4:	3728      	adds	r7, #40	; 0x28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000480 	.word	0x20000480
 80017e0:	40000800 	.word	0x40000800

080017e4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	; 0x28
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ea:	f107 0320 	add.w	r3, r7, #32
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017f4:	1d3b      	adds	r3, r7, #4
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	609a      	str	r2, [r3, #8]
 80017fe:	60da      	str	r2, [r3, #12]
 8001800:	611a      	str	r2, [r3, #16]
 8001802:	615a      	str	r2, [r3, #20]
 8001804:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001806:	4b22      	ldr	r3, [pc, #136]	; (8001890 <MX_TIM5_Init+0xac>)
 8001808:	4a22      	ldr	r2, [pc, #136]	; (8001894 <MX_TIM5_Init+0xb0>)
 800180a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 52.5-1;
 800180c:	4b20      	ldr	r3, [pc, #128]	; (8001890 <MX_TIM5_Init+0xac>)
 800180e:	2233      	movs	r2, #51	; 0x33
 8001810:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001812:	4b1f      	ldr	r3, [pc, #124]	; (8001890 <MX_TIM5_Init+0xac>)
 8001814:	2200      	movs	r2, #0
 8001816:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 400-1;
 8001818:	4b1d      	ldr	r3, [pc, #116]	; (8001890 <MX_TIM5_Init+0xac>)
 800181a:	f240 128f 	movw	r2, #399	; 0x18f
 800181e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001820:	4b1b      	ldr	r3, [pc, #108]	; (8001890 <MX_TIM5_Init+0xac>)
 8001822:	2200      	movs	r2, #0
 8001824:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001826:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <MX_TIM5_Init+0xac>)
 8001828:	2200      	movs	r2, #0
 800182a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800182c:	4818      	ldr	r0, [pc, #96]	; (8001890 <MX_TIM5_Init+0xac>)
 800182e:	f003 ff2f 	bl	8005690 <HAL_TIM_PWM_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001838:	f000 f9fc 	bl	8001c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183c:	2300      	movs	r3, #0
 800183e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001840:	2300      	movs	r3, #0
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001844:	f107 0320 	add.w	r3, r7, #32
 8001848:	4619      	mov	r1, r3
 800184a:	4811      	ldr	r0, [pc, #68]	; (8001890 <MX_TIM5_Init+0xac>)
 800184c:	f005 f818 	bl	8006880 <HAL_TIMEx_MasterConfigSynchronization>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001856:	f000 f9ed 	bl	8001c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800185a:	2360      	movs	r3, #96	; 0x60
 800185c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200-1;
 800185e:	23c7      	movs	r3, #199	; 0xc7
 8001860:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	220c      	movs	r2, #12
 800186e:	4619      	mov	r1, r3
 8001870:	4807      	ldr	r0, [pc, #28]	; (8001890 <MX_TIM5_Init+0xac>)
 8001872:	f004 fb41 	bl	8005ef8 <HAL_TIM_PWM_ConfigChannel>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 800187c:	f000 f9da 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001880:	4803      	ldr	r0, [pc, #12]	; (8001890 <MX_TIM5_Init+0xac>)
 8001882:	f000 fbef 	bl	8002064 <HAL_TIM_MspPostInit>

}
 8001886:	bf00      	nop
 8001888:	3728      	adds	r7, #40	; 0x28
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200004c8 	.word	0x200004c8
 8001894:	40000c00 	.word	0x40000c00

08001898 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800189c:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <MX_TIM10_Init+0x40>)
 800189e:	4a0f      	ldr	r2, [pc, #60]	; (80018dc <MX_TIM10_Init+0x44>)
 80018a0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 80018a2:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <MX_TIM10_Init+0x40>)
 80018a4:	22a7      	movs	r2, #167	; 0xa7
 80018a6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <MX_TIM10_Init+0x40>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 80018ae:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <MX_TIM10_Init+0x40>)
 80018b0:	f242 720f 	movw	r2, #9999	; 0x270f
 80018b4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b6:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <MX_TIM10_Init+0x40>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <MX_TIM10_Init+0x40>)
 80018be:	2200      	movs	r2, #0
 80018c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80018c2:	4805      	ldr	r0, [pc, #20]	; (80018d8 <MX_TIM10_Init+0x40>)
 80018c4:	f003 fe24 	bl	8005510 <HAL_TIM_Base_Init>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80018ce:	f000 f9b1 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000510 	.word	0x20000510
 80018dc:	40014400 	.word	0x40014400

080018e0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80018e4:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <MX_TIM11_Init+0x40>)
 80018e6:	4a0f      	ldr	r2, [pc, #60]	; (8001924 <MX_TIM11_Init+0x44>)
 80018e8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 80018ea:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <MX_TIM11_Init+0x40>)
 80018ec:	22a7      	movs	r2, #167	; 0xa7
 80018ee:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <MX_TIM11_Init+0x40>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80018f6:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <MX_TIM11_Init+0x40>)
 80018f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018fc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <MX_TIM11_Init+0x40>)
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <MX_TIM11_Init+0x40>)
 8001906:	2200      	movs	r2, #0
 8001908:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800190a:	4805      	ldr	r0, [pc, #20]	; (8001920 <MX_TIM11_Init+0x40>)
 800190c:	f003 fe00 	bl	8005510 <HAL_TIM_Base_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001916:	f000 f98d 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000558 	.word	0x20000558
 8001924:	40014800 	.word	0x40014800

08001928 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <MX_USART3_UART_Init+0x4c>)
 800192e:	4a12      	ldr	r2, [pc, #72]	; (8001978 <MX_USART3_UART_Init+0x50>)
 8001930:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001932:	4b10      	ldr	r3, [pc, #64]	; (8001974 <MX_USART3_UART_Init+0x4c>)
 8001934:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001938:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800193a:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <MX_USART3_UART_Init+0x4c>)
 800193c:	2200      	movs	r2, #0
 800193e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001940:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <MX_USART3_UART_Init+0x4c>)
 8001942:	2200      	movs	r2, #0
 8001944:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001946:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <MX_USART3_UART_Init+0x4c>)
 8001948:	2200      	movs	r2, #0
 800194a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800194c:	4b09      	ldr	r3, [pc, #36]	; (8001974 <MX_USART3_UART_Init+0x4c>)
 800194e:	220c      	movs	r2, #12
 8001950:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001952:	4b08      	ldr	r3, [pc, #32]	; (8001974 <MX_USART3_UART_Init+0x4c>)
 8001954:	2200      	movs	r2, #0
 8001956:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <MX_USART3_UART_Init+0x4c>)
 800195a:	2200      	movs	r2, #0
 800195c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800195e:	4805      	ldr	r0, [pc, #20]	; (8001974 <MX_USART3_UART_Init+0x4c>)
 8001960:	f005 f81e 	bl	80069a0 <HAL_UART_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800196a:	f000 f963 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200005a0 	.word	0x200005a0
 8001978:	40004800 	.word	0x40004800

0800197c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001980:	4b14      	ldr	r3, [pc, #80]	; (80019d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001982:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001986:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001988:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800198a:	2204      	movs	r2, #4
 800198c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800198e:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001990:	2202      	movs	r2, #2
 8001992:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001994:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001996:	2200      	movs	r2, #0
 8001998:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800199a:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800199c:	2202      	movs	r2, #2
 800199e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80019a6:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80019ac:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80019b2:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80019be:	4805      	ldr	r0, [pc, #20]	; (80019d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019c0:	f002 fff0 	bl	80049a4 <HAL_PCD_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80019ca:	f000 f933 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	200005e4 	.word	0x200005e4

080019d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08e      	sub	sp, #56	; 0x38
 80019dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	60da      	str	r2, [r3, #12]
 80019ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	623b      	str	r3, [r7, #32]
 80019f2:	4b89      	ldr	r3, [pc, #548]	; (8001c18 <MX_GPIO_Init+0x240>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	4a88      	ldr	r2, [pc, #544]	; (8001c18 <MX_GPIO_Init+0x240>)
 80019f8:	f043 0310 	orr.w	r3, r3, #16
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
 80019fe:	4b86      	ldr	r3, [pc, #536]	; (8001c18 <MX_GPIO_Init+0x240>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	f003 0310 	and.w	r3, r3, #16
 8001a06:	623b      	str	r3, [r7, #32]
 8001a08:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
 8001a0e:	4b82      	ldr	r3, [pc, #520]	; (8001c18 <MX_GPIO_Init+0x240>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	4a81      	ldr	r2, [pc, #516]	; (8001c18 <MX_GPIO_Init+0x240>)
 8001a14:	f043 0304 	orr.w	r3, r3, #4
 8001a18:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1a:	4b7f      	ldr	r3, [pc, #508]	; (8001c18 <MX_GPIO_Init+0x240>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	f003 0304 	and.w	r3, r3, #4
 8001a22:	61fb      	str	r3, [r7, #28]
 8001a24:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	61bb      	str	r3, [r7, #24]
 8001a2a:	4b7b      	ldr	r3, [pc, #492]	; (8001c18 <MX_GPIO_Init+0x240>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	4a7a      	ldr	r2, [pc, #488]	; (8001c18 <MX_GPIO_Init+0x240>)
 8001a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a34:	6313      	str	r3, [r2, #48]	; 0x30
 8001a36:	4b78      	ldr	r3, [pc, #480]	; (8001c18 <MX_GPIO_Init+0x240>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a3e:	61bb      	str	r3, [r7, #24]
 8001a40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	4b74      	ldr	r3, [pc, #464]	; (8001c18 <MX_GPIO_Init+0x240>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a73      	ldr	r2, [pc, #460]	; (8001c18 <MX_GPIO_Init+0x240>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b71      	ldr	r3, [pc, #452]	; (8001c18 <MX_GPIO_Init+0x240>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
 8001a62:	4b6d      	ldr	r3, [pc, #436]	; (8001c18 <MX_GPIO_Init+0x240>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a6c      	ldr	r2, [pc, #432]	; (8001c18 <MX_GPIO_Init+0x240>)
 8001a68:	f043 0302 	orr.w	r3, r3, #2
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4b6a      	ldr	r3, [pc, #424]	; (8001c18 <MX_GPIO_Init+0x240>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	613b      	str	r3, [r7, #16]
 8001a78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	4b66      	ldr	r3, [pc, #408]	; (8001c18 <MX_GPIO_Init+0x240>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a65      	ldr	r2, [pc, #404]	; (8001c18 <MX_GPIO_Init+0x240>)
 8001a84:	f043 0320 	orr.w	r3, r3, #32
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b63      	ldr	r3, [pc, #396]	; (8001c18 <MX_GPIO_Init+0x240>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0320 	and.w	r3, r3, #32
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	4b5f      	ldr	r3, [pc, #380]	; (8001c18 <MX_GPIO_Init+0x240>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a5e      	ldr	r2, [pc, #376]	; (8001c18 <MX_GPIO_Init+0x240>)
 8001aa0:	f043 0308 	orr.w	r3, r3, #8
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b5c      	ldr	r3, [pc, #368]	; (8001c18 <MX_GPIO_Init+0x240>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	607b      	str	r3, [r7, #4]
 8001ab6:	4b58      	ldr	r3, [pc, #352]	; (8001c18 <MX_GPIO_Init+0x240>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4a57      	ldr	r2, [pc, #348]	; (8001c18 <MX_GPIO_Init+0x240>)
 8001abc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac2:	4b55      	ldr	r3, [pc, #340]	; (8001c18 <MX_GPIO_Init+0x240>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, HW479_1_Pin|HW479_2_Pin|HW479_3_Pin|IN1_DCMOTOR_Pin
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f44f 715c 	mov.w	r1, #880	; 0x370
 8001ad4:	4851      	ldr	r0, [pc, #324]	; (8001c1c <MX_GPIO_Init+0x244>)
 8001ad6:	f002 fa85 	bl	8003fe4 <HAL_GPIO_WritePin>
                          |IN2_DCMOTOR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001ada:	2200      	movs	r2, #0
 8001adc:	f644 41ff 	movw	r1, #19711	; 0x4cff
 8001ae0:	484f      	ldr	r0, [pc, #316]	; (8001c20 <MX_GPIO_Init+0x248>)
 8001ae2:	f002 fa7f 	bl	8003fe4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|LD3_Pin|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, GPIO_PIN_RESET);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aec:	484d      	ldr	r0, [pc, #308]	; (8001c24 <MX_GPIO_Init+0x24c>)
 8001aee:	f002 fa79 	bl	8003fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001af2:	2200      	movs	r2, #0
 8001af4:	2140      	movs	r1, #64	; 0x40
 8001af6:	484c      	ldr	r0, [pc, #304]	; (8001c28 <MX_GPIO_Init+0x250>)
 8001af8:	f002 fa74 	bl	8003fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001afc:	2200      	movs	r2, #0
 8001afe:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8001b02:	484a      	ldr	r0, [pc, #296]	; (8001c2c <MX_GPIO_Init+0x254>)
 8001b04:	f002 fa6e 	bl	8003fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001b08:	2200      	movs	r2, #0
 8001b0a:	21ff      	movs	r1, #255	; 0xff
 8001b0c:	4848      	ldr	r0, [pc, #288]	; (8001c30 <MX_GPIO_Init+0x258>)
 8001b0e:	f002 fa69 	bl	8003fe4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : HW479_1_Pin HW479_2_Pin HW479_3_Pin IN1_DCMOTOR_Pin
                           IN2_DCMOTOR_Pin */
  GPIO_InitStruct.Pin = HW479_1_Pin|HW479_2_Pin|HW479_3_Pin|IN1_DCMOTOR_Pin
 8001b12:	f44f 735c 	mov.w	r3, #880	; 0x370
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
                          |IN2_DCMOTOR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b20:	2300      	movs	r3, #0
 8001b22:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b28:	4619      	mov	r1, r3
 8001b2a:	483c      	ldr	r0, [pc, #240]	; (8001c1c <MX_GPIO_Init+0x244>)
 8001b2c:	f002 f896 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001b30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b36:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b44:	4619      	mov	r1, r3
 8001b46:	4839      	ldr	r0, [pc, #228]	; (8001c2c <MX_GPIO_Init+0x254>)
 8001b48:	f002 f888 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB1 PB2 PB10
                           PB11 LD3_Pin PB3 PB4
                           PB5 PB6 LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001b4c:	f644 43ff 	movw	r3, #19711	; 0x4cff
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|LD3_Pin|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b52:	2301      	movs	r3, #1
 8001b54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b62:	4619      	mov	r1, r3
 8001b64:	482e      	ldr	r0, [pc, #184]	; (8001c20 <MX_GPIO_Init+0x248>)
 8001b66:	f002 f879 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULTRASONIC_TRIGGER_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIGGER_Pin;
 8001b6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b70:	2301      	movs	r3, #1
 8001b72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ULTRASONIC_TRIGGER_GPIO_Port, &GPIO_InitStruct);
 8001b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b80:	4619      	mov	r1, r3
 8001b82:	4828      	ldr	r0, [pc, #160]	; (8001c24 <MX_GPIO_Init+0x24c>)
 8001b84:	f002 f86a 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin|BUTTON0_Pin;
 8001b88:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	481f      	ldr	r0, [pc, #124]	; (8001c1c <MX_GPIO_Init+0x244>)
 8001b9e:	f002 f85d 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001ba2:	2340      	movs	r3, #64	; 0x40
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	481b      	ldr	r0, [pc, #108]	; (8001c28 <MX_GPIO_Init+0x250>)
 8001bba:	f002 f84f 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4815      	ldr	r0, [pc, #84]	; (8001c28 <MX_GPIO_Init+0x250>)
 8001bd2:	f002 f843 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001bd6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be4:	2300      	movs	r3, #0
 8001be6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bec:	4619      	mov	r1, r3
 8001bee:	480f      	ldr	r0, [pc, #60]	; (8001c2c <MX_GPIO_Init+0x254>)
 8001bf0:	f002 f834 	bl	8003c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001bf4:	23ff      	movs	r3, #255	; 0xff
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c00:	2300      	movs	r3, #0
 8001c02:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4809      	ldr	r0, [pc, #36]	; (8001c30 <MX_GPIO_Init+0x258>)
 8001c0c:	f002 f826 	bl	8003c5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c10:	bf00      	nop
 8001c12:	3738      	adds	r7, #56	; 0x38
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	40020400 	.word	0x40020400
 8001c24:	40021400 	.word	0x40021400
 8001c28:	40021800 	.word	0x40021800
 8001c2c:	40020800 	.word	0x40020800
 8001c30:	40020c00 	.word	0x40020c00

08001c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c38:	b672      	cpsid	i
}
 8001c3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c3c:	e7fe      	b.n	8001c3c <Error_Handler+0x8>
	...

08001c40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <HAL_MspInit+0x4c>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	4a0f      	ldr	r2, [pc, #60]	; (8001c8c <HAL_MspInit+0x4c>)
 8001c50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c54:	6453      	str	r3, [r2, #68]	; 0x44
 8001c56:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <HAL_MspInit+0x4c>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	603b      	str	r3, [r7, #0]
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <HAL_MspInit+0x4c>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	4a08      	ldr	r2, [pc, #32]	; (8001c8c <HAL_MspInit+0x4c>)
 8001c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c70:	6413      	str	r3, [r2, #64]	; 0x40
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_MspInit+0x4c>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7a:	603b      	str	r3, [r7, #0]
 8001c7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	40023800 	.word	0x40023800

08001c90 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08e      	sub	sp, #56	; 0x38
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a55      	ldr	r2, [pc, #340]	; (8001e04 <HAL_ETH_MspInit+0x174>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	f040 80a4 	bne.w	8001dfc <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	623b      	str	r3, [r7, #32]
 8001cb8:	4b53      	ldr	r3, [pc, #332]	; (8001e08 <HAL_ETH_MspInit+0x178>)
 8001cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbc:	4a52      	ldr	r2, [pc, #328]	; (8001e08 <HAL_ETH_MspInit+0x178>)
 8001cbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cc2:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc4:	4b50      	ldr	r3, [pc, #320]	; (8001e08 <HAL_ETH_MspInit+0x178>)
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ccc:	623b      	str	r3, [r7, #32]
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61fb      	str	r3, [r7, #28]
 8001cd4:	4b4c      	ldr	r3, [pc, #304]	; (8001e08 <HAL_ETH_MspInit+0x178>)
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd8:	4a4b      	ldr	r2, [pc, #300]	; (8001e08 <HAL_ETH_MspInit+0x178>)
 8001cda:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001cde:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce0:	4b49      	ldr	r3, [pc, #292]	; (8001e08 <HAL_ETH_MspInit+0x178>)
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ce8:	61fb      	str	r3, [r7, #28]
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	2300      	movs	r3, #0
 8001cee:	61bb      	str	r3, [r7, #24]
 8001cf0:	4b45      	ldr	r3, [pc, #276]	; (8001e08 <HAL_ETH_MspInit+0x178>)
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf4:	4a44      	ldr	r2, [pc, #272]	; (8001e08 <HAL_ETH_MspInit+0x178>)
 8001cf6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001cfa:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfc:	4b42      	ldr	r3, [pc, #264]	; (8001e08 <HAL_ETH_MspInit+0x178>)
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d04:	61bb      	str	r3, [r7, #24]
 8001d06:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	4b3e      	ldr	r3, [pc, #248]	; (8001e08 <HAL_ETH_MspInit+0x178>)
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d10:	4a3d      	ldr	r2, [pc, #244]	; (8001e08 <HAL_ETH_MspInit+0x178>)
 8001d12:	f043 0304 	orr.w	r3, r3, #4
 8001d16:	6313      	str	r3, [r2, #48]	; 0x30
 8001d18:	4b3b      	ldr	r3, [pc, #236]	; (8001e08 <HAL_ETH_MspInit+0x178>)
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d24:	2300      	movs	r3, #0
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	4b37      	ldr	r3, [pc, #220]	; (8001e08 <HAL_ETH_MspInit+0x178>)
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2c:	4a36      	ldr	r2, [pc, #216]	; (8001e08 <HAL_ETH_MspInit+0x178>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	6313      	str	r3, [r2, #48]	; 0x30
 8001d34:	4b34      	ldr	r3, [pc, #208]	; (8001e08 <HAL_ETH_MspInit+0x178>)
 8001d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	613b      	str	r3, [r7, #16]
 8001d3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d40:	2300      	movs	r3, #0
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	4b30      	ldr	r3, [pc, #192]	; (8001e08 <HAL_ETH_MspInit+0x178>)
 8001d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d48:	4a2f      	ldr	r2, [pc, #188]	; (8001e08 <HAL_ETH_MspInit+0x178>)
 8001d4a:	f043 0302 	orr.w	r3, r3, #2
 8001d4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d50:	4b2d      	ldr	r3, [pc, #180]	; (8001e08 <HAL_ETH_MspInit+0x178>)
 8001d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60bb      	str	r3, [r7, #8]
 8001d60:	4b29      	ldr	r3, [pc, #164]	; (8001e08 <HAL_ETH_MspInit+0x178>)
 8001d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d64:	4a28      	ldr	r2, [pc, #160]	; (8001e08 <HAL_ETH_MspInit+0x178>)
 8001d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6c:	4b26      	ldr	r3, [pc, #152]	; (8001e08 <HAL_ETH_MspInit+0x178>)
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001d78:	2332      	movs	r3, #50	; 0x32
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d84:	2303      	movs	r3, #3
 8001d86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d88:	230b      	movs	r3, #11
 8001d8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d90:	4619      	mov	r1, r3
 8001d92:	481e      	ldr	r0, [pc, #120]	; (8001e0c <HAL_ETH_MspInit+0x17c>)
 8001d94:	f001 ff62 	bl	8003c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001d98:	2386      	movs	r3, #134	; 0x86
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da4:	2303      	movs	r3, #3
 8001da6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001da8:	230b      	movs	r3, #11
 8001daa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001db0:	4619      	mov	r1, r3
 8001db2:	4817      	ldr	r0, [pc, #92]	; (8001e10 <HAL_ETH_MspInit+0x180>)
 8001db4:	f001 ff52 	bl	8003c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001db8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001dca:	230b      	movs	r3, #11
 8001dcc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	480f      	ldr	r0, [pc, #60]	; (8001e14 <HAL_ETH_MspInit+0x184>)
 8001dd6:	f001 ff41 	bl	8003c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001dda:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de0:	2302      	movs	r3, #2
 8001de2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de8:	2303      	movs	r3, #3
 8001dea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001dec:	230b      	movs	r3, #11
 8001dee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001df4:	4619      	mov	r1, r3
 8001df6:	4808      	ldr	r0, [pc, #32]	; (8001e18 <HAL_ETH_MspInit+0x188>)
 8001df8:	f001 ff30 	bl	8003c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001dfc:	bf00      	nop
 8001dfe:	3738      	adds	r7, #56	; 0x38
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40028000 	.word	0x40028000
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40020800 	.word	0x40020800
 8001e10:	40020000 	.word	0x40020000
 8001e14:	40020400 	.word	0x40020400
 8001e18:	40021800 	.word	0x40021800

08001e1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08a      	sub	sp, #40	; 0x28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e24:	f107 0314 	add.w	r3, r7, #20
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a19      	ldr	r2, [pc, #100]	; (8001ea0 <HAL_I2C_MspInit+0x84>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d12c      	bne.n	8001e98 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	4b18      	ldr	r3, [pc, #96]	; (8001ea4 <HAL_I2C_MspInit+0x88>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a17      	ldr	r2, [pc, #92]	; (8001ea4 <HAL_I2C_MspInit+0x88>)
 8001e48:	f043 0302 	orr.w	r3, r3, #2
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <HAL_I2C_MspInit+0x88>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e60:	2312      	movs	r3, #18
 8001e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e6c:	2304      	movs	r3, #4
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	4619      	mov	r1, r3
 8001e76:	480c      	ldr	r0, [pc, #48]	; (8001ea8 <HAL_I2C_MspInit+0x8c>)
 8001e78:	f001 fef0 	bl	8003c5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <HAL_I2C_MspInit+0x88>)
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	4a07      	ldr	r2, [pc, #28]	; (8001ea4 <HAL_I2C_MspInit+0x88>)
 8001e86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e8a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <HAL_I2C_MspInit+0x88>)
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e98:	bf00      	nop
 8001e9a:	3728      	adds	r7, #40	; 0x28
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40005400 	.word	0x40005400
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40020400 	.word	0x40020400

08001eac <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08a      	sub	sp, #40	; 0x28
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
 8001ec2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a1d      	ldr	r2, [pc, #116]	; (8001f40 <HAL_TIM_IC_MspInit+0x94>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d133      	bne.n	8001f36 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	4b1c      	ldr	r3, [pc, #112]	; (8001f44 <HAL_TIM_IC_MspInit+0x98>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	4a1b      	ldr	r2, [pc, #108]	; (8001f44 <HAL_TIM_IC_MspInit+0x98>)
 8001ed8:	f043 0302 	orr.w	r3, r3, #2
 8001edc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ede:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <HAL_TIM_IC_MspInit+0x98>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	613b      	str	r3, [r7, #16]
 8001ee8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <HAL_TIM_IC_MspInit+0x98>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	4a14      	ldr	r2, [pc, #80]	; (8001f44 <HAL_TIM_IC_MspInit+0x98>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8001efa:	4b12      	ldr	r3, [pc, #72]	; (8001f44 <HAL_TIM_IC_MspInit+0x98>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = ULTRASONIC_TIM3_CH1_Pin;
 8001f06:	2340      	movs	r3, #64	; 0x40
 8001f08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f12:	2300      	movs	r3, #0
 8001f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f16:	2302      	movs	r3, #2
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ULTRASONIC_TIM3_CH1_GPIO_Port, &GPIO_InitStruct);
 8001f1a:	f107 0314 	add.w	r3, r7, #20
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4809      	ldr	r0, [pc, #36]	; (8001f48 <HAL_TIM_IC_MspInit+0x9c>)
 8001f22:	f001 fe9b 	bl	8003c5c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f26:	2200      	movs	r2, #0
 8001f28:	2100      	movs	r1, #0
 8001f2a:	201d      	movs	r0, #29
 8001f2c:	f001 faa5 	bl	800347a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f30:	201d      	movs	r0, #29
 8001f32:	f001 fabe 	bl	80034b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f36:	bf00      	nop
 8001f38:	3728      	adds	r7, #40	; 0x28
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40000400 	.word	0x40000400
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40020000 	.word	0x40020000

08001f4c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a1c      	ldr	r2, [pc, #112]	; (8001fcc <HAL_TIM_PWM_MspInit+0x80>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d116      	bne.n	8001f8c <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	4b1b      	ldr	r3, [pc, #108]	; (8001fd0 <HAL_TIM_PWM_MspInit+0x84>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	4a1a      	ldr	r2, [pc, #104]	; (8001fd0 <HAL_TIM_PWM_MspInit+0x84>)
 8001f68:	f043 0304 	orr.w	r3, r3, #4
 8001f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6e:	4b18      	ldr	r3, [pc, #96]	; (8001fd0 <HAL_TIM_PWM_MspInit+0x84>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	201e      	movs	r0, #30
 8001f80:	f001 fa7b 	bl	800347a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001f84:	201e      	movs	r0, #30
 8001f86:	f001 fa94 	bl	80034b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001f8a:	e01a      	b.n	8001fc2 <HAL_TIM_PWM_MspInit+0x76>
  else if(htim_pwm->Instance==TIM5)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a10      	ldr	r2, [pc, #64]	; (8001fd4 <HAL_TIM_PWM_MspInit+0x88>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d115      	bne.n	8001fc2 <HAL_TIM_PWM_MspInit+0x76>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	4b0d      	ldr	r3, [pc, #52]	; (8001fd0 <HAL_TIM_PWM_MspInit+0x84>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	4a0c      	ldr	r2, [pc, #48]	; (8001fd0 <HAL_TIM_PWM_MspInit+0x84>)
 8001fa0:	f043 0308 	orr.w	r3, r3, #8
 8001fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa6:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <HAL_TIM_PWM_MspInit+0x84>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	2032      	movs	r0, #50	; 0x32
 8001fb8:	f001 fa5f 	bl	800347a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001fbc:	2032      	movs	r0, #50	; 0x32
 8001fbe:	f001 fa78 	bl	80034b2 <HAL_NVIC_EnableIRQ>
}
 8001fc2:	bf00      	nop
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40000800 	.word	0x40000800
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40000c00 	.word	0x40000c00

08001fd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a1c      	ldr	r2, [pc, #112]	; (8002058 <HAL_TIM_Base_MspInit+0x80>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d116      	bne.n	8002018 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	4b1b      	ldr	r3, [pc, #108]	; (800205c <HAL_TIM_Base_MspInit+0x84>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff2:	4a1a      	ldr	r2, [pc, #104]	; (800205c <HAL_TIM_Base_MspInit+0x84>)
 8001ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8001ffa:	4b18      	ldr	r3, [pc, #96]	; (800205c <HAL_TIM_Base_MspInit+0x84>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002006:	2200      	movs	r2, #0
 8002008:	2100      	movs	r1, #0
 800200a:	2019      	movs	r0, #25
 800200c:	f001 fa35 	bl	800347a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002010:	2019      	movs	r0, #25
 8002012:	f001 fa4e 	bl	80034b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002016:	e01a      	b.n	800204e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a10      	ldr	r2, [pc, #64]	; (8002060 <HAL_TIM_Base_MspInit+0x88>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d115      	bne.n	800204e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	4b0d      	ldr	r3, [pc, #52]	; (800205c <HAL_TIM_Base_MspInit+0x84>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	4a0c      	ldr	r2, [pc, #48]	; (800205c <HAL_TIM_Base_MspInit+0x84>)
 800202c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002030:	6453      	str	r3, [r2, #68]	; 0x44
 8002032:	4b0a      	ldr	r3, [pc, #40]	; (800205c <HAL_TIM_Base_MspInit+0x84>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800203e:	2200      	movs	r2, #0
 8002040:	2100      	movs	r1, #0
 8002042:	201a      	movs	r0, #26
 8002044:	f001 fa19 	bl	800347a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002048:	201a      	movs	r0, #26
 800204a:	f001 fa32 	bl	80034b2 <HAL_NVIC_EnableIRQ>
}
 800204e:	bf00      	nop
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40014400 	.word	0x40014400
 800205c:	40023800 	.word	0x40023800
 8002060:	40014800 	.word	0x40014800

08002064 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08a      	sub	sp, #40	; 0x28
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	f107 0314 	add.w	r3, r7, #20
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a24      	ldr	r2, [pc, #144]	; (8002114 <HAL_TIM_MspPostInit+0xb0>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d11f      	bne.n	80020c6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	4b23      	ldr	r3, [pc, #140]	; (8002118 <HAL_TIM_MspPostInit+0xb4>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	4a22      	ldr	r2, [pc, #136]	; (8002118 <HAL_TIM_MspPostInit+0xb4>)
 8002090:	f043 0308 	orr.w	r3, r3, #8
 8002094:	6313      	str	r3, [r2, #48]	; 0x30
 8002096:	4b20      	ldr	r3, [pc, #128]	; (8002118 <HAL_TIM_MspPostInit+0xb4>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	613b      	str	r3, [r7, #16]
 80020a0:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80020a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a8:	2302      	movs	r3, #2
 80020aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b0:	2300      	movs	r3, #0
 80020b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020b4:	2302      	movs	r3, #2
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	4619      	mov	r1, r3
 80020be:	4817      	ldr	r0, [pc, #92]	; (800211c <HAL_TIM_MspPostInit+0xb8>)
 80020c0:	f001 fdcc 	bl	8003c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80020c4:	e022      	b.n	800210c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM5)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a15      	ldr	r2, [pc, #84]	; (8002120 <HAL_TIM_MspPostInit+0xbc>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d11d      	bne.n	800210c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d0:	2300      	movs	r3, #0
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	4b10      	ldr	r3, [pc, #64]	; (8002118 <HAL_TIM_MspPostInit+0xb4>)
 80020d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d8:	4a0f      	ldr	r2, [pc, #60]	; (8002118 <HAL_TIM_MspPostInit+0xb4>)
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	6313      	str	r3, [r2, #48]	; 0x30
 80020e0:	4b0d      	ldr	r3, [pc, #52]	; (8002118 <HAL_TIM_MspPostInit+0xb4>)
 80020e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020ec:	2308      	movs	r3, #8
 80020ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f0:	2302      	movs	r3, #2
 80020f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f8:	2300      	movs	r3, #0
 80020fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80020fc:	2302      	movs	r3, #2
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002100:	f107 0314 	add.w	r3, r7, #20
 8002104:	4619      	mov	r1, r3
 8002106:	4807      	ldr	r0, [pc, #28]	; (8002124 <HAL_TIM_MspPostInit+0xc0>)
 8002108:	f001 fda8 	bl	8003c5c <HAL_GPIO_Init>
}
 800210c:	bf00      	nop
 800210e:	3728      	adds	r7, #40	; 0x28
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40000800 	.word	0x40000800
 8002118:	40023800 	.word	0x40023800
 800211c:	40020c00 	.word	0x40020c00
 8002120:	40000c00 	.word	0x40000c00
 8002124:	40020000 	.word	0x40020000

08002128 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	; 0x28
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002130:	f107 0314 	add.w	r3, r7, #20
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a1d      	ldr	r2, [pc, #116]	; (80021bc <HAL_UART_MspInit+0x94>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d134      	bne.n	80021b4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	4b1c      	ldr	r3, [pc, #112]	; (80021c0 <HAL_UART_MspInit+0x98>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	4a1b      	ldr	r2, [pc, #108]	; (80021c0 <HAL_UART_MspInit+0x98>)
 8002154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002158:	6413      	str	r3, [r2, #64]	; 0x40
 800215a:	4b19      	ldr	r3, [pc, #100]	; (80021c0 <HAL_UART_MspInit+0x98>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <HAL_UART_MspInit+0x98>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	4a14      	ldr	r2, [pc, #80]	; (80021c0 <HAL_UART_MspInit+0x98>)
 8002170:	f043 0308 	orr.w	r3, r3, #8
 8002174:	6313      	str	r3, [r2, #48]	; 0x30
 8002176:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <HAL_UART_MspInit+0x98>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002182:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002188:	2302      	movs	r3, #2
 800218a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002190:	2303      	movs	r3, #3
 8002192:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002194:	2307      	movs	r3, #7
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002198:	f107 0314 	add.w	r3, r7, #20
 800219c:	4619      	mov	r1, r3
 800219e:	4809      	ldr	r0, [pc, #36]	; (80021c4 <HAL_UART_MspInit+0x9c>)
 80021a0:	f001 fd5c 	bl	8003c5c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80021a4:	2200      	movs	r2, #0
 80021a6:	2100      	movs	r1, #0
 80021a8:	2027      	movs	r0, #39	; 0x27
 80021aa:	f001 f966 	bl	800347a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80021ae:	2027      	movs	r0, #39	; 0x27
 80021b0:	f001 f97f 	bl	80034b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80021b4:	bf00      	nop
 80021b6:	3728      	adds	r7, #40	; 0x28
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40004800 	.word	0x40004800
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40020c00 	.word	0x40020c00

080021c8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08a      	sub	sp, #40	; 0x28
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d0:	f107 0314 	add.w	r3, r7, #20
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	60da      	str	r2, [r3, #12]
 80021de:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021e8:	d13f      	bne.n	800226a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	613b      	str	r3, [r7, #16]
 80021ee:	4b21      	ldr	r3, [pc, #132]	; (8002274 <HAL_PCD_MspInit+0xac>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	4a20      	ldr	r2, [pc, #128]	; (8002274 <HAL_PCD_MspInit+0xac>)
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	6313      	str	r3, [r2, #48]	; 0x30
 80021fa:	4b1e      	ldr	r3, [pc, #120]	; (8002274 <HAL_PCD_MspInit+0xac>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	613b      	str	r3, [r7, #16]
 8002204:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002206:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800220a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220c:	2302      	movs	r3, #2
 800220e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002214:	2303      	movs	r3, #3
 8002216:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002218:	230a      	movs	r3, #10
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800221c:	f107 0314 	add.w	r3, r7, #20
 8002220:	4619      	mov	r1, r3
 8002222:	4815      	ldr	r0, [pc, #84]	; (8002278 <HAL_PCD_MspInit+0xb0>)
 8002224:	f001 fd1a 	bl	8003c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002228:	f44f 7300 	mov.w	r3, #512	; 0x200
 800222c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800222e:	2300      	movs	r3, #0
 8002230:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002236:	f107 0314 	add.w	r3, r7, #20
 800223a:	4619      	mov	r1, r3
 800223c:	480e      	ldr	r0, [pc, #56]	; (8002278 <HAL_PCD_MspInit+0xb0>)
 800223e:	f001 fd0d 	bl	8003c5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002242:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <HAL_PCD_MspInit+0xac>)
 8002244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002246:	4a0b      	ldr	r2, [pc, #44]	; (8002274 <HAL_PCD_MspInit+0xac>)
 8002248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800224c:	6353      	str	r3, [r2, #52]	; 0x34
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	4b08      	ldr	r3, [pc, #32]	; (8002274 <HAL_PCD_MspInit+0xac>)
 8002254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002256:	4a07      	ldr	r2, [pc, #28]	; (8002274 <HAL_PCD_MspInit+0xac>)
 8002258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800225c:	6453      	str	r3, [r2, #68]	; 0x44
 800225e:	4b05      	ldr	r3, [pc, #20]	; (8002274 <HAL_PCD_MspInit+0xac>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800226a:	bf00      	nop
 800226c:	3728      	adds	r7, #40	; 0x28
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40023800 	.word	0x40023800
 8002278:	40020000 	.word	0x40020000

0800227c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002280:	e7fe      	b.n	8002280 <NMI_Handler+0x4>

08002282 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002282:	b480      	push	{r7}
 8002284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002286:	e7fe      	b.n	8002286 <HardFault_Handler+0x4>

08002288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800228c:	e7fe      	b.n	800228c <MemManage_Handler+0x4>

0800228e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800228e:	b480      	push	{r7}
 8002290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002292:	e7fe      	b.n	8002292 <BusFault_Handler+0x4>

08002294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002298:	e7fe      	b.n	8002298 <UsageFault_Handler+0x4>

0800229a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022ac:	bf00      	nop
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022b6:	b480      	push	{r7}
 80022b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022c8:	f000 ffb8 	bl	800323c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Handler();
 80022cc:	f7ff f84e 	bl	800136c <HAL_SYSTICK_Handler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80022d0:	bf00      	nop
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80022d8:	4802      	ldr	r0, [pc, #8]	; (80022e4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80022da:	f003 fc69 	bl	8005bb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20000510 	.word	0x20000510

080022e8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80022ec:	4802      	ldr	r0, [pc, #8]	; (80022f8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80022ee:	f003 fc5f 	bl	8005bb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000558 	.word	0x20000558

080022fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002300:	4802      	ldr	r0, [pc, #8]	; (800230c <TIM3_IRQHandler+0x10>)
 8002302:	f003 fc55 	bl	8005bb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20000438 	.word	0x20000438

08002310 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002314:	4802      	ldr	r0, [pc, #8]	; (8002320 <TIM4_IRQHandler+0x10>)
 8002316:	f003 fc4b 	bl	8005bb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000480 	.word	0x20000480

08002324 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002328:	4802      	ldr	r0, [pc, #8]	; (8002334 <USART3_IRQHandler+0x10>)
 800232a:	f004 fc19 	bl	8006b60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	200005a0 	.word	0x200005a0

08002338 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800233c:	4802      	ldr	r0, [pc, #8]	; (8002348 <TIM5_IRQHandler+0x10>)
 800233e:	f003 fc37 	bl	8005bb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	200004c8 	.word	0x200004c8

0800234c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	e00a      	b.n	8002374 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800235e:	f3af 8000 	nop.w
 8002362:	4601      	mov	r1, r0
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	1c5a      	adds	r2, r3, #1
 8002368:	60ba      	str	r2, [r7, #8]
 800236a:	b2ca      	uxtb	r2, r1
 800236c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	3301      	adds	r3, #1
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	429a      	cmp	r2, r3
 800237a:	dbf0      	blt.n	800235e <_read+0x12>
  }

  return len;
 800237c:	687b      	ldr	r3, [r7, #4]
}
 800237e:	4618      	mov	r0, r3
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b086      	sub	sp, #24
 800238a:	af00      	add	r7, sp, #0
 800238c:	60f8      	str	r0, [r7, #12]
 800238e:	60b9      	str	r1, [r7, #8]
 8002390:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002392:	2300      	movs	r3, #0
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	e009      	b.n	80023ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	1c5a      	adds	r2, r3, #1
 800239c:	60ba      	str	r2, [r7, #8]
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff f829 	bl	80013f8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	3301      	adds	r3, #1
 80023aa:	617b      	str	r3, [r7, #20]
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	dbf1      	blt.n	8002398 <_write+0x12>
  }
  return len;
 80023b4:	687b      	ldr	r3, [r7, #4]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <_close>:

int _close(int file)
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023e6:	605a      	str	r2, [r3, #4]
  return 0;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <_isatty>:

int _isatty(int file)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023fe:	2301      	movs	r3, #1
}
 8002400:	4618      	mov	r0, r3
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
	...

08002428 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002430:	4a14      	ldr	r2, [pc, #80]	; (8002484 <_sbrk+0x5c>)
 8002432:	4b15      	ldr	r3, [pc, #84]	; (8002488 <_sbrk+0x60>)
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800243c:	4b13      	ldr	r3, [pc, #76]	; (800248c <_sbrk+0x64>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d102      	bne.n	800244a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002444:	4b11      	ldr	r3, [pc, #68]	; (800248c <_sbrk+0x64>)
 8002446:	4a12      	ldr	r2, [pc, #72]	; (8002490 <_sbrk+0x68>)
 8002448:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800244a:	4b10      	ldr	r3, [pc, #64]	; (800248c <_sbrk+0x64>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4413      	add	r3, r2
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	429a      	cmp	r2, r3
 8002456:	d207      	bcs.n	8002468 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002458:	f006 f82e 	bl	80084b8 <__errno>
 800245c:	4603      	mov	r3, r0
 800245e:	220c      	movs	r2, #12
 8002460:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002462:	f04f 33ff 	mov.w	r3, #4294967295
 8002466:	e009      	b.n	800247c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002468:	4b08      	ldr	r3, [pc, #32]	; (800248c <_sbrk+0x64>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800246e:	4b07      	ldr	r3, [pc, #28]	; (800248c <_sbrk+0x64>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4413      	add	r3, r2
 8002476:	4a05      	ldr	r2, [pc, #20]	; (800248c <_sbrk+0x64>)
 8002478:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800247a:	68fb      	ldr	r3, [r7, #12]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20030000 	.word	0x20030000
 8002488:	00000400 	.word	0x00000400
 800248c:	20000b04 	.word	0x20000b04
 8002490:	20000c98 	.word	0x20000c98

08002494 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002498:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <SystemInit+0x20>)
 800249a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249e:	4a05      	ldr	r2, [pc, #20]	; (80024b4 <SystemInit+0x20>)
 80024a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	e000ed00 	.word	0xe000ed00

080024b8 <washer_main>:
//volatile int wash_duration = 0;
//volatile int rinse_duration = 0;
//volatile int dry_duration = 0;

void washer_main(void)
{
 80024b8:	b598      	push	{r3, r4, r7, lr}
 80024ba:	af00      	add	r7, sp, #0

	// CCR_Value = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_1);

	// BTN0 : START / PAUSE
	if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 80024bc:	2200      	movs	r2, #0
 80024be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024c2:	4889      	ldr	r0, [pc, #548]	; (80026e8 <washer_main+0x230>)
 80024c4:	f000 fc0e 	bl	8002ce4 <get_button>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f040 80ef 	bne.w	80026ae <washer_main+0x1f6>
	{
		if (auto_manual_flag == 0)
 80024d0:	4b86      	ldr	r3, [pc, #536]	; (80026ec <washer_main+0x234>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d16f      	bne.n	80025b8 <washer_main+0x100>
		{
			if (stop_start_flag == 0)
 80024d8:	4b85      	ldr	r3, [pc, #532]	; (80026f0 <washer_main+0x238>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d150      	bne.n	8002582 <washer_main+0xca>
			{
				stop_start_flag = 1;
 80024e0:	4b83      	ldr	r3, [pc, #524]	; (80026f0 <washer_main+0x238>)
 80024e2:	2201      	movs	r2, #1
 80024e4:	601a      	str	r2, [r3, #0]
				ultrasonic_water_level_measurement();
 80024e6:	f000 fda3 	bl	8003030 <ultrasonic_water_level_measurement>

				if (mode_flag == 0)			// basic mode
 80024ea:	4b82      	ldr	r3, [pc, #520]	; (80026f4 <washer_main+0x23c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d109      	bne.n	8002506 <washer_main+0x4e>
				{
					wash_strength = 2;
 80024f2:	4b81      	ldr	r3, [pc, #516]	; (80026f8 <washer_main+0x240>)
 80024f4:	2202      	movs	r2, #2
 80024f6:	601a      	str	r2, [r3, #0]
					rinse_time = 2;
 80024f8:	4b80      	ldr	r3, [pc, #512]	; (80026fc <washer_main+0x244>)
 80024fa:	2202      	movs	r2, #2
 80024fc:	601a      	str	r2, [r3, #0]
					dry_strength = 3;
 80024fe:	4b80      	ldr	r3, [pc, #512]	; (8002700 <washer_main+0x248>)
 8002500:	2203      	movs	r2, #3
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	e024      	b.n	8002550 <washer_main+0x98>
				}
				else if (mode_flag == 1)	// bedding mode
 8002506:	4b7b      	ldr	r3, [pc, #492]	; (80026f4 <washer_main+0x23c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d109      	bne.n	8002522 <washer_main+0x6a>
				{
					wash_strength = 2;
 800250e:	4b7a      	ldr	r3, [pc, #488]	; (80026f8 <washer_main+0x240>)
 8002510:	2202      	movs	r2, #2
 8002512:	601a      	str	r2, [r3, #0]
					rinse_time = 3;
 8002514:	4b79      	ldr	r3, [pc, #484]	; (80026fc <washer_main+0x244>)
 8002516:	2203      	movs	r2, #3
 8002518:	601a      	str	r2, [r3, #0]
					dry_strength = 3;
 800251a:	4b79      	ldr	r3, [pc, #484]	; (8002700 <washer_main+0x248>)
 800251c:	2203      	movs	r2, #3
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	e016      	b.n	8002550 <washer_main+0x98>
				}
				else if (mode_flag == 2)	// wool mode
 8002522:	4b74      	ldr	r3, [pc, #464]	; (80026f4 <washer_main+0x23c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d109      	bne.n	800253e <washer_main+0x86>
				{
					wash_strength = 1;
 800252a:	4b73      	ldr	r3, [pc, #460]	; (80026f8 <washer_main+0x240>)
 800252c:	2201      	movs	r2, #1
 800252e:	601a      	str	r2, [r3, #0]
					rinse_time = 2;
 8002530:	4b72      	ldr	r3, [pc, #456]	; (80026fc <washer_main+0x244>)
 8002532:	2202      	movs	r2, #2
 8002534:	601a      	str	r2, [r3, #0]
					dry_strength = 1;
 8002536:	4b72      	ldr	r3, [pc, #456]	; (8002700 <washer_main+0x248>)
 8002538:	2201      	movs	r2, #1
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	e008      	b.n	8002550 <washer_main+0x98>
				}
				else						// speed mode
				{
					wash_strength = 2;
 800253e:	4b6e      	ldr	r3, [pc, #440]	; (80026f8 <washer_main+0x240>)
 8002540:	2202      	movs	r2, #2
 8002542:	601a      	str	r2, [r3, #0]
					rinse_time = 1;
 8002544:	4b6d      	ldr	r3, [pc, #436]	; (80026fc <washer_main+0x244>)
 8002546:	2201      	movs	r2, #1
 8002548:	601a      	str	r2, [r3, #0]
					dry_strength = 3;
 800254a:	4b6d      	ldr	r3, [pc, #436]	; (8002700 <washer_main+0x248>)
 800254c:	2203      	movs	r2, #3
 800254e:	601a      	str	r2, [r3, #0]
				}

				wash_duration_processing();
 8002550:	f000 fcd2 	bl	8002ef8 <wash_duration_processing>
				rinse_duration_processing();
 8002554:	f000 fcee 	bl	8002f34 <rinse_duration_processing>
				dry_duration_processing();
 8002558:	f000 fd04 	bl	8002f64 <dry_duration_processing>
				run_time_processing();
 800255c:	f000 fd18 	bl	8002f90 <run_time_processing>

				i2c_lcd_washer(wash_strength, rinse_time, dry_strength, mode[mode_flag]);
 8002560:	4b65      	ldr	r3, [pc, #404]	; (80026f8 <washer_main+0x240>)
 8002562:	6818      	ldr	r0, [r3, #0]
 8002564:	4b65      	ldr	r3, [pc, #404]	; (80026fc <washer_main+0x244>)
 8002566:	6819      	ldr	r1, [r3, #0]
 8002568:	4b65      	ldr	r3, [pc, #404]	; (8002700 <washer_main+0x248>)
 800256a:	681c      	ldr	r4, [r3, #0]
 800256c:	4b61      	ldr	r3, [pc, #388]	; (80026f4 <washer_main+0x23c>)
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	4613      	mov	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	4a63      	ldr	r2, [pc, #396]	; (8002704 <washer_main+0x24c>)
 8002578:	4413      	add	r3, r2
 800257a:	4622      	mov	r2, r4
 800257c:	f7fe fd70 	bl	8001060 <i2c_lcd_washer>
 8002580:	e01a      	b.n	80025b8 <washer_main+0x100>

			}
			else if (stop_start_flag == 1)			// PAUSE
 8002582:	4b5b      	ldr	r3, [pc, #364]	; (80026f0 <washer_main+0x238>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d10f      	bne.n	80025aa <washer_main+0xf2>
			{
				stop_start_flag = 2;
 800258a:	4b59      	ldr	r3, [pc, #356]	; (80026f0 <washer_main+0x238>)
 800258c:	2202      	movs	r2, #2
 800258e:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8002590:	2201      	movs	r2, #1
 8002592:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002596:	4854      	ldr	r0, [pc, #336]	; (80026e8 <washer_main+0x230>)
 8002598:	f001 fd24 	bl	8003fe4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 800259c:	2201      	movs	r2, #1
 800259e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025a2:	4851      	ldr	r0, [pc, #324]	; (80026e8 <washer_main+0x230>)
 80025a4:	f001 fd1e 	bl	8003fe4 <HAL_GPIO_WritePin>
 80025a8:	e006      	b.n	80025b8 <washer_main+0x100>
			}
			else if (stop_start_flag == 2)									// RESTART
 80025aa:	4b51      	ldr	r3, [pc, #324]	; (80026f0 <washer_main+0x238>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d102      	bne.n	80025b8 <washer_main+0x100>
			{
				stop_start_flag = 1;
 80025b2:	4b4f      	ldr	r3, [pc, #316]	; (80026f0 <washer_main+0x238>)
 80025b4:	2201      	movs	r2, #1
 80025b6:	601a      	str	r2, [r3, #0]
			}
		}

		if (auto_manual_flag == 1)
 80025b8:	4b4c      	ldr	r3, [pc, #304]	; (80026ec <washer_main+0x234>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d153      	bne.n	8002668 <washer_main+0x1b0>
		{
			if (wash_strength != 0)
 80025c0:	4b4d      	ldr	r3, [pc, #308]	; (80026f8 <washer_main+0x240>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <washer_main+0x118>
			{
				wash_rinse_dry_flag = 0;
 80025c8:	4b4f      	ldr	r3, [pc, #316]	; (8002708 <washer_main+0x250>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	e00e      	b.n	80025ee <washer_main+0x136>
			}
			else if (rinse_time != 0)
 80025d0:	4b4a      	ldr	r3, [pc, #296]	; (80026fc <washer_main+0x244>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <washer_main+0x128>
			{
				wash_rinse_dry_flag = 1;
 80025d8:	4b4b      	ldr	r3, [pc, #300]	; (8002708 <washer_main+0x250>)
 80025da:	2201      	movs	r2, #1
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	e006      	b.n	80025ee <washer_main+0x136>
			}
			else if (dry_strength != 0)
 80025e0:	4b47      	ldr	r3, [pc, #284]	; (8002700 <washer_main+0x248>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d002      	beq.n	80025ee <washer_main+0x136>
			{
				wash_rinse_dry_flag = 2;
 80025e8:	4b47      	ldr	r3, [pc, #284]	; (8002708 <washer_main+0x250>)
 80025ea:	2202      	movs	r2, #2
 80025ec:	601a      	str	r2, [r3, #0]
			}

			if (stop_start_flag == 0)
 80025ee:	4b40      	ldr	r3, [pc, #256]	; (80026f0 <washer_main+0x238>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d11d      	bne.n	8002632 <washer_main+0x17a>
			{
				stop_start_flag = 1;
 80025f6:	4b3e      	ldr	r3, [pc, #248]	; (80026f0 <washer_main+0x238>)
 80025f8:	2201      	movs	r2, #1
 80025fa:	601a      	str	r2, [r3, #0]
				ultrasonic_water_level_measurement();
 80025fc:	f000 fd18 	bl	8003030 <ultrasonic_water_level_measurement>

				wash_duration_processing();
 8002600:	f000 fc7a 	bl	8002ef8 <wash_duration_processing>
				rinse_duration_processing();
 8002604:	f000 fc96 	bl	8002f34 <rinse_duration_processing>
				dry_duration_processing();
 8002608:	f000 fcac 	bl	8002f64 <dry_duration_processing>
				run_time_processing();
 800260c:	f000 fcc0 	bl	8002f90 <run_time_processing>

				i2c_lcd_washer(wash_strength, rinse_time, dry_strength, mode[mode_flag]);
 8002610:	4b39      	ldr	r3, [pc, #228]	; (80026f8 <washer_main+0x240>)
 8002612:	6818      	ldr	r0, [r3, #0]
 8002614:	4b39      	ldr	r3, [pc, #228]	; (80026fc <washer_main+0x244>)
 8002616:	6819      	ldr	r1, [r3, #0]
 8002618:	4b39      	ldr	r3, [pc, #228]	; (8002700 <washer_main+0x248>)
 800261a:	681c      	ldr	r4, [r3, #0]
 800261c:	4b35      	ldr	r3, [pc, #212]	; (80026f4 <washer_main+0x23c>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	4613      	mov	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	4a37      	ldr	r2, [pc, #220]	; (8002704 <washer_main+0x24c>)
 8002628:	4413      	add	r3, r2
 800262a:	4622      	mov	r2, r4
 800262c:	f7fe fd18 	bl	8001060 <i2c_lcd_washer>
 8002630:	e01a      	b.n	8002668 <washer_main+0x1b0>
			}
			else if (stop_start_flag == 1)
 8002632:	4b2f      	ldr	r3, [pc, #188]	; (80026f0 <washer_main+0x238>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d10f      	bne.n	800265a <washer_main+0x1a2>
			{
				stop_start_flag = 2;
 800263a:	4b2d      	ldr	r3, [pc, #180]	; (80026f0 <washer_main+0x238>)
 800263c:	2202      	movs	r2, #2
 800263e:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8002640:	2201      	movs	r2, #1
 8002642:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002646:	4828      	ldr	r0, [pc, #160]	; (80026e8 <washer_main+0x230>)
 8002648:	f001 fccc 	bl	8003fe4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 800264c:	2201      	movs	r2, #1
 800264e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002652:	4825      	ldr	r0, [pc, #148]	; (80026e8 <washer_main+0x230>)
 8002654:	f001 fcc6 	bl	8003fe4 <HAL_GPIO_WritePin>
 8002658:	e006      	b.n	8002668 <washer_main+0x1b0>
			}
			else if (stop_start_flag == 2)
 800265a:	4b25      	ldr	r3, [pc, #148]	; (80026f0 <washer_main+0x238>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2b02      	cmp	r3, #2
 8002660:	d102      	bne.n	8002668 <washer_main+0x1b0>
			{
				stop_start_flag = 1;
 8002662:	4b23      	ldr	r3, [pc, #140]	; (80026f0 <washer_main+0x238>)
 8002664:	2201      	movs	r2, #1
 8002666:	601a      	str	r2, [r3, #0]
			}
		}
		bbig();
 8002668:	f7fe fbd4 	bl	8000e14 <bbig>
		printf("WAS : %d | RIN : %d | DRY : %d\n", wash_strength, rinse_time, dry_strength);
 800266c:	4b22      	ldr	r3, [pc, #136]	; (80026f8 <washer_main+0x240>)
 800266e:	6819      	ldr	r1, [r3, #0]
 8002670:	4b22      	ldr	r3, [pc, #136]	; (80026fc <washer_main+0x244>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	4b22      	ldr	r3, [pc, #136]	; (8002700 <washer_main+0x248>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4824      	ldr	r0, [pc, #144]	; (800270c <washer_main+0x254>)
 800267a:	f005 fd69 	bl	8008150 <iprintf>
		printf("am : %d\n", auto_manual_flag);
 800267e:	4b1b      	ldr	r3, [pc, #108]	; (80026ec <washer_main+0x234>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4619      	mov	r1, r3
 8002684:	4822      	ldr	r0, [pc, #136]	; (8002710 <washer_main+0x258>)
 8002686:	f005 fd63 	bl	8008150 <iprintf>
		printf("ss : %d\n", stop_start_flag);
 800268a:	4b19      	ldr	r3, [pc, #100]	; (80026f0 <washer_main+0x238>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4619      	mov	r1, r3
 8002690:	4820      	ldr	r0, [pc, #128]	; (8002714 <washer_main+0x25c>)
 8002692:	f005 fd5d 	bl	8008150 <iprintf>
		printf("wrd : %d\n", wash_rinse_dry_flag);
 8002696:	4b1c      	ldr	r3, [pc, #112]	; (8002708 <washer_main+0x250>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4619      	mov	r1, r3
 800269c:	481e      	ldr	r0, [pc, #120]	; (8002718 <washer_main+0x260>)
 800269e:	f005 fd57 	bl	8008150 <iprintf>
		printf("mf : %d\n", mode_flag);
 80026a2:	4b14      	ldr	r3, [pc, #80]	; (80026f4 <washer_main+0x23c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4619      	mov	r1, r3
 80026a8:	481c      	ldr	r0, [pc, #112]	; (800271c <washer_main+0x264>)
 80026aa:	f005 fd51 	bl	8008150 <iprintf>
	}

	// BTN1 : WASH
	if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 80026ae:	2201      	movs	r2, #1
 80026b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80026b4:	480c      	ldr	r0, [pc, #48]	; (80026e8 <washer_main+0x230>)
 80026b6:	f000 fb15 	bl	8002ce4 <get_button>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d172      	bne.n	80027a6 <washer_main+0x2ee>
	{
		if (stop_start_flag == 0)
 80026c0:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <washer_main+0x238>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d12b      	bne.n	8002720 <washer_main+0x268>
		{
			auto_manual_flag = 1;
 80026c8:	4b08      	ldr	r3, [pc, #32]	; (80026ec <washer_main+0x234>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	601a      	str	r2, [r3, #0]

			wash_strength++;
 80026ce:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <washer_main+0x240>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	3301      	adds	r3, #1
 80026d4:	4a08      	ldr	r2, [pc, #32]	; (80026f8 <washer_main+0x240>)
 80026d6:	6013      	str	r3, [r2, #0]
			if (wash_strength == 4) wash_strength = 1;
 80026d8:	4b07      	ldr	r3, [pc, #28]	; (80026f8 <washer_main+0x240>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b04      	cmp	r3, #4
 80026de:	d12f      	bne.n	8002740 <washer_main+0x288>
 80026e0:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <washer_main+0x240>)
 80026e2:	2201      	movs	r2, #1
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	e02b      	b.n	8002740 <washer_main+0x288>
 80026e8:	40021000 	.word	0x40021000
 80026ec:	20000b08 	.word	0x20000b08
 80026f0:	20000b0c 	.word	0x20000b0c
 80026f4:	20000b14 	.word	0x20000b14
 80026f8:	20000b1c 	.word	0x20000b1c
 80026fc:	20000b20 	.word	0x20000b20
 8002700:	20000b24 	.word	0x20000b24
 8002704:	20000114 	.word	0x20000114
 8002708:	20000b10 	.word	0x20000b10
 800270c:	0800938c 	.word	0x0800938c
 8002710:	080093ac 	.word	0x080093ac
 8002714:	080093b8 	.word	0x080093b8
 8002718:	080093c4 	.word	0x080093c4
 800271c:	080093d0 	.word	0x080093d0

		}
		else if (stop_start_flag == 2)
 8002720:	4b5f      	ldr	r3, [pc, #380]	; (80028a0 <washer_main+0x3e8>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b02      	cmp	r3, #2
 8002726:	d10b      	bne.n	8002740 <washer_main+0x288>
		{
			wash_strength++;
 8002728:	4b5e      	ldr	r3, [pc, #376]	; (80028a4 <washer_main+0x3ec>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	3301      	adds	r3, #1
 800272e:	4a5d      	ldr	r2, [pc, #372]	; (80028a4 <washer_main+0x3ec>)
 8002730:	6013      	str	r3, [r2, #0]
			if (wash_strength == 4) wash_strength = 1;
 8002732:	4b5c      	ldr	r3, [pc, #368]	; (80028a4 <washer_main+0x3ec>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2b04      	cmp	r3, #4
 8002738:	d102      	bne.n	8002740 <washer_main+0x288>
 800273a:	4b5a      	ldr	r3, [pc, #360]	; (80028a4 <washer_main+0x3ec>)
 800273c:	2201      	movs	r2, #1
 800273e:	601a      	str	r2, [r3, #0]
		}
		i2c_lcd_washer(wash_strength, rinse_time, dry_strength, mode[mode_flag]);
 8002740:	4b58      	ldr	r3, [pc, #352]	; (80028a4 <washer_main+0x3ec>)
 8002742:	6818      	ldr	r0, [r3, #0]
 8002744:	4b58      	ldr	r3, [pc, #352]	; (80028a8 <washer_main+0x3f0>)
 8002746:	6819      	ldr	r1, [r3, #0]
 8002748:	4b58      	ldr	r3, [pc, #352]	; (80028ac <washer_main+0x3f4>)
 800274a:	681c      	ldr	r4, [r3, #0]
 800274c:	4b58      	ldr	r3, [pc, #352]	; (80028b0 <washer_main+0x3f8>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4613      	mov	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	4a57      	ldr	r2, [pc, #348]	; (80028b4 <washer_main+0x3fc>)
 8002758:	4413      	add	r3, r2
 800275a:	4622      	mov	r2, r4
 800275c:	f7fe fc80 	bl	8001060 <i2c_lcd_washer>
		bbig();
 8002760:	f7fe fb58 	bl	8000e14 <bbig>
		printf("WAS : %d | RIN : %d | DRY : %d\n", wash_strength, rinse_time, dry_strength);
 8002764:	4b4f      	ldr	r3, [pc, #316]	; (80028a4 <washer_main+0x3ec>)
 8002766:	6819      	ldr	r1, [r3, #0]
 8002768:	4b4f      	ldr	r3, [pc, #316]	; (80028a8 <washer_main+0x3f0>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	4b4f      	ldr	r3, [pc, #316]	; (80028ac <washer_main+0x3f4>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4851      	ldr	r0, [pc, #324]	; (80028b8 <washer_main+0x400>)
 8002772:	f005 fced 	bl	8008150 <iprintf>
		printf("am : %d\n", auto_manual_flag);
 8002776:	4b51      	ldr	r3, [pc, #324]	; (80028bc <washer_main+0x404>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4619      	mov	r1, r3
 800277c:	4850      	ldr	r0, [pc, #320]	; (80028c0 <washer_main+0x408>)
 800277e:	f005 fce7 	bl	8008150 <iprintf>
		printf("ss : %d\n", stop_start_flag);
 8002782:	4b47      	ldr	r3, [pc, #284]	; (80028a0 <washer_main+0x3e8>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4619      	mov	r1, r3
 8002788:	484e      	ldr	r0, [pc, #312]	; (80028c4 <washer_main+0x40c>)
 800278a:	f005 fce1 	bl	8008150 <iprintf>
		printf("wrd : %d\n", wash_rinse_dry_flag);
 800278e:	4b4e      	ldr	r3, [pc, #312]	; (80028c8 <washer_main+0x410>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4619      	mov	r1, r3
 8002794:	484d      	ldr	r0, [pc, #308]	; (80028cc <washer_main+0x414>)
 8002796:	f005 fcdb 	bl	8008150 <iprintf>
		printf("mf : %d\n", mode_flag);
 800279a:	4b45      	ldr	r3, [pc, #276]	; (80028b0 <washer_main+0x3f8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4619      	mov	r1, r3
 80027a0:	484b      	ldr	r0, [pc, #300]	; (80028d0 <washer_main+0x418>)
 80027a2:	f005 fcd5 	bl	8008150 <iprintf>
	}

	// BTN2 : RINSE
	if (get_button(BUTTON2_GPIO_Port, BUTTON2_Pin, 2) == BUTTON_PRESS)
 80027a6:	2202      	movs	r2, #2
 80027a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027ac:	4849      	ldr	r0, [pc, #292]	; (80028d4 <washer_main+0x41c>)
 80027ae:	f000 fa99 	bl	8002ce4 <get_button>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d156      	bne.n	8002866 <washer_main+0x3ae>
	{
		if (stop_start_flag == 0)
 80027b8:	4b39      	ldr	r3, [pc, #228]	; (80028a0 <washer_main+0x3e8>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10f      	bne.n	80027e0 <washer_main+0x328>
		{
			auto_manual_flag = 1;
 80027c0:	4b3e      	ldr	r3, [pc, #248]	; (80028bc <washer_main+0x404>)
 80027c2:	2201      	movs	r2, #1
 80027c4:	601a      	str	r2, [r3, #0]

			rinse_time++;
 80027c6:	4b38      	ldr	r3, [pc, #224]	; (80028a8 <washer_main+0x3f0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	3301      	adds	r3, #1
 80027cc:	4a36      	ldr	r2, [pc, #216]	; (80028a8 <washer_main+0x3f0>)
 80027ce:	6013      	str	r3, [r2, #0]
			if (rinse_time == 6) rinse_time = 1;
 80027d0:	4b35      	ldr	r3, [pc, #212]	; (80028a8 <washer_main+0x3f0>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2b06      	cmp	r3, #6
 80027d6:	d113      	bne.n	8002800 <washer_main+0x348>
 80027d8:	4b33      	ldr	r3, [pc, #204]	; (80028a8 <washer_main+0x3f0>)
 80027da:	2201      	movs	r2, #1
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	e00f      	b.n	8002800 <washer_main+0x348>
		}
		else if (stop_start_flag == 2)
 80027e0:	4b2f      	ldr	r3, [pc, #188]	; (80028a0 <washer_main+0x3e8>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d10b      	bne.n	8002800 <washer_main+0x348>
		{
			rinse_time++;
 80027e8:	4b2f      	ldr	r3, [pc, #188]	; (80028a8 <washer_main+0x3f0>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	3301      	adds	r3, #1
 80027ee:	4a2e      	ldr	r2, [pc, #184]	; (80028a8 <washer_main+0x3f0>)
 80027f0:	6013      	str	r3, [r2, #0]
			if (rinse_time == 6) rinse_time = 1;
 80027f2:	4b2d      	ldr	r3, [pc, #180]	; (80028a8 <washer_main+0x3f0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2b06      	cmp	r3, #6
 80027f8:	d102      	bne.n	8002800 <washer_main+0x348>
 80027fa:	4b2b      	ldr	r3, [pc, #172]	; (80028a8 <washer_main+0x3f0>)
 80027fc:	2201      	movs	r2, #1
 80027fe:	601a      	str	r2, [r3, #0]
		}
//		rinse_duration_processing();
		i2c_lcd_washer(wash_strength, rinse_time, dry_strength, mode[mode_flag]);
 8002800:	4b28      	ldr	r3, [pc, #160]	; (80028a4 <washer_main+0x3ec>)
 8002802:	6818      	ldr	r0, [r3, #0]
 8002804:	4b28      	ldr	r3, [pc, #160]	; (80028a8 <washer_main+0x3f0>)
 8002806:	6819      	ldr	r1, [r3, #0]
 8002808:	4b28      	ldr	r3, [pc, #160]	; (80028ac <washer_main+0x3f4>)
 800280a:	681c      	ldr	r4, [r3, #0]
 800280c:	4b28      	ldr	r3, [pc, #160]	; (80028b0 <washer_main+0x3f8>)
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	4613      	mov	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4413      	add	r3, r2
 8002816:	4a27      	ldr	r2, [pc, #156]	; (80028b4 <washer_main+0x3fc>)
 8002818:	4413      	add	r3, r2
 800281a:	4622      	mov	r2, r4
 800281c:	f7fe fc20 	bl	8001060 <i2c_lcd_washer>
		bbig();
 8002820:	f7fe faf8 	bl	8000e14 <bbig>
		// run_time += 10;
		printf("WAS : %d | RIN : %d | DRY : %d\n", wash_strength, rinse_time, dry_strength);
 8002824:	4b1f      	ldr	r3, [pc, #124]	; (80028a4 <washer_main+0x3ec>)
 8002826:	6819      	ldr	r1, [r3, #0]
 8002828:	4b1f      	ldr	r3, [pc, #124]	; (80028a8 <washer_main+0x3f0>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	4b1f      	ldr	r3, [pc, #124]	; (80028ac <washer_main+0x3f4>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4821      	ldr	r0, [pc, #132]	; (80028b8 <washer_main+0x400>)
 8002832:	f005 fc8d 	bl	8008150 <iprintf>
		printf("am : %d\n", auto_manual_flag);
 8002836:	4b21      	ldr	r3, [pc, #132]	; (80028bc <washer_main+0x404>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4619      	mov	r1, r3
 800283c:	4820      	ldr	r0, [pc, #128]	; (80028c0 <washer_main+0x408>)
 800283e:	f005 fc87 	bl	8008150 <iprintf>
					printf("ss : %d\n", stop_start_flag);
 8002842:	4b17      	ldr	r3, [pc, #92]	; (80028a0 <washer_main+0x3e8>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4619      	mov	r1, r3
 8002848:	481e      	ldr	r0, [pc, #120]	; (80028c4 <washer_main+0x40c>)
 800284a:	f005 fc81 	bl	8008150 <iprintf>
					printf("wrd : %d\n", wash_rinse_dry_flag);
 800284e:	4b1e      	ldr	r3, [pc, #120]	; (80028c8 <washer_main+0x410>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4619      	mov	r1, r3
 8002854:	481d      	ldr	r0, [pc, #116]	; (80028cc <washer_main+0x414>)
 8002856:	f005 fc7b 	bl	8008150 <iprintf>
					printf("mf : %d\n", mode_flag);
 800285a:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <washer_main+0x3f8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4619      	mov	r1, r3
 8002860:	481b      	ldr	r0, [pc, #108]	; (80028d0 <washer_main+0x418>)
 8002862:	f005 fc75 	bl	8008150 <iprintf>
	}

	// BTN3 : DRY
	if (get_button(BUTTON3_GPIO_Port, BUTTON3_Pin, 3) == BUTTON_PRESS)
 8002866:	2203      	movs	r2, #3
 8002868:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800286c:	4819      	ldr	r0, [pc, #100]	; (80028d4 <washer_main+0x41c>)
 800286e:	f000 fa39 	bl	8002ce4 <get_button>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d172      	bne.n	800295e <washer_main+0x4a6>
	{
		if (stop_start_flag == 0)
 8002878:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <washer_main+0x3e8>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d12b      	bne.n	80028d8 <washer_main+0x420>
		{
			auto_manual_flag = 1;
 8002880:	4b0e      	ldr	r3, [pc, #56]	; (80028bc <washer_main+0x404>)
 8002882:	2201      	movs	r2, #1
 8002884:	601a      	str	r2, [r3, #0]

			dry_strength++;
 8002886:	4b09      	ldr	r3, [pc, #36]	; (80028ac <washer_main+0x3f4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	3301      	adds	r3, #1
 800288c:	4a07      	ldr	r2, [pc, #28]	; (80028ac <washer_main+0x3f4>)
 800288e:	6013      	str	r3, [r2, #0]
			if (dry_strength == 5) dry_strength = 1;
 8002890:	4b06      	ldr	r3, [pc, #24]	; (80028ac <washer_main+0x3f4>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b05      	cmp	r3, #5
 8002896:	d12f      	bne.n	80028f8 <washer_main+0x440>
 8002898:	4b04      	ldr	r3, [pc, #16]	; (80028ac <washer_main+0x3f4>)
 800289a:	2201      	movs	r2, #1
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	e02b      	b.n	80028f8 <washer_main+0x440>
 80028a0:	20000b0c 	.word	0x20000b0c
 80028a4:	20000b1c 	.word	0x20000b1c
 80028a8:	20000b20 	.word	0x20000b20
 80028ac:	20000b24 	.word	0x20000b24
 80028b0:	20000b14 	.word	0x20000b14
 80028b4:	20000114 	.word	0x20000114
 80028b8:	0800938c 	.word	0x0800938c
 80028bc:	20000b08 	.word	0x20000b08
 80028c0:	080093ac 	.word	0x080093ac
 80028c4:	080093b8 	.word	0x080093b8
 80028c8:	20000b10 	.word	0x20000b10
 80028cc:	080093c4 	.word	0x080093c4
 80028d0:	080093d0 	.word	0x080093d0
 80028d4:	40021000 	.word	0x40021000
		}
		else if (stop_start_flag == 2)
 80028d8:	4b99      	ldr	r3, [pc, #612]	; (8002b40 <washer_main+0x688>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d10b      	bne.n	80028f8 <washer_main+0x440>
		{
			dry_strength++;
 80028e0:	4b98      	ldr	r3, [pc, #608]	; (8002b44 <washer_main+0x68c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	3301      	adds	r3, #1
 80028e6:	4a97      	ldr	r2, [pc, #604]	; (8002b44 <washer_main+0x68c>)
 80028e8:	6013      	str	r3, [r2, #0]
			if (dry_strength == 5) dry_strength = 1;
 80028ea:	4b96      	ldr	r3, [pc, #600]	; (8002b44 <washer_main+0x68c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2b05      	cmp	r3, #5
 80028f0:	d102      	bne.n	80028f8 <washer_main+0x440>
 80028f2:	4b94      	ldr	r3, [pc, #592]	; (8002b44 <washer_main+0x68c>)
 80028f4:	2201      	movs	r2, #1
 80028f6:	601a      	str	r2, [r3, #0]
		}
//		dry_duration_processing();
		i2c_lcd_washer(wash_strength, rinse_time, dry_strength, mode[mode_flag]);
 80028f8:	4b93      	ldr	r3, [pc, #588]	; (8002b48 <washer_main+0x690>)
 80028fa:	6818      	ldr	r0, [r3, #0]
 80028fc:	4b93      	ldr	r3, [pc, #588]	; (8002b4c <washer_main+0x694>)
 80028fe:	6819      	ldr	r1, [r3, #0]
 8002900:	4b90      	ldr	r3, [pc, #576]	; (8002b44 <washer_main+0x68c>)
 8002902:	681c      	ldr	r4, [r3, #0]
 8002904:	4b92      	ldr	r3, [pc, #584]	; (8002b50 <washer_main+0x698>)
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	4613      	mov	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	4a91      	ldr	r2, [pc, #580]	; (8002b54 <washer_main+0x69c>)
 8002910:	4413      	add	r3, r2
 8002912:	4622      	mov	r2, r4
 8002914:	f7fe fba4 	bl	8001060 <i2c_lcd_washer>
		bbig();
 8002918:	f7fe fa7c 	bl	8000e14 <bbig>
		printf("WAS : %d | RIN : %d | DRY : %d\n", wash_strength, rinse_time, dry_strength);
 800291c:	4b8a      	ldr	r3, [pc, #552]	; (8002b48 <washer_main+0x690>)
 800291e:	6819      	ldr	r1, [r3, #0]
 8002920:	4b8a      	ldr	r3, [pc, #552]	; (8002b4c <washer_main+0x694>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	4b87      	ldr	r3, [pc, #540]	; (8002b44 <washer_main+0x68c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	488b      	ldr	r0, [pc, #556]	; (8002b58 <washer_main+0x6a0>)
 800292a:	f005 fc11 	bl	8008150 <iprintf>
		printf("am : %d\n", auto_manual_flag);
 800292e:	4b8b      	ldr	r3, [pc, #556]	; (8002b5c <washer_main+0x6a4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4619      	mov	r1, r3
 8002934:	488a      	ldr	r0, [pc, #552]	; (8002b60 <washer_main+0x6a8>)
 8002936:	f005 fc0b 	bl	8008150 <iprintf>
					printf("ss : %d\n", stop_start_flag);
 800293a:	4b81      	ldr	r3, [pc, #516]	; (8002b40 <washer_main+0x688>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4619      	mov	r1, r3
 8002940:	4888      	ldr	r0, [pc, #544]	; (8002b64 <washer_main+0x6ac>)
 8002942:	f005 fc05 	bl	8008150 <iprintf>
					printf("wrd : %d\n", wash_rinse_dry_flag);
 8002946:	4b88      	ldr	r3, [pc, #544]	; (8002b68 <washer_main+0x6b0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4619      	mov	r1, r3
 800294c:	4887      	ldr	r0, [pc, #540]	; (8002b6c <washer_main+0x6b4>)
 800294e:	f005 fbff 	bl	8008150 <iprintf>
					printf("mf : %d\n", mode_flag);
 8002952:	4b7f      	ldr	r3, [pc, #508]	; (8002b50 <washer_main+0x698>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4619      	mov	r1, r3
 8002958:	4885      	ldr	r0, [pc, #532]	; (8002b70 <washer_main+0x6b8>)
 800295a:	f005 fbf9 	bl	8008150 <iprintf>
	}

	// BTN4 : MODE
	if (get_button(USER_Btn_GPIO_Port, USER_Btn_Pin, 4) == BUTTON_PRESS)
 800295e:	2204      	movs	r2, #4
 8002960:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002964:	4883      	ldr	r0, [pc, #524]	; (8002b74 <washer_main+0x6bc>)
 8002966:	f000 f9bd 	bl	8002ce4 <get_button>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d142      	bne.n	80029f6 <washer_main+0x53e>
	{
		mode_flag++;
 8002970:	4b77      	ldr	r3, [pc, #476]	; (8002b50 <washer_main+0x698>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	3301      	adds	r3, #1
 8002976:	4a76      	ldr	r2, [pc, #472]	; (8002b50 <washer_main+0x698>)
 8002978:	6013      	str	r3, [r2, #0]
		mode_flag %= 4;
 800297a:	4b75      	ldr	r3, [pc, #468]	; (8002b50 <washer_main+0x698>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	425a      	negs	r2, r3
 8002980:	f003 0303 	and.w	r3, r3, #3
 8002984:	f002 0203 	and.w	r2, r2, #3
 8002988:	bf58      	it	pl
 800298a:	4253      	negpl	r3, r2
 800298c:	4a70      	ldr	r2, [pc, #448]	; (8002b50 <washer_main+0x698>)
 800298e:	6013      	str	r3, [r2, #0]
		i2c_lcd_washer(wash_strength, rinse_time, dry_strength, mode[mode_flag]);
 8002990:	4b6d      	ldr	r3, [pc, #436]	; (8002b48 <washer_main+0x690>)
 8002992:	6818      	ldr	r0, [r3, #0]
 8002994:	4b6d      	ldr	r3, [pc, #436]	; (8002b4c <washer_main+0x694>)
 8002996:	6819      	ldr	r1, [r3, #0]
 8002998:	4b6a      	ldr	r3, [pc, #424]	; (8002b44 <washer_main+0x68c>)
 800299a:	681c      	ldr	r4, [r3, #0]
 800299c:	4b6c      	ldr	r3, [pc, #432]	; (8002b50 <washer_main+0x698>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	4a6b      	ldr	r2, [pc, #428]	; (8002b54 <washer_main+0x69c>)
 80029a8:	4413      	add	r3, r2
 80029aa:	4622      	mov	r2, r4
 80029ac:	f7fe fb58 	bl	8001060 <i2c_lcd_washer>
		bbig();
 80029b0:	f7fe fa30 	bl	8000e14 <bbig>

		printf("WAS : %d | RIN : %d | DRY : %d\n", wash_strength, rinse_time, dry_strength);
 80029b4:	4b64      	ldr	r3, [pc, #400]	; (8002b48 <washer_main+0x690>)
 80029b6:	6819      	ldr	r1, [r3, #0]
 80029b8:	4b64      	ldr	r3, [pc, #400]	; (8002b4c <washer_main+0x694>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	4b61      	ldr	r3, [pc, #388]	; (8002b44 <washer_main+0x68c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4865      	ldr	r0, [pc, #404]	; (8002b58 <washer_main+0x6a0>)
 80029c2:	f005 fbc5 	bl	8008150 <iprintf>
		printf("am : %d\n", auto_manual_flag);
 80029c6:	4b65      	ldr	r3, [pc, #404]	; (8002b5c <washer_main+0x6a4>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4619      	mov	r1, r3
 80029cc:	4864      	ldr	r0, [pc, #400]	; (8002b60 <washer_main+0x6a8>)
 80029ce:	f005 fbbf 	bl	8008150 <iprintf>
					printf("ss : %d\n", stop_start_flag);
 80029d2:	4b5b      	ldr	r3, [pc, #364]	; (8002b40 <washer_main+0x688>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4619      	mov	r1, r3
 80029d8:	4862      	ldr	r0, [pc, #392]	; (8002b64 <washer_main+0x6ac>)
 80029da:	f005 fbb9 	bl	8008150 <iprintf>
					printf("wrd : %d\n", wash_rinse_dry_flag);
 80029de:	4b62      	ldr	r3, [pc, #392]	; (8002b68 <washer_main+0x6b0>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4619      	mov	r1, r3
 80029e4:	4861      	ldr	r0, [pc, #388]	; (8002b6c <washer_main+0x6b4>)
 80029e6:	f005 fbb3 	bl	8008150 <iprintf>
					printf("mf : %d\n", mode_flag);
 80029ea:	4b59      	ldr	r3, [pc, #356]	; (8002b50 <washer_main+0x698>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4619      	mov	r1, r3
 80029f0:	485f      	ldr	r0, [pc, #380]	; (8002b70 <washer_main+0x6b8>)
 80029f2:	f005 fbad 	bl	8008150 <iprintf>
	}

	// START
	if (stop_start_flag == 1)
 80029f6:	4b52      	ldr	r3, [pc, #328]	; (8002b40 <washer_main+0x688>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d106      	bne.n	8002a0c <washer_main+0x554>
	{
		wash_rinse_dry_motor_start();
 80029fe:	f000 f9a9 	bl	8002d54 <wash_rinse_dry_motor_start>
		led_water_level(water_level);
 8002a02:	4b5d      	ldr	r3, [pc, #372]	; (8002b78 <washer_main+0x6c0>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 fa44 	bl	8002e94 <led_water_level>
	}

	// timer
	if (stop_start_flag == 1)
 8002a0c:	4b4c      	ldr	r3, [pc, #304]	; (8002b40 <washer_main+0x688>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	f040 813a 	bne.w	8002c8a <washer_main+0x7d2>
	{
		if (run_time > 0)
 8002a16:	4b59      	ldr	r3, [pc, #356]	; (8002b7c <washer_main+0x6c4>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f340 80c4 	ble.w	8002ba8 <washer_main+0x6f0>
		{

			if (TIM10_10ms_counter >= 100)
 8002a20:	4b57      	ldr	r3, [pc, #348]	; (8002b80 <washer_main+0x6c8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b63      	cmp	r3, #99	; 0x63
 8002a26:	f340 8130 	ble.w	8002c8a <washer_main+0x7d2>
			{
				run_time--;
 8002a2a:	4b54      	ldr	r3, [pc, #336]	; (8002b7c <washer_main+0x6c4>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	4a52      	ldr	r2, [pc, #328]	; (8002b7c <washer_main+0x6c4>)
 8002a32:	6013      	str	r3, [r2, #0]
				printf("LEFT TIME : %d\n", run_time);
 8002a34:	4b51      	ldr	r3, [pc, #324]	; (8002b7c <washer_main+0x6c4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4852      	ldr	r0, [pc, #328]	; (8002b84 <washer_main+0x6cc>)
 8002a3c:	f005 fb88 	bl	8008150 <iprintf>
				printf("wrd_flag : %d\n", wash_rinse_dry_flag);
 8002a40:	4b49      	ldr	r3, [pc, #292]	; (8002b68 <washer_main+0x6b0>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4619      	mov	r1, r3
 8002a46:	4850      	ldr	r0, [pc, #320]	; (8002b88 <washer_main+0x6d0>)
 8002a48:	f005 fb82 	bl	8008150 <iprintf>
				if (wash_rinse_dry_flag == 0)
 8002a4c:	4b46      	ldr	r3, [pc, #280]	; (8002b68 <washer_main+0x6b0>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d12d      	bne.n	8002ab0 <washer_main+0x5f8>
				{
					wash_duration--;
 8002a54:	4b4d      	ldr	r3, [pc, #308]	; (8002b8c <washer_main+0x6d4>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	4a4c      	ldr	r2, [pc, #304]	; (8002b8c <washer_main+0x6d4>)
 8002a5c:	6013      	str	r3, [r2, #0]
					// FND_print(wash_duration);
					printf("wash duration : %d\n", wash_duration);
 8002a5e:	4b4b      	ldr	r3, [pc, #300]	; (8002b8c <washer_main+0x6d4>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4619      	mov	r1, r3
 8002a64:	484a      	ldr	r0, [pc, #296]	; (8002b90 <washer_main+0x6d8>)
 8002a66:	f005 fb73 	bl	8008150 <iprintf>
					HAL_GPIO_WritePin(HW479_2_GPIO_Port, HW479_2_Pin, 1);	// red
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	2120      	movs	r1, #32
 8002a6e:	4849      	ldr	r0, [pc, #292]	; (8002b94 <washer_main+0x6dc>)
 8002a70:	f001 fab8 	bl	8003fe4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(HW479_1_GPIO_Port, HW479_1_Pin, 0);
 8002a74:	2200      	movs	r2, #0
 8002a76:	2110      	movs	r1, #16
 8002a78:	4846      	ldr	r0, [pc, #280]	; (8002b94 <washer_main+0x6dc>)
 8002a7a:	f001 fab3 	bl	8003fe4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(HW479_3_GPIO_Port, HW479_3_Pin, 0);
 8002a7e:	2200      	movs	r2, #0
 8002a80:	2140      	movs	r1, #64	; 0x40
 8002a82:	4844      	ldr	r0, [pc, #272]	; (8002b94 <washer_main+0x6dc>)
 8002a84:	f001 faae 	bl	8003fe4 <HAL_GPIO_WritePin>

					if (wash_duration <= 0)
 8002a88:	4b40      	ldr	r3, [pc, #256]	; (8002b8c <washer_main+0x6d4>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	dc53      	bgt.n	8002b38 <washer_main+0x680>
					{
						if (rinse_time != 0) wash_rinse_dry_flag = 1;
 8002a90:	4b2e      	ldr	r3, [pc, #184]	; (8002b4c <washer_main+0x694>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d003      	beq.n	8002aa0 <washer_main+0x5e8>
 8002a98:	4b33      	ldr	r3, [pc, #204]	; (8002b68 <washer_main+0x6b0>)
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	e04b      	b.n	8002b38 <washer_main+0x680>
						else if (dry_strength != 0) wash_rinse_dry_flag = 2;
 8002aa0:	4b28      	ldr	r3, [pc, #160]	; (8002b44 <washer_main+0x68c>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d047      	beq.n	8002b38 <washer_main+0x680>
 8002aa8:	4b2f      	ldr	r3, [pc, #188]	; (8002b68 <washer_main+0x6b0>)
 8002aaa:	2202      	movs	r2, #2
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	e043      	b.n	8002b38 <washer_main+0x680>
					}
				}
				else if (wash_rinse_dry_flag == 1)
 8002ab0:	4b2d      	ldr	r3, [pc, #180]	; (8002b68 <washer_main+0x6b0>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d125      	bne.n	8002b04 <washer_main+0x64c>
				{
					rinse_duration--;
 8002ab8:	4b37      	ldr	r3, [pc, #220]	; (8002b98 <washer_main+0x6e0>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	3b01      	subs	r3, #1
 8002abe:	4a36      	ldr	r2, [pc, #216]	; (8002b98 <washer_main+0x6e0>)
 8002ac0:	6013      	str	r3, [r2, #0]
					printf("rinse duration : %d\n", rinse_duration);
 8002ac2:	4b35      	ldr	r3, [pc, #212]	; (8002b98 <washer_main+0x6e0>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4834      	ldr	r0, [pc, #208]	; (8002b9c <washer_main+0x6e4>)
 8002aca:	f005 fb41 	bl	8008150 <iprintf>
					HAL_GPIO_WritePin(HW479_3_GPIO_Port, HW479_3_Pin, 1);	// green
 8002ace:	2201      	movs	r2, #1
 8002ad0:	2140      	movs	r1, #64	; 0x40
 8002ad2:	4830      	ldr	r0, [pc, #192]	; (8002b94 <washer_main+0x6dc>)
 8002ad4:	f001 fa86 	bl	8003fe4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(HW479_1_GPIO_Port, HW479_1_Pin, 0);
 8002ad8:	2200      	movs	r2, #0
 8002ada:	2110      	movs	r1, #16
 8002adc:	482d      	ldr	r0, [pc, #180]	; (8002b94 <washer_main+0x6dc>)
 8002ade:	f001 fa81 	bl	8003fe4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(HW479_2_GPIO_Port, HW479_2_Pin, 0);
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2120      	movs	r1, #32
 8002ae6:	482b      	ldr	r0, [pc, #172]	; (8002b94 <washer_main+0x6dc>)
 8002ae8:	f001 fa7c 	bl	8003fe4 <HAL_GPIO_WritePin>
					if (rinse_duration <= 0)
 8002aec:	4b2a      	ldr	r3, [pc, #168]	; (8002b98 <washer_main+0x6e0>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	dc21      	bgt.n	8002b38 <washer_main+0x680>
					{
						if (dry_strength != 0) wash_rinse_dry_flag = 2;
 8002af4:	4b13      	ldr	r3, [pc, #76]	; (8002b44 <washer_main+0x68c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d01d      	beq.n	8002b38 <washer_main+0x680>
 8002afc:	4b1a      	ldr	r3, [pc, #104]	; (8002b68 <washer_main+0x6b0>)
 8002afe:	2202      	movs	r2, #2
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	e019      	b.n	8002b38 <washer_main+0x680>
					}
				}
				else
				{
					dry_duration--;
 8002b04:	4b26      	ldr	r3, [pc, #152]	; (8002ba0 <washer_main+0x6e8>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	4a25      	ldr	r2, [pc, #148]	; (8002ba0 <washer_main+0x6e8>)
 8002b0c:	6013      	str	r3, [r2, #0]
					printf("dry duration : %d\n", dry_duration);
 8002b0e:	4b24      	ldr	r3, [pc, #144]	; (8002ba0 <washer_main+0x6e8>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4619      	mov	r1, r3
 8002b14:	4823      	ldr	r0, [pc, #140]	; (8002ba4 <washer_main+0x6ec>)
 8002b16:	f005 fb1b 	bl	8008150 <iprintf>
					HAL_GPIO_WritePin(HW479_1_GPIO_Port, HW479_1_Pin, 1);	// blue
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	2110      	movs	r1, #16
 8002b1e:	481d      	ldr	r0, [pc, #116]	; (8002b94 <washer_main+0x6dc>)
 8002b20:	f001 fa60 	bl	8003fe4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(HW479_2_GPIO_Port, HW479_2_Pin, 0);
 8002b24:	2200      	movs	r2, #0
 8002b26:	2120      	movs	r1, #32
 8002b28:	481a      	ldr	r0, [pc, #104]	; (8002b94 <washer_main+0x6dc>)
 8002b2a:	f001 fa5b 	bl	8003fe4 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(HW479_3_GPIO_Port, HW479_3_Pin, 0);
 8002b2e:	2200      	movs	r2, #0
 8002b30:	2140      	movs	r1, #64	; 0x40
 8002b32:	4818      	ldr	r0, [pc, #96]	; (8002b94 <washer_main+0x6dc>)
 8002b34:	f001 fa56 	bl	8003fe4 <HAL_GPIO_WritePin>

				}
				TIM10_10ms_counter = 0;
 8002b38:	4b11      	ldr	r3, [pc, #68]	; (8002b80 <washer_main+0x6c8>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	e0a4      	b.n	8002c8a <washer_main+0x7d2>
 8002b40:	20000b0c 	.word	0x20000b0c
 8002b44:	20000b24 	.word	0x20000b24
 8002b48:	20000b1c 	.word	0x20000b1c
 8002b4c:	20000b20 	.word	0x20000b20
 8002b50:	20000b14 	.word	0x20000b14
 8002b54:	20000114 	.word	0x20000114
 8002b58:	0800938c 	.word	0x0800938c
 8002b5c:	20000b08 	.word	0x20000b08
 8002b60:	080093ac 	.word	0x080093ac
 8002b64:	080093b8 	.word	0x080093b8
 8002b68:	20000b10 	.word	0x20000b10
 8002b6c:	080093c4 	.word	0x080093c4
 8002b70:	080093d0 	.word	0x080093d0
 8002b74:	40020800 	.word	0x40020800
 8002b78:	20000b40 	.word	0x20000b40
 8002b7c:	20000b18 	.word	0x20000b18
 8002b80:	20000af4 	.word	0x20000af4
 8002b84:	080093dc 	.word	0x080093dc
 8002b88:	080093ec 	.word	0x080093ec
 8002b8c:	20000b2c 	.word	0x20000b2c
 8002b90:	080093fc 	.word	0x080093fc
 8002b94:	40021000 	.word	0x40021000
 8002b98:	20000b30 	.word	0x20000b30
 8002b9c:	08009410 	.word	0x08009410
 8002ba0:	20000b34 	.word	0x20000b34
 8002ba4:	08009428 	.word	0x08009428
			}

		}
		else											// time 0 : stop
		{
			stop_start_flag = 0;
 8002ba8:	4b3b      	ldr	r3, [pc, #236]	; (8002c98 <washer_main+0x7e0>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
			auto_manual_flag = 0;
 8002bae:	4b3b      	ldr	r3, [pc, #236]	; (8002c9c <washer_main+0x7e4>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
			wash_rinse_dry_flag = 0;
 8002bb4:	4b3a      	ldr	r3, [pc, #232]	; (8002ca0 <washer_main+0x7e8>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
			mode_flag = 0;
 8002bba:	4b3a      	ldr	r3, [pc, #232]	; (8002ca4 <washer_main+0x7ec>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]

			wash_strength = 0;
 8002bc0:	4b39      	ldr	r3, [pc, #228]	; (8002ca8 <washer_main+0x7f0>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
			rinse_time = 0;
 8002bc6:	4b39      	ldr	r3, [pc, #228]	; (8002cac <washer_main+0x7f4>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
			dry_strength = 0;
 8002bcc:	4b38      	ldr	r3, [pc, #224]	; (8002cb0 <washer_main+0x7f8>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
			water_level = 0;
 8002bd2:	4b38      	ldr	r3, [pc, #224]	; (8002cb4 <washer_main+0x7fc>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]

			wash_duration = 0;
 8002bd8:	4b37      	ldr	r3, [pc, #220]	; (8002cb8 <washer_main+0x800>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
			rinse_duration = 0;
 8002bde:	4b37      	ldr	r3, [pc, #220]	; (8002cbc <washer_main+0x804>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
			dry_duration = 0;
 8002be4:	4b36      	ldr	r3, [pc, #216]	; (8002cc0 <washer_main+0x808>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]

			HAL_GPIO_WritePin(HW479_1_GPIO_Port, HW479_1_Pin, 0);
 8002bea:	2200      	movs	r2, #0
 8002bec:	2110      	movs	r1, #16
 8002bee:	4835      	ldr	r0, [pc, #212]	; (8002cc4 <washer_main+0x80c>)
 8002bf0:	f001 f9f8 	bl	8003fe4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(HW479_2_GPIO_Port, HW479_2_Pin, 0);
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	2120      	movs	r1, #32
 8002bf8:	4832      	ldr	r0, [pc, #200]	; (8002cc4 <washer_main+0x80c>)
 8002bfa:	f001 f9f3 	bl	8003fe4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(HW479_3_GPIO_Port, HW479_3_Pin, 0);
 8002bfe:	2200      	movs	r2, #0
 8002c00:	2140      	movs	r1, #64	; 0x40
 8002c02:	4830      	ldr	r0, [pc, #192]	; (8002cc4 <washer_main+0x80c>)
 8002c04:	f001 f9ee 	bl	8003fe4 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c0e:	482d      	ldr	r0, [pc, #180]	; (8002cc4 <washer_main+0x80c>)
 8002c10:	f001 f9e8 	bl	8003fe4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 8002c14:	2201      	movs	r2, #1
 8002c16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c1a:	482a      	ldr	r0, [pc, #168]	; (8002cc4 <washer_main+0x80c>)
 8002c1c:	f001 f9e2 	bl	8003fe4 <HAL_GPIO_WritePin>
			i2c_lcd_washer(wash_strength, rinse_time, dry_strength, mode[mode_flag]);
 8002c20:	4b21      	ldr	r3, [pc, #132]	; (8002ca8 <washer_main+0x7f0>)
 8002c22:	6818      	ldr	r0, [r3, #0]
 8002c24:	4b21      	ldr	r3, [pc, #132]	; (8002cac <washer_main+0x7f4>)
 8002c26:	6819      	ldr	r1, [r3, #0]
 8002c28:	4b21      	ldr	r3, [pc, #132]	; (8002cb0 <washer_main+0x7f8>)
 8002c2a:	681c      	ldr	r4, [r3, #0]
 8002c2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ca4 <washer_main+0x7ec>)
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	4613      	mov	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	4a24      	ldr	r2, [pc, #144]	; (8002cc8 <washer_main+0x810>)
 8002c38:	4413      	add	r3, r2
 8002c3a:	4622      	mov	r2, r4
 8002c3c:	f7fe fa10 	bl	8001060 <i2c_lcd_washer>
			printf("WAS : %d | RIN : %d | DRY : %d\n", wash_strength, rinse_time, dry_strength);
 8002c40:	4b19      	ldr	r3, [pc, #100]	; (8002ca8 <washer_main+0x7f0>)
 8002c42:	6819      	ldr	r1, [r3, #0]
 8002c44:	4b19      	ldr	r3, [pc, #100]	; (8002cac <washer_main+0x7f4>)
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	4b19      	ldr	r3, [pc, #100]	; (8002cb0 <washer_main+0x7f8>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	481f      	ldr	r0, [pc, #124]	; (8002ccc <washer_main+0x814>)
 8002c4e:	f005 fa7f 	bl	8008150 <iprintf>
			printf("am : %d\n", auto_manual_flag);
 8002c52:	4b12      	ldr	r3, [pc, #72]	; (8002c9c <washer_main+0x7e4>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4619      	mov	r1, r3
 8002c58:	481d      	ldr	r0, [pc, #116]	; (8002cd0 <washer_main+0x818>)
 8002c5a:	f005 fa79 	bl	8008150 <iprintf>
			printf("ss : %d\n", stop_start_flag);
 8002c5e:	4b0e      	ldr	r3, [pc, #56]	; (8002c98 <washer_main+0x7e0>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4619      	mov	r1, r3
 8002c64:	481b      	ldr	r0, [pc, #108]	; (8002cd4 <washer_main+0x81c>)
 8002c66:	f005 fa73 	bl	8008150 <iprintf>
			printf("wrd : %d\n", wash_rinse_dry_flag);
 8002c6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ca0 <washer_main+0x7e8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4819      	ldr	r0, [pc, #100]	; (8002cd8 <washer_main+0x820>)
 8002c72:	f005 fa6d 	bl	8008150 <iprintf>
			printf("mf : %d\n", mode_flag);
 8002c76:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <washer_main+0x7ec>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4817      	ldr	r0, [pc, #92]	; (8002cdc <washer_main+0x824>)
 8002c7e:	f005 fa67 	bl	8008150 <iprintf>
			led_all_off();
 8002c82:	f000 f8fb 	bl	8002e7c <led_all_off>
			complete_sound();
 8002c86:	f7fe f877 	bl	8000d78 <complete_sound>
		}
	}

	FND_print(run_time);
 8002c8a:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <washer_main+0x828>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe f984 	bl	8000f9c <FND_print>


}
 8002c94:	bf00      	nop
 8002c96:	bd98      	pop	{r3, r4, r7, pc}
 8002c98:	20000b0c 	.word	0x20000b0c
 8002c9c:	20000b08 	.word	0x20000b08
 8002ca0:	20000b10 	.word	0x20000b10
 8002ca4:	20000b14 	.word	0x20000b14
 8002ca8:	20000b1c 	.word	0x20000b1c
 8002cac:	20000b20 	.word	0x20000b20
 8002cb0:	20000b24 	.word	0x20000b24
 8002cb4:	20000b40 	.word	0x20000b40
 8002cb8:	20000b2c 	.word	0x20000b2c
 8002cbc:	20000b30 	.word	0x20000b30
 8002cc0:	20000b34 	.word	0x20000b34
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	20000114 	.word	0x20000114
 8002ccc:	0800938c 	.word	0x0800938c
 8002cd0:	080093ac 	.word	0x080093ac
 8002cd4:	080093b8 	.word	0x080093b8
 8002cd8:	080093c4 	.word	0x080093c4
 8002cdc:	080093d0 	.word	0x080093d0
 8002ce0:	20000b18 	.word	0x20000b18

08002ce4 <get_button>:
char button_status[BUTTON_NUMBER] = {BUTTON_RELEASE, BUTTON_RELEASE, BUTTON_RELEASE, BUTTON_RELEASE, BUTTON_RELEASE};

// get_button(gpio, pin, button)
// 눌렀다 떼면 BUTTON_RELEASE를 리턴
int get_button(GPIO_TypeDef *GPIO, uint16_t GPIO_Pin, uint8_t button_number)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	460b      	mov	r3, r1
 8002cee:	807b      	strh	r3, [r7, #2]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	707b      	strb	r3, [r7, #1]
	unsigned char curr_state;
	curr_state = HAL_GPIO_ReadPin(GPIO, GPIO_Pin);
 8002cf4:	887b      	ldrh	r3, [r7, #2]
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f001 f95b 	bl	8003fb4 <HAL_GPIO_ReadPin>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	73fb      	strb	r3, [r7, #15]

	// 버튼이 눌러졌으나 처음 상태 = noise
	if (curr_state == BUTTON_PRESS && button_status[button_number] == BUTTON_RELEASE)
 8002d02:	7bfb      	ldrb	r3, [r7, #15]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10d      	bne.n	8002d24 <get_button+0x40>
 8002d08:	787b      	ldrb	r3, [r7, #1]
 8002d0a:	4a11      	ldr	r2, [pc, #68]	; (8002d50 <get_button+0x6c>)
 8002d0c:	5cd3      	ldrb	r3, [r2, r3]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d108      	bne.n	8002d24 <get_button+0x40>
	{
		HAL_Delay(80);	// noise가 지나가기를 기다림
 8002d12:	2050      	movs	r0, #80	; 0x50
 8002d14:	f000 fab2 	bl	800327c <HAL_Delay>
		button_status[button_number] = BUTTON_PRESS;	// 현재 버튼 상태를 저장
 8002d18:	787b      	ldrb	r3, [r7, #1]
 8002d1a:	4a0d      	ldr	r2, [pc, #52]	; (8002d50 <get_button+0x6c>)
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	54d1      	strb	r1, [r2, r3]
		return BUTTON_RELEASE;	// 버튼이 눌러진 상태지만 아직 noise 상태로 인정
 8002d20:	2301      	movs	r3, #1
 8002d22:	e011      	b.n	8002d48 <get_button+0x64>
	}
	// 이전에 버튼이 눌려진 상태고 지금은 버튼을 뗀 상태이면
	else if (curr_state == BUTTON_RELEASE && button_status[button_number] == BUTTON_PRESS)
 8002d24:	7bfb      	ldrb	r3, [r7, #15]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d10d      	bne.n	8002d46 <get_button+0x62>
 8002d2a:	787b      	ldrb	r3, [r7, #1]
 8002d2c:	4a08      	ldr	r2, [pc, #32]	; (8002d50 <get_button+0x6c>)
 8002d2e:	5cd3      	ldrb	r3, [r2, r3]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d108      	bne.n	8002d46 <get_button+0x62>
	{
		button_status[button_number] = BUTTON_RELEASE;	// button_status table을 초기화
 8002d34:	787b      	ldrb	r3, [r7, #1]
 8002d36:	4a06      	ldr	r2, [pc, #24]	; (8002d50 <get_button+0x6c>)
 8002d38:	2101      	movs	r1, #1
 8002d3a:	54d1      	strb	r1, [r2, r3]
		HAL_Delay(80);
 8002d3c:	2050      	movs	r0, #80	; 0x50
 8002d3e:	f000 fa9d 	bl	800327c <HAL_Delay>
		return BUTTON_PRESS;	// 버튼을 1번 눌렀다 뗀 것으로 인정
 8002d42:	2300      	movs	r3, #0
 8002d44:	e000      	b.n	8002d48 <get_button+0x64>
	}

	return BUTTON_RELEASE;
 8002d46:	2301      	movs	r3, #1
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	20000128 	.word	0x20000128

08002d54 <wash_rinse_dry_motor_start>:
extern volatile int dry_strength;				// 0 : NULL | 1 : duty 40 | 2: duty 60 | 3 : duty 80 | 4 : duty 100

volatile uint16_t CCR_Value = 0;			// fan speed

void wash_rinse_dry_motor_start(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
	if (wash_rinse_dry_flag == 0)		// wash
 8002d58:	4b42      	ldr	r3, [pc, #264]	; (8002e64 <wash_rinse_dry_motor_start+0x110>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d12b      	bne.n	8002db8 <wash_rinse_dry_motor_start+0x64>
	{
		CCR_Value = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_1);
 8002d60:	4b41      	ldr	r3, [pc, #260]	; (8002e68 <wash_rinse_dry_motor_start+0x114>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	4b40      	ldr	r3, [pc, #256]	; (8002e6c <wash_rinse_dry_motor_start+0x118>)
 8002d6a:	801a      	strh	r2, [r3, #0]

		if (wash_strength == 1)
 8002d6c:	4b40      	ldr	r3, [pc, #256]	; (8002e70 <wash_rinse_dry_motor_start+0x11c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d103      	bne.n	8002d7c <wash_rinse_dry_motor_start+0x28>
		{
			CCR_Value = 40;
 8002d74:	4b3d      	ldr	r3, [pc, #244]	; (8002e6c <wash_rinse_dry_motor_start+0x118>)
 8002d76:	2228      	movs	r2, #40	; 0x28
 8002d78:	801a      	strh	r2, [r3, #0]
 8002d7a:	e00a      	b.n	8002d92 <wash_rinse_dry_motor_start+0x3e>
		}
		else if (wash_strength == 2)
 8002d7c:	4b3c      	ldr	r3, [pc, #240]	; (8002e70 <wash_rinse_dry_motor_start+0x11c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d103      	bne.n	8002d8c <wash_rinse_dry_motor_start+0x38>
		{
			CCR_Value = 70;
 8002d84:	4b39      	ldr	r3, [pc, #228]	; (8002e6c <wash_rinse_dry_motor_start+0x118>)
 8002d86:	2246      	movs	r2, #70	; 0x46
 8002d88:	801a      	strh	r2, [r3, #0]
 8002d8a:	e002      	b.n	8002d92 <wash_rinse_dry_motor_start+0x3e>
		}
		else
		{
			CCR_Value = 100;
 8002d8c:	4b37      	ldr	r3, [pc, #220]	; (8002e6c <wash_rinse_dry_motor_start+0x118>)
 8002d8e:	2264      	movs	r2, #100	; 0x64
 8002d90:	801a      	strh	r2, [r3, #0]
		}
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, CCR_Value);	// CCR_Value set
 8002d92:	4b36      	ldr	r3, [pc, #216]	; (8002e6c <wash_rinse_dry_motor_start+0x118>)
 8002d94:	881b      	ldrh	r3, [r3, #0]
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	4b33      	ldr	r3, [pc, #204]	; (8002e68 <wash_rinse_dry_motor_start+0x114>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002da4:	4833      	ldr	r0, [pc, #204]	; (8002e74 <wash_rinse_dry_motor_start+0x120>)
 8002da6:	f001 f91d 	bl	8003fe4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 8002daa:	2200      	movs	r2, #0
 8002dac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002db0:	4830      	ldr	r0, [pc, #192]	; (8002e74 <wash_rinse_dry_motor_start+0x120>)
 8002db2:	f001 f917 	bl	8003fe4 <HAL_GPIO_WritePin>
		}
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, CCR_Value);	// CCR_Value set
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
	}
}
 8002db6:	e052      	b.n	8002e5e <wash_rinse_dry_motor_start+0x10a>
	else if (wash_rinse_dry_flag == 1)		// rinse
 8002db8:	4b2a      	ldr	r3, [pc, #168]	; (8002e64 <wash_rinse_dry_motor_start+0x110>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d11b      	bne.n	8002df8 <wash_rinse_dry_motor_start+0xa4>
		CCR_Value = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_1);
 8002dc0:	4b29      	ldr	r3, [pc, #164]	; (8002e68 <wash_rinse_dry_motor_start+0x114>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	4b28      	ldr	r3, [pc, #160]	; (8002e6c <wash_rinse_dry_motor_start+0x118>)
 8002dca:	801a      	strh	r2, [r3, #0]
		CCR_Value = 70;
 8002dcc:	4b27      	ldr	r3, [pc, #156]	; (8002e6c <wash_rinse_dry_motor_start+0x118>)
 8002dce:	2246      	movs	r2, #70	; 0x46
 8002dd0:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, CCR_Value);	// CCR_Value set
 8002dd2:	4b26      	ldr	r3, [pc, #152]	; (8002e6c <wash_rinse_dry_motor_start+0x118>)
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	4b23      	ldr	r3, [pc, #140]	; (8002e68 <wash_rinse_dry_motor_start+0x114>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 8002dde:	2200      	movs	r2, #0
 8002de0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002de4:	4823      	ldr	r0, [pc, #140]	; (8002e74 <wash_rinse_dry_motor_start+0x120>)
 8002de6:	f001 f8fd 	bl	8003fe4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 8002dea:	2201      	movs	r2, #1
 8002dec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002df0:	4820      	ldr	r0, [pc, #128]	; (8002e74 <wash_rinse_dry_motor_start+0x120>)
 8002df2:	f001 f8f7 	bl	8003fe4 <HAL_GPIO_WritePin>
}
 8002df6:	e032      	b.n	8002e5e <wash_rinse_dry_motor_start+0x10a>
		CCR_Value = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_1);
 8002df8:	4b1b      	ldr	r3, [pc, #108]	; (8002e68 <wash_rinse_dry_motor_start+0x114>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	4b1a      	ldr	r3, [pc, #104]	; (8002e6c <wash_rinse_dry_motor_start+0x118>)
 8002e02:	801a      	strh	r2, [r3, #0]
		if (dry_strength == 1)
 8002e04:	4b1c      	ldr	r3, [pc, #112]	; (8002e78 <wash_rinse_dry_motor_start+0x124>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d103      	bne.n	8002e14 <wash_rinse_dry_motor_start+0xc0>
			CCR_Value = 40;
 8002e0c:	4b17      	ldr	r3, [pc, #92]	; (8002e6c <wash_rinse_dry_motor_start+0x118>)
 8002e0e:	2228      	movs	r2, #40	; 0x28
 8002e10:	801a      	strh	r2, [r3, #0]
 8002e12:	e012      	b.n	8002e3a <wash_rinse_dry_motor_start+0xe6>
		else if (dry_strength == 2)
 8002e14:	4b18      	ldr	r3, [pc, #96]	; (8002e78 <wash_rinse_dry_motor_start+0x124>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d103      	bne.n	8002e24 <wash_rinse_dry_motor_start+0xd0>
			CCR_Value = 60;
 8002e1c:	4b13      	ldr	r3, [pc, #76]	; (8002e6c <wash_rinse_dry_motor_start+0x118>)
 8002e1e:	223c      	movs	r2, #60	; 0x3c
 8002e20:	801a      	strh	r2, [r3, #0]
 8002e22:	e00a      	b.n	8002e3a <wash_rinse_dry_motor_start+0xe6>
		else if (dry_strength == 3)
 8002e24:	4b14      	ldr	r3, [pc, #80]	; (8002e78 <wash_rinse_dry_motor_start+0x124>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2b03      	cmp	r3, #3
 8002e2a:	d103      	bne.n	8002e34 <wash_rinse_dry_motor_start+0xe0>
			CCR_Value = 80;
 8002e2c:	4b0f      	ldr	r3, [pc, #60]	; (8002e6c <wash_rinse_dry_motor_start+0x118>)
 8002e2e:	2250      	movs	r2, #80	; 0x50
 8002e30:	801a      	strh	r2, [r3, #0]
 8002e32:	e002      	b.n	8002e3a <wash_rinse_dry_motor_start+0xe6>
			CCR_Value = 100;
 8002e34:	4b0d      	ldr	r3, [pc, #52]	; (8002e6c <wash_rinse_dry_motor_start+0x118>)
 8002e36:	2264      	movs	r2, #100	; 0x64
 8002e38:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, CCR_Value);	// CCR_Value set
 8002e3a:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <wash_rinse_dry_motor_start+0x118>)
 8002e3c:	881b      	ldrh	r3, [r3, #0]
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <wash_rinse_dry_motor_start+0x114>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8002e46:	2201      	movs	r2, #1
 8002e48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e4c:	4809      	ldr	r0, [pc, #36]	; (8002e74 <wash_rinse_dry_motor_start+0x120>)
 8002e4e:	f001 f8c9 	bl	8003fe4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 8002e52:	2200      	movs	r2, #0
 8002e54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e58:	4806      	ldr	r0, [pc, #24]	; (8002e74 <wash_rinse_dry_motor_start+0x120>)
 8002e5a:	f001 f8c3 	bl	8003fe4 <HAL_GPIO_WritePin>
}
 8002e5e:	bf00      	nop
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20000b10 	.word	0x20000b10
 8002e68:	20000480 	.word	0x20000480
 8002e6c:	20000b28 	.word	0x20000b28
 8002e70:	20000b1c 	.word	0x20000b1c
 8002e74:	40021000 	.word	0x40021000
 8002e78:	20000b24 	.word	0x20000b24

08002e7c <led_all_off>:

extern int get_button(GPIO_TypeDef *GPIO, uint16_t GPIO_Pin, uint8_t button_number);
extern volatile int water_level;

void led_all_off(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, 0xff, 0);
 8002e80:	2200      	movs	r2, #0
 8002e82:	21ff      	movs	r1, #255	; 0xff
 8002e84:	4802      	ldr	r0, [pc, #8]	; (8002e90 <led_all_off+0x14>)
 8002e86:	f001 f8ad 	bl	8003fe4 <HAL_GPIO_WritePin>
}
 8002e8a:	bf00      	nop
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40020c00 	.word	0x40020c00

08002e94 <led_water_level>:

void led_water_level(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
	led_all_off();
 8002e98:	f7ff fff0 	bl	8002e7c <led_all_off>
	switch (water_level)
 8002e9c:	4b14      	ldr	r3, [pc, #80]	; (8002ef0 <led_water_level+0x5c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	2b03      	cmp	r3, #3
 8002ea4:	d822      	bhi.n	8002eec <led_water_level+0x58>
 8002ea6:	a201      	add	r2, pc, #4	; (adr r2, 8002eac <led_water_level+0x18>)
 8002ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eac:	08002ebd 	.word	0x08002ebd
 8002eb0:	08002ec9 	.word	0x08002ec9
 8002eb4:	08002ed5 	.word	0x08002ed5
 8002eb8:	08002ee1 	.word	0x08002ee1
	{
		case 1 :
			HAL_GPIO_WritePin(GPIOD, 0x03, 1);
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	2103      	movs	r1, #3
 8002ec0:	480c      	ldr	r0, [pc, #48]	; (8002ef4 <led_water_level+0x60>)
 8002ec2:	f001 f88f 	bl	8003fe4 <HAL_GPIO_WritePin>
			break;
 8002ec6:	e011      	b.n	8002eec <led_water_level+0x58>
		case 2 :
			HAL_GPIO_WritePin(GPIOD, 0x0f, 1);
 8002ec8:	2201      	movs	r2, #1
 8002eca:	210f      	movs	r1, #15
 8002ecc:	4809      	ldr	r0, [pc, #36]	; (8002ef4 <led_water_level+0x60>)
 8002ece:	f001 f889 	bl	8003fe4 <HAL_GPIO_WritePin>
			break;
 8002ed2:	e00b      	b.n	8002eec <led_water_level+0x58>
		case 3 :
			HAL_GPIO_WritePin(GPIOD, 0x3f, 1);
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	213f      	movs	r1, #63	; 0x3f
 8002ed8:	4806      	ldr	r0, [pc, #24]	; (8002ef4 <led_water_level+0x60>)
 8002eda:	f001 f883 	bl	8003fe4 <HAL_GPIO_WritePin>
			break;
 8002ede:	e005      	b.n	8002eec <led_water_level+0x58>
		case 4 :
			HAL_GPIO_WritePin(GPIOD, 0xff, 1);
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	21ff      	movs	r1, #255	; 0xff
 8002ee4:	4803      	ldr	r0, [pc, #12]	; (8002ef4 <led_water_level+0x60>)
 8002ee6:	f001 f87d 	bl	8003fe4 <HAL_GPIO_WritePin>
			break;
 8002eea:	bf00      	nop
	}
}
 8002eec:	bf00      	nop
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	20000b40 	.word	0x20000b40
 8002ef4:	40020c00 	.word	0x40020c00

08002ef8 <wash_duration_processing>:
volatile int wash_duration = 0;
volatile int rinse_duration = 0;
volatile int dry_duration = 0;

void wash_duration_processing(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
	if (wash_strength == 0) wash_duration = 0;
 8002efc:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <wash_duration_processing+0x30>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d103      	bne.n	8002f0c <wash_duration_processing+0x14>
 8002f04:	4b09      	ldr	r3, [pc, #36]	; (8002f2c <wash_duration_processing+0x34>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
	else wash_duration = water_level * WASH;
}
 8002f0a:	e008      	b.n	8002f1e <wash_duration_processing+0x26>
	else wash_duration = water_level * WASH;
 8002f0c:	4b08      	ldr	r3, [pc, #32]	; (8002f30 <wash_duration_processing+0x38>)
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	4613      	mov	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4b04      	ldr	r3, [pc, #16]	; (8002f2c <wash_duration_processing+0x34>)
 8002f1c:	601a      	str	r2, [r3, #0]
}
 8002f1e:	bf00      	nop
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	20000b1c 	.word	0x20000b1c
 8002f2c:	20000b2c 	.word	0x20000b2c
 8002f30:	20000b40 	.word	0x20000b40

08002f34 <rinse_duration_processing>:

void rinse_duration_processing(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
	rinse_duration = water_level * (rinse_time) * RINSE;
 8002f38:	4b07      	ldr	r3, [pc, #28]	; (8002f58 <rinse_duration_processing+0x24>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a07      	ldr	r2, [pc, #28]	; (8002f5c <rinse_duration_processing+0x28>)
 8002f3e:	6812      	ldr	r2, [r2, #0]
 8002f40:	fb03 f202 	mul.w	r2, r3, r2
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	4a05      	ldr	r2, [pc, #20]	; (8002f60 <rinse_duration_processing+0x2c>)
 8002f4c:	6013      	str	r3, [r2, #0]
}
 8002f4e:	bf00      	nop
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	20000b40 	.word	0x20000b40
 8002f5c:	20000b20 	.word	0x20000b20
 8002f60:	20000b30 	.word	0x20000b30

08002f64 <dry_duration_processing>:

void dry_duration_processing(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
	if (dry_strength == 0) dry_duration = 0;
 8002f68:	4b07      	ldr	r3, [pc, #28]	; (8002f88 <dry_duration_processing+0x24>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d103      	bne.n	8002f78 <dry_duration_processing+0x14>
 8002f70:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <dry_duration_processing+0x28>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
	else dry_duration = DRY;
}
 8002f76:	e002      	b.n	8002f7e <dry_duration_processing+0x1a>
	else dry_duration = DRY;
 8002f78:	4b04      	ldr	r3, [pc, #16]	; (8002f8c <dry_duration_processing+0x28>)
 8002f7a:	220f      	movs	r2, #15
 8002f7c:	601a      	str	r2, [r3, #0]
}
 8002f7e:	bf00      	nop
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	20000b24 	.word	0x20000b24
 8002f8c:	20000b34 	.word	0x20000b34

08002f90 <run_time_processing>:

void run_time_processing(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
	run_time = wash_duration + rinse_duration + dry_duration;
 8002f94:	4b07      	ldr	r3, [pc, #28]	; (8002fb4 <run_time_processing+0x24>)
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	4b07      	ldr	r3, [pc, #28]	; (8002fb8 <run_time_processing+0x28>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	441a      	add	r2, r3
 8002f9e:	4b07      	ldr	r3, [pc, #28]	; (8002fbc <run_time_processing+0x2c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	4a06      	ldr	r2, [pc, #24]	; (8002fc0 <run_time_processing+0x30>)
 8002fa6:	6013      	str	r3, [r2, #0]
}
 8002fa8:	bf00      	nop
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	20000b2c 	.word	0x20000b2c
 8002fb8:	20000b30 	.word	0x20000b30
 8002fbc:	20000b34 	.word	0x20000b34
 8002fc0:	20000b18 	.word	0x20000b18

08002fc4 <HAL_TIM_IC_CaptureCallback>:
// HAL_TIM_IC_CaptureCallback 복붙
// 초음파 센서의 ECHO핀의 상승 엣지와 하강 엣지 발생 시 이곳으로 들어 옴
volatile uint8_t  is_first_capture = 0;	// 0 : 상승 엣지 / 1 : 하강 엣지

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
	if (htim -> Instance == TIM3)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a13      	ldr	r2, [pc, #76]	; (8003020 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d11f      	bne.n	8003016 <HAL_TIM_IC_CaptureCallback+0x52>
	{
		if (is_first_capture == 0)	// 상승 엣지일 때
 8002fd6:	4b13      	ldr	r3, [pc, #76]	; (8003024 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d107      	bne.n	8002ff0 <HAL_TIM_IC_CaptureCallback+0x2c>
		{
			__HAL_TIM_SET_COUNTER(htim, 0);		// clear HW counter
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	625a      	str	r2, [r3, #36]	; 0x24
			is_first_capture = 1;	// 상승 엣지를 만났다는 flag
 8002fe8:	4b0e      	ldr	r3, [pc, #56]	; (8003024 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	701a      	strb	r2, [r3, #0]
			is_first_capture = 0;	// 다음 echo 펄스를 count 하기 위해 변수 초기화
			distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);	// 현재까지 count한 펄스 수를 일거옴
			ic_cpt_finish_flag = 1;	// 초음파 측정 완료
		}
	}
}
 8002fee:	e012      	b.n	8003016 <HAL_TIM_IC_CaptureCallback+0x52>
		else if (is_first_capture == 1)	// 하강 엣지일 때
 8002ff0:	4b0c      	ldr	r3, [pc, #48]	; (8003024 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d10d      	bne.n	8003016 <HAL_TIM_IC_CaptureCallback+0x52>
			is_first_capture = 0;	// 다음 echo 펄스를 count 하기 위해 변수 초기화
 8002ffa:	4b0a      	ldr	r3, [pc, #40]	; (8003024 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	701a      	strb	r2, [r3, #0]
			distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);	// 현재까지 count한 펄스 수를 일거옴
 8003000:	2100      	movs	r1, #0
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f003 f83a 	bl	800607c <HAL_TIM_ReadCapturedValue>
 8003008:	4603      	mov	r3, r0
 800300a:	461a      	mov	r2, r3
 800300c:	4b06      	ldr	r3, [pc, #24]	; (8003028 <HAL_TIM_IC_CaptureCallback+0x64>)
 800300e:	601a      	str	r2, [r3, #0]
			ic_cpt_finish_flag = 1;	// 초음파 측정 완료
 8003010:	4b06      	ldr	r3, [pc, #24]	; (800302c <HAL_TIM_IC_CaptureCallback+0x68>)
 8003012:	2201      	movs	r2, #1
 8003014:	601a      	str	r2, [r3, #0]
}
 8003016:	bf00      	nop
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40000400 	.word	0x40000400
 8003024:	20000b44 	.word	0x20000b44
 8003028:	20000b38 	.word	0x20000b38
 800302c:	20000b3c 	.word	0x20000b3c

08003030 <ultrasonic_water_level_measurement>:

void ultrasonic_water_level_measurement(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0

	int dis;	// 거리를 측정한 펄스 갯수를 저장하는 변수

	TIM10_10ms_ultrasonic = 0;
 8003036:	4b2e      	ldr	r3, [pc, #184]	; (80030f0 <ultrasonic_water_level_measurement+0xc0>)
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]
	while (TIM10_10ms_ultrasonic <= 101)
 800303c:	e02d      	b.n	800309a <ultrasonic_water_level_measurement+0x6a>
	{
		if (TIM10_10ms_ultrasonic >= 100)	// 1초
 800303e:	4b2c      	ldr	r3, [pc, #176]	; (80030f0 <ultrasonic_water_level_measurement+0xc0>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b63      	cmp	r3, #99	; 0x63
 8003044:	dd29      	ble.n	800309a <ultrasonic_water_level_measurement+0x6a>
		{

			make_trigger();
 8003046:	f000 f85f 	bl	8003108 <make_trigger>
			char ultra_buff[20];
			if (ic_cpt_finish_flag)	// 초음파 측정이 완료 되었으면
 800304a:	4b2a      	ldr	r3, [pc, #168]	; (80030f4 <ultrasonic_water_level_measurement+0xc4>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d023      	beq.n	800309a <ultrasonic_water_level_measurement+0x6a>
			{
				ic_cpt_finish_flag = 0;
 8003052:	4b28      	ldr	r3, [pc, #160]	; (80030f4 <ultrasonic_water_level_measurement+0xc4>)
 8003054:	2200      	movs	r2, #0
 8003056:	601a      	str	r2, [r3, #0]
				dis = distance;
 8003058:	4b27      	ldr	r3, [pc, #156]	; (80030f8 <ultrasonic_water_level_measurement+0xc8>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	617b      	str	r3, [r7, #20]
				dis = dis * 0.034 / 2;	// 1us 0.034cm 이동하므로 곱해주고 왕복이므로 편도를 구하려면 나누기 2해야함
 800305e:	6978      	ldr	r0, [r7, #20]
 8003060:	f7fd fa68 	bl	8000534 <__aeabi_i2d>
 8003064:	a320      	add	r3, pc, #128	; (adr r3, 80030e8 <ultrasonic_water_level_measurement+0xb8>)
 8003066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306a:	f7fd facd 	bl	8000608 <__aeabi_dmul>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	4610      	mov	r0, r2
 8003074:	4619      	mov	r1, r3
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800307e:	f7fd fbed 	bl	800085c <__aeabi_ddiv>
 8003082:	4602      	mov	r2, r0
 8003084:	460b      	mov	r3, r1
 8003086:	4610      	mov	r0, r2
 8003088:	4619      	mov	r1, r3
 800308a:	f7fd fccf 	bl	8000a2c <__aeabi_d2iz>
 800308e:	4603      	mov	r3, r0
 8003090:	617b      	str	r3, [r7, #20]
				printf("dis : %dcm\n", dis);
 8003092:	6979      	ldr	r1, [r7, #20]
 8003094:	4819      	ldr	r0, [pc, #100]	; (80030fc <ultrasonic_water_level_measurement+0xcc>)
 8003096:	f005 f85b 	bl	8008150 <iprintf>
	while (TIM10_10ms_ultrasonic <= 101)
 800309a:	4b15      	ldr	r3, [pc, #84]	; (80030f0 <ultrasonic_water_level_measurement+0xc0>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2b65      	cmp	r3, #101	; 0x65
 80030a0:	ddcd      	ble.n	800303e <ultrasonic_water_level_measurement+0xe>
			}
		}
	}

	if (dis > 100)
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	2b64      	cmp	r3, #100	; 0x64
 80030a6:	dd03      	ble.n	80030b0 <ultrasonic_water_level_measurement+0x80>
	{
		water_level = 4;
 80030a8:	4b15      	ldr	r3, [pc, #84]	; (8003100 <ultrasonic_water_level_measurement+0xd0>)
 80030aa:	2204      	movs	r2, #4
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	e010      	b.n	80030d2 <ultrasonic_water_level_measurement+0xa2>
	}
	else if (dis > 50)
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	2b32      	cmp	r3, #50	; 0x32
 80030b4:	dd03      	ble.n	80030be <ultrasonic_water_level_measurement+0x8e>
	{
		water_level = 3;
 80030b6:	4b12      	ldr	r3, [pc, #72]	; (8003100 <ultrasonic_water_level_measurement+0xd0>)
 80030b8:	2203      	movs	r2, #3
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	e009      	b.n	80030d2 <ultrasonic_water_level_measurement+0xa2>
	}
	else if (dis > 20)
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2b14      	cmp	r3, #20
 80030c2:	dd03      	ble.n	80030cc <ultrasonic_water_level_measurement+0x9c>
	{
		water_level = 2;
 80030c4:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <ultrasonic_water_level_measurement+0xd0>)
 80030c6:	2202      	movs	r2, #2
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	e002      	b.n	80030d2 <ultrasonic_water_level_measurement+0xa2>
	}
	else
	{
		water_level = 1;
 80030cc:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <ultrasonic_water_level_measurement+0xd0>)
 80030ce:	2201      	movs	r2, #1
 80030d0:	601a      	str	r2, [r3, #0]
	}
	printf("WATER LEVEL : %d\n", water_level);
 80030d2:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <ultrasonic_water_level_measurement+0xd0>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4619      	mov	r1, r3
 80030d8:	480a      	ldr	r0, [pc, #40]	; (8003104 <ultrasonic_water_level_measurement+0xd4>)
 80030da:	f005 f839 	bl	8008150 <iprintf>
}
 80030de:	bf00      	nop
 80030e0:	3718      	adds	r7, #24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	b020c49c 	.word	0xb020c49c
 80030ec:	3fa16872 	.word	0x3fa16872
 80030f0:	20000af8 	.word	0x20000af8
 80030f4:	20000b3c 	.word	0x20000b3c
 80030f8:	20000b38 	.word	0x20000b38
 80030fc:	0800943c 	.word	0x0800943c
 8003100:	20000b40 	.word	0x20000b40
 8003104:	08009448 	.word	0x08009448

08003108 <make_trigger>:

void make_trigger(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, 0);	// 매개 변수 값들은 main.h에 저장되어 있음
 800310c:	2200      	movs	r2, #0
 800310e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003112:	480b      	ldr	r0, [pc, #44]	; (8003140 <make_trigger+0x38>)
 8003114:	f000 ff66 	bl	8003fe4 <HAL_GPIO_WritePin>
	delay_us(2);
 8003118:	2002      	movs	r0, #2
 800311a:	f7fe f935 	bl	8001388 <delay_us>
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, 1);	// 매개 변수 값들은 main.h에 저장되어 있음
 800311e:	2201      	movs	r2, #1
 8003120:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003124:	4806      	ldr	r0, [pc, #24]	; (8003140 <make_trigger+0x38>)
 8003126:	f000 ff5d 	bl	8003fe4 <HAL_GPIO_WritePin>
	delay_us(10);
 800312a:	200a      	movs	r0, #10
 800312c:	f7fe f92c 	bl	8001388 <delay_us>
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_GPIO_Port, ULTRASONIC_TRIGGER_Pin, 0);	// 매개 변수 값들은 main.h에 저장되어 있음
 8003130:	2200      	movs	r2, #0
 8003132:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003136:	4802      	ldr	r0, [pc, #8]	; (8003140 <make_trigger+0x38>)
 8003138:	f000 ff54 	bl	8003fe4 <HAL_GPIO_WritePin>
}
 800313c:	bf00      	nop
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40021400 	.word	0x40021400

08003144 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003144:	f8df d034 	ldr.w	sp, [pc, #52]	; 800317c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003148:	480d      	ldr	r0, [pc, #52]	; (8003180 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800314a:	490e      	ldr	r1, [pc, #56]	; (8003184 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800314c:	4a0e      	ldr	r2, [pc, #56]	; (8003188 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800314e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003150:	e002      	b.n	8003158 <LoopCopyDataInit>

08003152 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003152:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003154:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003156:	3304      	adds	r3, #4

08003158 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003158:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800315a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800315c:	d3f9      	bcc.n	8003152 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800315e:	4a0b      	ldr	r2, [pc, #44]	; (800318c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003160:	4c0b      	ldr	r4, [pc, #44]	; (8003190 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003162:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003164:	e001      	b.n	800316a <LoopFillZerobss>

08003166 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003166:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003168:	3204      	adds	r2, #4

0800316a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800316a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800316c:	d3fb      	bcc.n	8003166 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800316e:	f7ff f991 	bl	8002494 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003172:	f005 f9a7 	bl	80084c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003176:	f7fe f951 	bl	800141c <main>
  bx  lr    
 800317a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800317c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003184:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 8003188:	080094b8 	.word	0x080094b8
  ldr r2, =_sbss
 800318c:	20000194 	.word	0x20000194
  ldr r4, =_ebss
 8003190:	20000c98 	.word	0x20000c98

08003194 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003194:	e7fe      	b.n	8003194 <ADC_IRQHandler>
	...

08003198 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800319c:	4b0e      	ldr	r3, [pc, #56]	; (80031d8 <HAL_Init+0x40>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a0d      	ldr	r2, [pc, #52]	; (80031d8 <HAL_Init+0x40>)
 80031a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031a8:	4b0b      	ldr	r3, [pc, #44]	; (80031d8 <HAL_Init+0x40>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a0a      	ldr	r2, [pc, #40]	; (80031d8 <HAL_Init+0x40>)
 80031ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031b4:	4b08      	ldr	r3, [pc, #32]	; (80031d8 <HAL_Init+0x40>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a07      	ldr	r2, [pc, #28]	; (80031d8 <HAL_Init+0x40>)
 80031ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031c0:	2003      	movs	r0, #3
 80031c2:	f000 f94f 	bl	8003464 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031c6:	2000      	movs	r0, #0
 80031c8:	f000 f808 	bl	80031dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031cc:	f7fe fd38 	bl	8001c40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40023c00 	.word	0x40023c00

080031dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031e4:	4b12      	ldr	r3, [pc, #72]	; (8003230 <HAL_InitTick+0x54>)
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	4b12      	ldr	r3, [pc, #72]	; (8003234 <HAL_InitTick+0x58>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	4619      	mov	r1, r3
 80031ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80031f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 f967 	bl	80034ce <HAL_SYSTICK_Config>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e00e      	b.n	8003228 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b0f      	cmp	r3, #15
 800320e:	d80a      	bhi.n	8003226 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003210:	2200      	movs	r2, #0
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	f04f 30ff 	mov.w	r0, #4294967295
 8003218:	f000 f92f 	bl	800347a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800321c:	4a06      	ldr	r2, [pc, #24]	; (8003238 <HAL_InitTick+0x5c>)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	e000      	b.n	8003228 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
}
 8003228:	4618      	mov	r0, r3
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	20000110 	.word	0x20000110
 8003234:	20000134 	.word	0x20000134
 8003238:	20000130 	.word	0x20000130

0800323c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003240:	4b06      	ldr	r3, [pc, #24]	; (800325c <HAL_IncTick+0x20>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	461a      	mov	r2, r3
 8003246:	4b06      	ldr	r3, [pc, #24]	; (8003260 <HAL_IncTick+0x24>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4413      	add	r3, r2
 800324c:	4a04      	ldr	r2, [pc, #16]	; (8003260 <HAL_IncTick+0x24>)
 800324e:	6013      	str	r3, [r2, #0]
}
 8003250:	bf00      	nop
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	20000134 	.word	0x20000134
 8003260:	20000b48 	.word	0x20000b48

08003264 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  return uwTick;
 8003268:	4b03      	ldr	r3, [pc, #12]	; (8003278 <HAL_GetTick+0x14>)
 800326a:	681b      	ldr	r3, [r3, #0]
}
 800326c:	4618      	mov	r0, r3
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	20000b48 	.word	0x20000b48

0800327c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003284:	f7ff ffee 	bl	8003264 <HAL_GetTick>
 8003288:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003294:	d005      	beq.n	80032a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003296:	4b0a      	ldr	r3, [pc, #40]	; (80032c0 <HAL_Delay+0x44>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	461a      	mov	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4413      	add	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032a2:	bf00      	nop
 80032a4:	f7ff ffde 	bl	8003264 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d8f7      	bhi.n	80032a4 <HAL_Delay+0x28>
  {
  }
}
 80032b4:	bf00      	nop
 80032b6:	bf00      	nop
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	20000134 	.word	0x20000134

080032c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032d4:	4b0c      	ldr	r3, [pc, #48]	; (8003308 <__NVIC_SetPriorityGrouping+0x44>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032e0:	4013      	ands	r3, r2
 80032e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032f6:	4a04      	ldr	r2, [pc, #16]	; (8003308 <__NVIC_SetPriorityGrouping+0x44>)
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	60d3      	str	r3, [r2, #12]
}
 80032fc:	bf00      	nop
 80032fe:	3714      	adds	r7, #20
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	e000ed00 	.word	0xe000ed00

0800330c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003310:	4b04      	ldr	r3, [pc, #16]	; (8003324 <__NVIC_GetPriorityGrouping+0x18>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	0a1b      	lsrs	r3, r3, #8
 8003316:	f003 0307 	and.w	r3, r3, #7
}
 800331a:	4618      	mov	r0, r3
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	e000ed00 	.word	0xe000ed00

08003328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	4603      	mov	r3, r0
 8003330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003336:	2b00      	cmp	r3, #0
 8003338:	db0b      	blt.n	8003352 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800333a:	79fb      	ldrb	r3, [r7, #7]
 800333c:	f003 021f 	and.w	r2, r3, #31
 8003340:	4907      	ldr	r1, [pc, #28]	; (8003360 <__NVIC_EnableIRQ+0x38>)
 8003342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003346:	095b      	lsrs	r3, r3, #5
 8003348:	2001      	movs	r0, #1
 800334a:	fa00 f202 	lsl.w	r2, r0, r2
 800334e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	e000e100 	.word	0xe000e100

08003364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	6039      	str	r1, [r7, #0]
 800336e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003374:	2b00      	cmp	r3, #0
 8003376:	db0a      	blt.n	800338e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	b2da      	uxtb	r2, r3
 800337c:	490c      	ldr	r1, [pc, #48]	; (80033b0 <__NVIC_SetPriority+0x4c>)
 800337e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003382:	0112      	lsls	r2, r2, #4
 8003384:	b2d2      	uxtb	r2, r2
 8003386:	440b      	add	r3, r1
 8003388:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800338c:	e00a      	b.n	80033a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	b2da      	uxtb	r2, r3
 8003392:	4908      	ldr	r1, [pc, #32]	; (80033b4 <__NVIC_SetPriority+0x50>)
 8003394:	79fb      	ldrb	r3, [r7, #7]
 8003396:	f003 030f 	and.w	r3, r3, #15
 800339a:	3b04      	subs	r3, #4
 800339c:	0112      	lsls	r2, r2, #4
 800339e:	b2d2      	uxtb	r2, r2
 80033a0:	440b      	add	r3, r1
 80033a2:	761a      	strb	r2, [r3, #24]
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	e000e100 	.word	0xe000e100
 80033b4:	e000ed00 	.word	0xe000ed00

080033b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b089      	sub	sp, #36	; 0x24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	f1c3 0307 	rsb	r3, r3, #7
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	bf28      	it	cs
 80033d6:	2304      	movcs	r3, #4
 80033d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	3304      	adds	r3, #4
 80033de:	2b06      	cmp	r3, #6
 80033e0:	d902      	bls.n	80033e8 <NVIC_EncodePriority+0x30>
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	3b03      	subs	r3, #3
 80033e6:	e000      	b.n	80033ea <NVIC_EncodePriority+0x32>
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033ec:	f04f 32ff 	mov.w	r2, #4294967295
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	43da      	mvns	r2, r3
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	401a      	ands	r2, r3
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003400:	f04f 31ff 	mov.w	r1, #4294967295
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	fa01 f303 	lsl.w	r3, r1, r3
 800340a:	43d9      	mvns	r1, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003410:	4313      	orrs	r3, r2
         );
}
 8003412:	4618      	mov	r0, r3
 8003414:	3724      	adds	r7, #36	; 0x24
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
	...

08003420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	3b01      	subs	r3, #1
 800342c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003430:	d301      	bcc.n	8003436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003432:	2301      	movs	r3, #1
 8003434:	e00f      	b.n	8003456 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003436:	4a0a      	ldr	r2, [pc, #40]	; (8003460 <SysTick_Config+0x40>)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3b01      	subs	r3, #1
 800343c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800343e:	210f      	movs	r1, #15
 8003440:	f04f 30ff 	mov.w	r0, #4294967295
 8003444:	f7ff ff8e 	bl	8003364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003448:	4b05      	ldr	r3, [pc, #20]	; (8003460 <SysTick_Config+0x40>)
 800344a:	2200      	movs	r2, #0
 800344c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800344e:	4b04      	ldr	r3, [pc, #16]	; (8003460 <SysTick_Config+0x40>)
 8003450:	2207      	movs	r2, #7
 8003452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	e000e010 	.word	0xe000e010

08003464 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7ff ff29 	bl	80032c4 <__NVIC_SetPriorityGrouping>
}
 8003472:	bf00      	nop
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800347a:	b580      	push	{r7, lr}
 800347c:	b086      	sub	sp, #24
 800347e:	af00      	add	r7, sp, #0
 8003480:	4603      	mov	r3, r0
 8003482:	60b9      	str	r1, [r7, #8]
 8003484:	607a      	str	r2, [r7, #4]
 8003486:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003488:	2300      	movs	r3, #0
 800348a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800348c:	f7ff ff3e 	bl	800330c <__NVIC_GetPriorityGrouping>
 8003490:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	68b9      	ldr	r1, [r7, #8]
 8003496:	6978      	ldr	r0, [r7, #20]
 8003498:	f7ff ff8e 	bl	80033b8 <NVIC_EncodePriority>
 800349c:	4602      	mov	r2, r0
 800349e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034a2:	4611      	mov	r1, r2
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff ff5d 	bl	8003364 <__NVIC_SetPriority>
}
 80034aa:	bf00      	nop
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b082      	sub	sp, #8
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	4603      	mov	r3, r0
 80034ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff ff31 	bl	8003328 <__NVIC_EnableIRQ>
}
 80034c6:	bf00      	nop
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b082      	sub	sp, #8
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7ff ffa2 	bl	8003420 <SysTick_Config>
 80034dc:	4603      	mov	r3, r0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b084      	sub	sp, #16
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80034f4:	f7ff feb6 	bl	8003264 <HAL_GetTick>
 80034f8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d008      	beq.n	8003518 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2280      	movs	r2, #128	; 0x80
 800350a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e052      	b.n	80035be <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0216 	bic.w	r2, r2, #22
 8003526:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	695a      	ldr	r2, [r3, #20]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003536:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	2b00      	cmp	r3, #0
 800353e:	d103      	bne.n	8003548 <HAL_DMA_Abort+0x62>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003544:	2b00      	cmp	r3, #0
 8003546:	d007      	beq.n	8003558 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0208 	bic.w	r2, r2, #8
 8003556:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 0201 	bic.w	r2, r2, #1
 8003566:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003568:	e013      	b.n	8003592 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800356a:	f7ff fe7b 	bl	8003264 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b05      	cmp	r3, #5
 8003576:	d90c      	bls.n	8003592 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2220      	movs	r2, #32
 800357c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2203      	movs	r2, #3
 8003582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e015      	b.n	80035be <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1e4      	bne.n	800356a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a4:	223f      	movs	r2, #63	; 0x3f
 80035a6:	409a      	lsls	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d004      	beq.n	80035e4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2280      	movs	r2, #128	; 0x80
 80035de:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e00c      	b.n	80035fe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2205      	movs	r2, #5
 80035e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 0201 	bic.w	r2, r2, #1
 80035fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
	...

0800360c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e06c      	b.n	80036f8 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003624:	2b00      	cmp	r3, #0
 8003626:	d106      	bne.n	8003636 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2223      	movs	r2, #35	; 0x23
 800362c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f7fe fb2d 	bl	8001c90 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003636:	2300      	movs	r3, #0
 8003638:	60bb      	str	r3, [r7, #8]
 800363a:	4b31      	ldr	r3, [pc, #196]	; (8003700 <HAL_ETH_Init+0xf4>)
 800363c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363e:	4a30      	ldr	r2, [pc, #192]	; (8003700 <HAL_ETH_Init+0xf4>)
 8003640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003644:	6453      	str	r3, [r2, #68]	; 0x44
 8003646:	4b2e      	ldr	r3, [pc, #184]	; (8003700 <HAL_ETH_Init+0xf4>)
 8003648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800364e:	60bb      	str	r3, [r7, #8]
 8003650:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003652:	4b2c      	ldr	r3, [pc, #176]	; (8003704 <HAL_ETH_Init+0xf8>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	4a2b      	ldr	r2, [pc, #172]	; (8003704 <HAL_ETH_Init+0xf8>)
 8003658:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800365c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800365e:	4b29      	ldr	r3, [pc, #164]	; (8003704 <HAL_ETH_Init+0xf8>)
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	4927      	ldr	r1, [pc, #156]	; (8003704 <HAL_ETH_Init+0xf8>)
 8003668:	4313      	orrs	r3, r2
 800366a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800366c:	4b25      	ldr	r3, [pc, #148]	; (8003704 <HAL_ETH_Init+0xf8>)
 800366e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6812      	ldr	r2, [r2, #0]
 800367e:	f043 0301 	orr.w	r3, r3, #1
 8003682:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003686:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003688:	f7ff fdec 	bl	8003264 <HAL_GetTick>
 800368c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800368e:	e011      	b.n	80036b4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003690:	f7ff fde8 	bl	8003264 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800369e:	d909      	bls.n	80036b4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2204      	movs	r2, #4
 80036a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	22e0      	movs	r2, #224	; 0xe0
 80036ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e021      	b.n	80036f8 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1e4      	bne.n	8003690 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f958 	bl	800397c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f9ff 	bl	8003ad0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 fa55 	bl	8003b82 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	461a      	mov	r2, r3
 80036de:	2100      	movs	r1, #0
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 f9bd 	bl	8003a60 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2210      	movs	r2, #16
 80036f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40023800 	.word	0x40023800
 8003704:	40013800 	.word	0x40013800

08003708 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	4b51      	ldr	r3, [pc, #324]	; (8003864 <ETH_SetMACConfig+0x15c>)
 800371e:	4013      	ands	r3, r2
 8003720:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	7c1b      	ldrb	r3, [r3, #16]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d102      	bne.n	8003730 <ETH_SetMACConfig+0x28>
 800372a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800372e:	e000      	b.n	8003732 <ETH_SetMACConfig+0x2a>
 8003730:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	7c5b      	ldrb	r3, [r3, #17]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d102      	bne.n	8003740 <ETH_SetMACConfig+0x38>
 800373a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800373e:	e000      	b.n	8003742 <ETH_SetMACConfig+0x3a>
 8003740:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003742:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003748:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	7fdb      	ldrb	r3, [r3, #31]
 800374e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003750:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003756:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	7f92      	ldrb	r2, [r2, #30]
 800375c:	2a00      	cmp	r2, #0
 800375e:	d102      	bne.n	8003766 <ETH_SetMACConfig+0x5e>
 8003760:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003764:	e000      	b.n	8003768 <ETH_SetMACConfig+0x60>
 8003766:	2200      	movs	r2, #0
                        macconf->Speed |
 8003768:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	7f1b      	ldrb	r3, [r3, #28]
 800376e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003770:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003776:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	791b      	ldrb	r3, [r3, #4]
 800377c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800377e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003786:	2a00      	cmp	r2, #0
 8003788:	d102      	bne.n	8003790 <ETH_SetMACConfig+0x88>
 800378a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800378e:	e000      	b.n	8003792 <ETH_SetMACConfig+0x8a>
 8003790:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003792:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	7bdb      	ldrb	r3, [r3, #15]
 8003798:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800379a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80037a0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037a8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80037aa:	4313      	orrs	r3, r2
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80037c2:	2001      	movs	r0, #1
 80037c4:	f7ff fd5a 	bl	800327c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	f64f 7341 	movw	r3, #65345	; 0xff41
 80037de:	4013      	ands	r3, r2
 80037e0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80037ee:	2a00      	cmp	r2, #0
 80037f0:	d101      	bne.n	80037f6 <ETH_SetMACConfig+0xee>
 80037f2:	2280      	movs	r2, #128	; 0x80
 80037f4:	e000      	b.n	80037f8 <ETH_SetMACConfig+0xf0>
 80037f6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80037f8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80037fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003806:	2a01      	cmp	r2, #1
 8003808:	d101      	bne.n	800380e <ETH_SetMACConfig+0x106>
 800380a:	2208      	movs	r2, #8
 800380c:	e000      	b.n	8003810 <ETH_SetMACConfig+0x108>
 800380e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003810:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003818:	2a01      	cmp	r2, #1
 800381a:	d101      	bne.n	8003820 <ETH_SetMACConfig+0x118>
 800381c:	2204      	movs	r2, #4
 800381e:	e000      	b.n	8003822 <ETH_SetMACConfig+0x11a>
 8003820:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003822:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800382a:	2a01      	cmp	r2, #1
 800382c:	d101      	bne.n	8003832 <ETH_SetMACConfig+0x12a>
 800382e:	2202      	movs	r2, #2
 8003830:	e000      	b.n	8003834 <ETH_SetMACConfig+0x12c>
 8003832:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003834:	4313      	orrs	r3, r2
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	4313      	orrs	r3, r2
 800383a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800384c:	2001      	movs	r0, #1
 800384e:	f7ff fd15 	bl	800327c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	619a      	str	r2, [r3, #24]
}
 800385a:	bf00      	nop
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	ff20810f 	.word	0xff20810f

08003868 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4b3d      	ldr	r3, [pc, #244]	; (8003978 <ETH_SetDMAConfig+0x110>)
 8003882:	4013      	ands	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	7b1b      	ldrb	r3, [r3, #12]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d102      	bne.n	8003894 <ETH_SetDMAConfig+0x2c>
 800388e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003892:	e000      	b.n	8003896 <ETH_SetDMAConfig+0x2e>
 8003894:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	7b5b      	ldrb	r3, [r3, #13]
 800389a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800389c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	7f52      	ldrb	r2, [r2, #29]
 80038a2:	2a00      	cmp	r2, #0
 80038a4:	d102      	bne.n	80038ac <ETH_SetDMAConfig+0x44>
 80038a6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80038aa:	e000      	b.n	80038ae <ETH_SetDMAConfig+0x46>
 80038ac:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80038ae:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	7b9b      	ldrb	r3, [r3, #14]
 80038b4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80038b6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80038bc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	7f1b      	ldrb	r3, [r3, #28]
 80038c2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80038c4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	7f9b      	ldrb	r3, [r3, #30]
 80038ca:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80038cc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80038d2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038da:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80038dc:	4313      	orrs	r3, r2
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038ec:	461a      	mov	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80038fe:	2001      	movs	r0, #1
 8003900:	f7ff fcbc 	bl	800327c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800390c:	461a      	mov	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	791b      	ldrb	r3, [r3, #4]
 8003916:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800391c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003922:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003928:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003930:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003932:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003938:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800393a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003940:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6812      	ldr	r2, [r2, #0]
 8003946:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800394a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800394e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800395c:	2001      	movs	r0, #1
 800395e:	f7ff fc8d 	bl	800327c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800396a:	461a      	mov	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6013      	str	r3, [r2, #0]
}
 8003970:	bf00      	nop
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	f8de3f23 	.word	0xf8de3f23

0800397c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b0a6      	sub	sp, #152	; 0x98
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003984:	2301      	movs	r3, #1
 8003986:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800398a:	2301      	movs	r3, #1
 800398c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003990:	2300      	movs	r3, #0
 8003992:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003994:	2300      	movs	r3, #0
 8003996:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800399a:	2301      	movs	r3, #1
 800399c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80039a0:	2300      	movs	r3, #0
 80039a2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80039a6:	2301      	movs	r3, #1
 80039a8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80039ac:	2300      	movs	r3, #0
 80039ae:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80039b2:	2300      	movs	r3, #0
 80039b4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80039b8:	2300      	movs	r3, #0
 80039ba:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80039bc:	2300      	movs	r3, #0
 80039be:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80039c2:	2300      	movs	r3, #0
 80039c4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80039c6:	2300      	movs	r3, #0
 80039c8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80039cc:	2300      	movs	r3, #0
 80039ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80039d2:	2300      	movs	r3, #0
 80039d4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80039d8:	2300      	movs	r3, #0
 80039da:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80039de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80039e2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80039e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80039e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80039ea:	2300      	movs	r3, #0
 80039ec:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80039f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80039f4:	4619      	mov	r1, r3
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7ff fe86 	bl	8003708 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80039fc:	2301      	movs	r3, #1
 80039fe:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003a00:	2301      	movs	r3, #1
 8003a02:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003a04:	2301      	movs	r3, #1
 8003a06:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003a12:	2300      	movs	r3, #0
 8003a14:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003a22:	2301      	movs	r3, #1
 8003a24:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003a2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a30:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003a32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a36:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003a38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a3c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003a4c:	f107 0308 	add.w	r3, r7, #8
 8003a50:	4619      	mov	r1, r3
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7ff ff08 	bl	8003868 <ETH_SetDMAConfig>
}
 8003a58:	bf00      	nop
 8003a5a:	3798      	adds	r7, #152	; 0x98
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b087      	sub	sp, #28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3305      	adds	r3, #5
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	021b      	lsls	r3, r3, #8
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	3204      	adds	r2, #4
 8003a78:	7812      	ldrb	r2, [r2, #0]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	4b11      	ldr	r3, [pc, #68]	; (8003ac8 <ETH_MACAddressConfig+0x68>)
 8003a82:	4413      	add	r3, r2
 8003a84:	461a      	mov	r2, r3
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	3303      	adds	r3, #3
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	061a      	lsls	r2, r3, #24
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	3302      	adds	r3, #2
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	041b      	lsls	r3, r3, #16
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	021b      	lsls	r3, r3, #8
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	7812      	ldrb	r2, [r2, #0]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	4b06      	ldr	r3, [pc, #24]	; (8003acc <ETH_MACAddressConfig+0x6c>)
 8003ab2:	4413      	add	r3, r2
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	6013      	str	r3, [r2, #0]
}
 8003aba:	bf00      	nop
 8003abc:	371c      	adds	r7, #28
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	40028040 	.word	0x40028040
 8003acc:	40028044 	.word	0x40028044

08003ad0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003ad8:	2300      	movs	r3, #0
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	e03e      	b.n	8003b5c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68d9      	ldr	r1, [r3, #12]
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	440b      	add	r3, r1
 8003aee:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	2200      	movs	r2, #0
 8003af4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	2200      	movs	r2, #0
 8003afa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2200      	movs	r2, #0
 8003b00:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2200      	movs	r2, #0
 8003b06:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003b08:	68b9      	ldr	r1, [r7, #8]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	3206      	adds	r2, #6
 8003b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d80c      	bhi.n	8003b40 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68d9      	ldr	r1, [r3, #12]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	1c5a      	adds	r2, r3, #1
 8003b2e:	4613      	mov	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	4413      	add	r3, r2
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	440b      	add	r3, r1
 8003b38:	461a      	mov	r2, r3
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	60da      	str	r2, [r3, #12]
 8003b3e:	e004      	b.n	8003b4a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	461a      	mov	r2, r3
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2b03      	cmp	r3, #3
 8003b60:	d9bd      	bls.n	8003ade <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68da      	ldr	r2, [r3, #12]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b74:	611a      	str	r2, [r3, #16]
}
 8003b76:	bf00      	nop
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b085      	sub	sp, #20
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	e046      	b.n	8003c1e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6919      	ldr	r1, [r3, #16]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	4613      	mov	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	4413      	add	r3, r2
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	440b      	add	r3, r1
 8003ba0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2200      	movs	r2, #0
 8003bac:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003bcc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003bd4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003be2:	68b9      	ldr	r1, [r7, #8]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	3212      	adds	r2, #18
 8003bea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d80c      	bhi.n	8003c0e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6919      	ldr	r1, [r3, #16]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	440b      	add	r3, r1
 8003c06:	461a      	mov	r2, r3
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	60da      	str	r2, [r3, #12]
 8003c0c:	e004      	b.n	8003c18 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	461a      	mov	r2, r3
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2b03      	cmp	r3, #3
 8003c22:	d9b5      	bls.n	8003b90 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691a      	ldr	r2, [r3, #16]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c4e:	60da      	str	r2, [r3, #12]
}
 8003c50:	bf00      	nop
 8003c52:	3714      	adds	r7, #20
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b089      	sub	sp, #36	; 0x24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c66:	2300      	movs	r3, #0
 8003c68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c72:	2300      	movs	r3, #0
 8003c74:	61fb      	str	r3, [r7, #28]
 8003c76:	e177      	b.n	8003f68 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c78:	2201      	movs	r2, #1
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	f040 8166 	bne.w	8003f62 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f003 0303 	and.w	r3, r3, #3
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d005      	beq.n	8003cae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d130      	bne.n	8003d10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	2203      	movs	r2, #3
 8003cba:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbe:	43db      	mvns	r3, r3
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	68da      	ldr	r2, [r3, #12]
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	43db      	mvns	r3, r3
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	091b      	lsrs	r3, r3, #4
 8003cfa:	f003 0201 	and.w	r2, r3, #1
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f003 0303 	and.w	r3, r3, #3
 8003d18:	2b03      	cmp	r3, #3
 8003d1a:	d017      	beq.n	8003d4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	2203      	movs	r2, #3
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	4013      	ands	r3, r2
 8003d32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f003 0303 	and.w	r3, r3, #3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d123      	bne.n	8003da0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	08da      	lsrs	r2, r3, #3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3208      	adds	r2, #8
 8003d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	f003 0307 	and.w	r3, r3, #7
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	220f      	movs	r2, #15
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	43db      	mvns	r3, r3
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	f003 0307 	and.w	r3, r3, #7
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	08da      	lsrs	r2, r3, #3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	3208      	adds	r2, #8
 8003d9a:	69b9      	ldr	r1, [r7, #24]
 8003d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	2203      	movs	r2, #3
 8003dac:	fa02 f303 	lsl.w	r3, r2, r3
 8003db0:	43db      	mvns	r3, r3
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	4013      	ands	r3, r2
 8003db6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f003 0203 	and.w	r2, r3, #3
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 80c0 	beq.w	8003f62 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003de2:	2300      	movs	r3, #0
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	4b66      	ldr	r3, [pc, #408]	; (8003f80 <HAL_GPIO_Init+0x324>)
 8003de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dea:	4a65      	ldr	r2, [pc, #404]	; (8003f80 <HAL_GPIO_Init+0x324>)
 8003dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003df0:	6453      	str	r3, [r2, #68]	; 0x44
 8003df2:	4b63      	ldr	r3, [pc, #396]	; (8003f80 <HAL_GPIO_Init+0x324>)
 8003df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dfe:	4a61      	ldr	r2, [pc, #388]	; (8003f84 <HAL_GPIO_Init+0x328>)
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	089b      	lsrs	r3, r3, #2
 8003e04:	3302      	adds	r3, #2
 8003e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	f003 0303 	and.w	r3, r3, #3
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	220f      	movs	r2, #15
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	43db      	mvns	r3, r3
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a58      	ldr	r2, [pc, #352]	; (8003f88 <HAL_GPIO_Init+0x32c>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d037      	beq.n	8003e9a <HAL_GPIO_Init+0x23e>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a57      	ldr	r2, [pc, #348]	; (8003f8c <HAL_GPIO_Init+0x330>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d031      	beq.n	8003e96 <HAL_GPIO_Init+0x23a>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a56      	ldr	r2, [pc, #344]	; (8003f90 <HAL_GPIO_Init+0x334>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d02b      	beq.n	8003e92 <HAL_GPIO_Init+0x236>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a55      	ldr	r2, [pc, #340]	; (8003f94 <HAL_GPIO_Init+0x338>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d025      	beq.n	8003e8e <HAL_GPIO_Init+0x232>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a54      	ldr	r2, [pc, #336]	; (8003f98 <HAL_GPIO_Init+0x33c>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d01f      	beq.n	8003e8a <HAL_GPIO_Init+0x22e>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a53      	ldr	r2, [pc, #332]	; (8003f9c <HAL_GPIO_Init+0x340>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d019      	beq.n	8003e86 <HAL_GPIO_Init+0x22a>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a52      	ldr	r2, [pc, #328]	; (8003fa0 <HAL_GPIO_Init+0x344>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d013      	beq.n	8003e82 <HAL_GPIO_Init+0x226>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a51      	ldr	r2, [pc, #324]	; (8003fa4 <HAL_GPIO_Init+0x348>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d00d      	beq.n	8003e7e <HAL_GPIO_Init+0x222>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a50      	ldr	r2, [pc, #320]	; (8003fa8 <HAL_GPIO_Init+0x34c>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d007      	beq.n	8003e7a <HAL_GPIO_Init+0x21e>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a4f      	ldr	r2, [pc, #316]	; (8003fac <HAL_GPIO_Init+0x350>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d101      	bne.n	8003e76 <HAL_GPIO_Init+0x21a>
 8003e72:	2309      	movs	r3, #9
 8003e74:	e012      	b.n	8003e9c <HAL_GPIO_Init+0x240>
 8003e76:	230a      	movs	r3, #10
 8003e78:	e010      	b.n	8003e9c <HAL_GPIO_Init+0x240>
 8003e7a:	2308      	movs	r3, #8
 8003e7c:	e00e      	b.n	8003e9c <HAL_GPIO_Init+0x240>
 8003e7e:	2307      	movs	r3, #7
 8003e80:	e00c      	b.n	8003e9c <HAL_GPIO_Init+0x240>
 8003e82:	2306      	movs	r3, #6
 8003e84:	e00a      	b.n	8003e9c <HAL_GPIO_Init+0x240>
 8003e86:	2305      	movs	r3, #5
 8003e88:	e008      	b.n	8003e9c <HAL_GPIO_Init+0x240>
 8003e8a:	2304      	movs	r3, #4
 8003e8c:	e006      	b.n	8003e9c <HAL_GPIO_Init+0x240>
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e004      	b.n	8003e9c <HAL_GPIO_Init+0x240>
 8003e92:	2302      	movs	r3, #2
 8003e94:	e002      	b.n	8003e9c <HAL_GPIO_Init+0x240>
 8003e96:	2301      	movs	r3, #1
 8003e98:	e000      	b.n	8003e9c <HAL_GPIO_Init+0x240>
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	69fa      	ldr	r2, [r7, #28]
 8003e9e:	f002 0203 	and.w	r2, r2, #3
 8003ea2:	0092      	lsls	r2, r2, #2
 8003ea4:	4093      	lsls	r3, r2
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003eac:	4935      	ldr	r1, [pc, #212]	; (8003f84 <HAL_GPIO_Init+0x328>)
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	089b      	lsrs	r3, r3, #2
 8003eb2:	3302      	adds	r3, #2
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003eba:	4b3d      	ldr	r3, [pc, #244]	; (8003fb0 <HAL_GPIO_Init+0x354>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	43db      	mvns	r3, r3
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ede:	4a34      	ldr	r2, [pc, #208]	; (8003fb0 <HAL_GPIO_Init+0x354>)
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ee4:	4b32      	ldr	r3, [pc, #200]	; (8003fb0 <HAL_GPIO_Init+0x354>)
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	43db      	mvns	r3, r3
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d003      	beq.n	8003f08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f08:	4a29      	ldr	r2, [pc, #164]	; (8003fb0 <HAL_GPIO_Init+0x354>)
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f0e:	4b28      	ldr	r3, [pc, #160]	; (8003fb0 <HAL_GPIO_Init+0x354>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	43db      	mvns	r3, r3
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f32:	4a1f      	ldr	r2, [pc, #124]	; (8003fb0 <HAL_GPIO_Init+0x354>)
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f38:	4b1d      	ldr	r3, [pc, #116]	; (8003fb0 <HAL_GPIO_Init+0x354>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	43db      	mvns	r3, r3
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	4013      	ands	r3, r2
 8003f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f5c:	4a14      	ldr	r2, [pc, #80]	; (8003fb0 <HAL_GPIO_Init+0x354>)
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	3301      	adds	r3, #1
 8003f66:	61fb      	str	r3, [r7, #28]
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	2b0f      	cmp	r3, #15
 8003f6c:	f67f ae84 	bls.w	8003c78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f70:	bf00      	nop
 8003f72:	bf00      	nop
 8003f74:	3724      	adds	r7, #36	; 0x24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	40023800 	.word	0x40023800
 8003f84:	40013800 	.word	0x40013800
 8003f88:	40020000 	.word	0x40020000
 8003f8c:	40020400 	.word	0x40020400
 8003f90:	40020800 	.word	0x40020800
 8003f94:	40020c00 	.word	0x40020c00
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	40021400 	.word	0x40021400
 8003fa0:	40021800 	.word	0x40021800
 8003fa4:	40021c00 	.word	0x40021c00
 8003fa8:	40022000 	.word	0x40022000
 8003fac:	40022400 	.word	0x40022400
 8003fb0:	40013c00 	.word	0x40013c00

08003fb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691a      	ldr	r2, [r3, #16]
 8003fc4:	887b      	ldrh	r3, [r7, #2]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d002      	beq.n	8003fd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	73fb      	strb	r3, [r7, #15]
 8003fd0:	e001      	b.n	8003fd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	460b      	mov	r3, r1
 8003fee:	807b      	strh	r3, [r7, #2]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ff4:	787b      	ldrb	r3, [r7, #1]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ffa:	887a      	ldrh	r2, [r7, #2]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004000:	e003      	b.n	800400a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004002:	887b      	ldrh	r3, [r7, #2]
 8004004:	041a      	lsls	r2, r3, #16
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	619a      	str	r2, [r3, #24]
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
	...

08004018 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e12b      	b.n	8004282 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d106      	bne.n	8004044 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7fd feec 	bl	8001e1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2224      	movs	r2, #36	; 0x24
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0201 	bic.w	r2, r2, #1
 800405a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800406a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800407a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800407c:	f001 fa20 	bl	80054c0 <HAL_RCC_GetPCLK1Freq>
 8004080:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	4a81      	ldr	r2, [pc, #516]	; (800428c <HAL_I2C_Init+0x274>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d807      	bhi.n	800409c <HAL_I2C_Init+0x84>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4a80      	ldr	r2, [pc, #512]	; (8004290 <HAL_I2C_Init+0x278>)
 8004090:	4293      	cmp	r3, r2
 8004092:	bf94      	ite	ls
 8004094:	2301      	movls	r3, #1
 8004096:	2300      	movhi	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	e006      	b.n	80040aa <HAL_I2C_Init+0x92>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4a7d      	ldr	r2, [pc, #500]	; (8004294 <HAL_I2C_Init+0x27c>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	bf94      	ite	ls
 80040a4:	2301      	movls	r3, #1
 80040a6:	2300      	movhi	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e0e7      	b.n	8004282 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	4a78      	ldr	r2, [pc, #480]	; (8004298 <HAL_I2C_Init+0x280>)
 80040b6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ba:	0c9b      	lsrs	r3, r3, #18
 80040bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	4a6a      	ldr	r2, [pc, #424]	; (800428c <HAL_I2C_Init+0x274>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d802      	bhi.n	80040ec <HAL_I2C_Init+0xd4>
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	3301      	adds	r3, #1
 80040ea:	e009      	b.n	8004100 <HAL_I2C_Init+0xe8>
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040f2:	fb02 f303 	mul.w	r3, r2, r3
 80040f6:	4a69      	ldr	r2, [pc, #420]	; (800429c <HAL_I2C_Init+0x284>)
 80040f8:	fba2 2303 	umull	r2, r3, r2, r3
 80040fc:	099b      	lsrs	r3, r3, #6
 80040fe:	3301      	adds	r3, #1
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	6812      	ldr	r2, [r2, #0]
 8004104:	430b      	orrs	r3, r1
 8004106:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004112:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	495c      	ldr	r1, [pc, #368]	; (800428c <HAL_I2C_Init+0x274>)
 800411c:	428b      	cmp	r3, r1
 800411e:	d819      	bhi.n	8004154 <HAL_I2C_Init+0x13c>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	1e59      	subs	r1, r3, #1
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	fbb1 f3f3 	udiv	r3, r1, r3
 800412e:	1c59      	adds	r1, r3, #1
 8004130:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004134:	400b      	ands	r3, r1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00a      	beq.n	8004150 <HAL_I2C_Init+0x138>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	1e59      	subs	r1, r3, #1
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	fbb1 f3f3 	udiv	r3, r1, r3
 8004148:	3301      	adds	r3, #1
 800414a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800414e:	e051      	b.n	80041f4 <HAL_I2C_Init+0x1dc>
 8004150:	2304      	movs	r3, #4
 8004152:	e04f      	b.n	80041f4 <HAL_I2C_Init+0x1dc>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d111      	bne.n	8004180 <HAL_I2C_Init+0x168>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	1e58      	subs	r0, r3, #1
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6859      	ldr	r1, [r3, #4]
 8004164:	460b      	mov	r3, r1
 8004166:	005b      	lsls	r3, r3, #1
 8004168:	440b      	add	r3, r1
 800416a:	fbb0 f3f3 	udiv	r3, r0, r3
 800416e:	3301      	adds	r3, #1
 8004170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004174:	2b00      	cmp	r3, #0
 8004176:	bf0c      	ite	eq
 8004178:	2301      	moveq	r3, #1
 800417a:	2300      	movne	r3, #0
 800417c:	b2db      	uxtb	r3, r3
 800417e:	e012      	b.n	80041a6 <HAL_I2C_Init+0x18e>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	1e58      	subs	r0, r3, #1
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6859      	ldr	r1, [r3, #4]
 8004188:	460b      	mov	r3, r1
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	440b      	add	r3, r1
 800418e:	0099      	lsls	r1, r3, #2
 8004190:	440b      	add	r3, r1
 8004192:	fbb0 f3f3 	udiv	r3, r0, r3
 8004196:	3301      	adds	r3, #1
 8004198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800419c:	2b00      	cmp	r3, #0
 800419e:	bf0c      	ite	eq
 80041a0:	2301      	moveq	r3, #1
 80041a2:	2300      	movne	r3, #0
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <HAL_I2C_Init+0x196>
 80041aa:	2301      	movs	r3, #1
 80041ac:	e022      	b.n	80041f4 <HAL_I2C_Init+0x1dc>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10e      	bne.n	80041d4 <HAL_I2C_Init+0x1bc>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	1e58      	subs	r0, r3, #1
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6859      	ldr	r1, [r3, #4]
 80041be:	460b      	mov	r3, r1
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	440b      	add	r3, r1
 80041c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80041c8:	3301      	adds	r3, #1
 80041ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041d2:	e00f      	b.n	80041f4 <HAL_I2C_Init+0x1dc>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	1e58      	subs	r0, r3, #1
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6859      	ldr	r1, [r3, #4]
 80041dc:	460b      	mov	r3, r1
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	0099      	lsls	r1, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80041ea:	3301      	adds	r3, #1
 80041ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041f4:	6879      	ldr	r1, [r7, #4]
 80041f6:	6809      	ldr	r1, [r1, #0]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	69da      	ldr	r2, [r3, #28]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	431a      	orrs	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004222:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	6911      	ldr	r1, [r2, #16]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	68d2      	ldr	r2, [r2, #12]
 800422e:	4311      	orrs	r1, r2
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6812      	ldr	r2, [r2, #0]
 8004234:	430b      	orrs	r3, r1
 8004236:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	695a      	ldr	r2, [r3, #20]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 0201 	orr.w	r2, r2, #1
 8004262:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2220      	movs	r2, #32
 800426e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	000186a0 	.word	0x000186a0
 8004290:	001e847f 	.word	0x001e847f
 8004294:	003d08ff 	.word	0x003d08ff
 8004298:	431bde83 	.word	0x431bde83
 800429c:	10624dd3 	.word	0x10624dd3

080042a0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b088      	sub	sp, #32
 80042a4:	af02      	add	r7, sp, #8
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	607a      	str	r2, [r7, #4]
 80042aa:	461a      	mov	r2, r3
 80042ac:	460b      	mov	r3, r1
 80042ae:	817b      	strh	r3, [r7, #10]
 80042b0:	4613      	mov	r3, r2
 80042b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042b4:	f7fe ffd6 	bl	8003264 <HAL_GetTick>
 80042b8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b20      	cmp	r3, #32
 80042c4:	f040 80e0 	bne.w	8004488 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	2319      	movs	r3, #25
 80042ce:	2201      	movs	r2, #1
 80042d0:	4970      	ldr	r1, [pc, #448]	; (8004494 <HAL_I2C_Master_Transmit+0x1f4>)
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f000 f964 	bl	80045a0 <I2C_WaitOnFlagUntilTimeout>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80042de:	2302      	movs	r3, #2
 80042e0:	e0d3      	b.n	800448a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d101      	bne.n	80042f0 <HAL_I2C_Master_Transmit+0x50>
 80042ec:	2302      	movs	r3, #2
 80042ee:	e0cc      	b.n	800448a <HAL_I2C_Master_Transmit+0x1ea>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b01      	cmp	r3, #1
 8004304:	d007      	beq.n	8004316 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f042 0201 	orr.w	r2, r2, #1
 8004314:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004324:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2221      	movs	r2, #33	; 0x21
 800432a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2210      	movs	r2, #16
 8004332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	893a      	ldrh	r2, [r7, #8]
 8004346:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434c:	b29a      	uxth	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	4a50      	ldr	r2, [pc, #320]	; (8004498 <HAL_I2C_Master_Transmit+0x1f8>)
 8004356:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004358:	8979      	ldrh	r1, [r7, #10]
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	6a3a      	ldr	r2, [r7, #32]
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f000 f89c 	bl	800449c <I2C_MasterRequestWrite>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e08d      	b.n	800448a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800436e:	2300      	movs	r3, #0
 8004370:	613b      	str	r3, [r7, #16]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	613b      	str	r3, [r7, #16]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	613b      	str	r3, [r7, #16]
 8004382:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004384:	e066      	b.n	8004454 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	6a39      	ldr	r1, [r7, #32]
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f000 f9de 	bl	800474c <I2C_WaitOnTXEFlagUntilTimeout>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00d      	beq.n	80043b2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	2b04      	cmp	r3, #4
 800439c:	d107      	bne.n	80043ae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e06b      	b.n	800448a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	781a      	ldrb	r2, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	3b01      	subs	r3, #1
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043da:	3b01      	subs	r3, #1
 80043dc:	b29a      	uxth	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	f003 0304 	and.w	r3, r3, #4
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	d11b      	bne.n	8004428 <HAL_I2C_Master_Transmit+0x188>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d017      	beq.n	8004428 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fc:	781a      	ldrb	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	1c5a      	adds	r2, r3, #1
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004412:	b29b      	uxth	r3, r3
 8004414:	3b01      	subs	r3, #1
 8004416:	b29a      	uxth	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004420:	3b01      	subs	r3, #1
 8004422:	b29a      	uxth	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	6a39      	ldr	r1, [r7, #32]
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 f9ce 	bl	80047ce <I2C_WaitOnBTFFlagUntilTimeout>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00d      	beq.n	8004454 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443c:	2b04      	cmp	r3, #4
 800443e:	d107      	bne.n	8004450 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800444e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e01a      	b.n	800448a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004458:	2b00      	cmp	r3, #0
 800445a:	d194      	bne.n	8004386 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800446a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2220      	movs	r2, #32
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004484:	2300      	movs	r3, #0
 8004486:	e000      	b.n	800448a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004488:	2302      	movs	r3, #2
  }
}
 800448a:	4618      	mov	r0, r3
 800448c:	3718      	adds	r7, #24
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	00100002 	.word	0x00100002
 8004498:	ffff0000 	.word	0xffff0000

0800449c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b088      	sub	sp, #32
 80044a0:	af02      	add	r7, sp, #8
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	607a      	str	r2, [r7, #4]
 80044a6:	603b      	str	r3, [r7, #0]
 80044a8:	460b      	mov	r3, r1
 80044aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	d006      	beq.n	80044c6 <I2C_MasterRequestWrite+0x2a>
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d003      	beq.n	80044c6 <I2C_MasterRequestWrite+0x2a>
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044c4:	d108      	bne.n	80044d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044d4:	601a      	str	r2, [r3, #0]
 80044d6:	e00b      	b.n	80044f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044dc:	2b12      	cmp	r3, #18
 80044de:	d107      	bne.n	80044f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f000 f84f 	bl	80045a0 <I2C_WaitOnFlagUntilTimeout>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00d      	beq.n	8004524 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004516:	d103      	bne.n	8004520 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800451e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e035      	b.n	8004590 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800452c:	d108      	bne.n	8004540 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800452e:	897b      	ldrh	r3, [r7, #10]
 8004530:	b2db      	uxtb	r3, r3
 8004532:	461a      	mov	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800453c:	611a      	str	r2, [r3, #16]
 800453e:	e01b      	b.n	8004578 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004540:	897b      	ldrh	r3, [r7, #10]
 8004542:	11db      	asrs	r3, r3, #7
 8004544:	b2db      	uxtb	r3, r3
 8004546:	f003 0306 	and.w	r3, r3, #6
 800454a:	b2db      	uxtb	r3, r3
 800454c:	f063 030f 	orn	r3, r3, #15
 8004550:	b2da      	uxtb	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	490e      	ldr	r1, [pc, #56]	; (8004598 <I2C_MasterRequestWrite+0xfc>)
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f000 f875 	bl	800464e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e010      	b.n	8004590 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800456e:	897b      	ldrh	r3, [r7, #10]
 8004570:	b2da      	uxtb	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	4907      	ldr	r1, [pc, #28]	; (800459c <I2C_MasterRequestWrite+0x100>)
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f000 f865 	bl	800464e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e000      	b.n	8004590 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3718      	adds	r7, #24
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	00010008 	.word	0x00010008
 800459c:	00010002 	.word	0x00010002

080045a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	603b      	str	r3, [r7, #0]
 80045ac:	4613      	mov	r3, r2
 80045ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045b0:	e025      	b.n	80045fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b8:	d021      	beq.n	80045fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ba:	f7fe fe53 	bl	8003264 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d302      	bcc.n	80045d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d116      	bne.n	80045fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2220      	movs	r2, #32
 80045da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	f043 0220 	orr.w	r2, r3, #32
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e023      	b.n	8004646 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	0c1b      	lsrs	r3, r3, #16
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b01      	cmp	r3, #1
 8004606:	d10d      	bne.n	8004624 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	43da      	mvns	r2, r3
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	4013      	ands	r3, r2
 8004614:	b29b      	uxth	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	bf0c      	ite	eq
 800461a:	2301      	moveq	r3, #1
 800461c:	2300      	movne	r3, #0
 800461e:	b2db      	uxtb	r3, r3
 8004620:	461a      	mov	r2, r3
 8004622:	e00c      	b.n	800463e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	43da      	mvns	r2, r3
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	4013      	ands	r3, r2
 8004630:	b29b      	uxth	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	bf0c      	ite	eq
 8004636:	2301      	moveq	r3, #1
 8004638:	2300      	movne	r3, #0
 800463a:	b2db      	uxtb	r3, r3
 800463c:	461a      	mov	r2, r3
 800463e:	79fb      	ldrb	r3, [r7, #7]
 8004640:	429a      	cmp	r2, r3
 8004642:	d0b6      	beq.n	80045b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b084      	sub	sp, #16
 8004652:	af00      	add	r7, sp, #0
 8004654:	60f8      	str	r0, [r7, #12]
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	607a      	str	r2, [r7, #4]
 800465a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800465c:	e051      	b.n	8004702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800466c:	d123      	bne.n	80046b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800467c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004686:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2220      	movs	r2, #32
 8004692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	f043 0204 	orr.w	r2, r3, #4
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e046      	b.n	8004744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046bc:	d021      	beq.n	8004702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046be:	f7fe fdd1 	bl	8003264 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d302      	bcc.n	80046d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d116      	bne.n	8004702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2220      	movs	r2, #32
 80046de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	f043 0220 	orr.w	r2, r3, #32
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e020      	b.n	8004744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	0c1b      	lsrs	r3, r3, #16
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b01      	cmp	r3, #1
 800470a:	d10c      	bne.n	8004726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	43da      	mvns	r2, r3
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	4013      	ands	r3, r2
 8004718:	b29b      	uxth	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	bf14      	ite	ne
 800471e:	2301      	movne	r3, #1
 8004720:	2300      	moveq	r3, #0
 8004722:	b2db      	uxtb	r3, r3
 8004724:	e00b      	b.n	800473e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	43da      	mvns	r2, r3
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	4013      	ands	r3, r2
 8004732:	b29b      	uxth	r3, r3
 8004734:	2b00      	cmp	r3, #0
 8004736:	bf14      	ite	ne
 8004738:	2301      	movne	r3, #1
 800473a:	2300      	moveq	r3, #0
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d18d      	bne.n	800465e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004758:	e02d      	b.n	80047b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 f878 	bl	8004850 <I2C_IsAcknowledgeFailed>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e02d      	b.n	80047c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004770:	d021      	beq.n	80047b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004772:	f7fe fd77 	bl	8003264 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	429a      	cmp	r2, r3
 8004780:	d302      	bcc.n	8004788 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d116      	bne.n	80047b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2220      	movs	r2, #32
 8004792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a2:	f043 0220 	orr.w	r2, r3, #32
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e007      	b.n	80047c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c0:	2b80      	cmp	r3, #128	; 0x80
 80047c2:	d1ca      	bne.n	800475a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b084      	sub	sp, #16
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	60f8      	str	r0, [r7, #12]
 80047d6:	60b9      	str	r1, [r7, #8]
 80047d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047da:	e02d      	b.n	8004838 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f000 f837 	bl	8004850 <I2C_IsAcknowledgeFailed>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d001      	beq.n	80047ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e02d      	b.n	8004848 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f2:	d021      	beq.n	8004838 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047f4:	f7fe fd36 	bl	8003264 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	429a      	cmp	r2, r3
 8004802:	d302      	bcc.n	800480a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d116      	bne.n	8004838 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2220      	movs	r2, #32
 8004814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004824:	f043 0220 	orr.w	r2, r3, #32
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e007      	b.n	8004848 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	f003 0304 	and.w	r3, r3, #4
 8004842:	2b04      	cmp	r3, #4
 8004844:	d1ca      	bne.n	80047dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004866:	d11b      	bne.n	80048a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004870:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2220      	movs	r2, #32
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488c:	f043 0204 	orr.w	r2, r3, #4
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e000      	b.n	80048a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b083      	sub	sp, #12
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
 80048b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b20      	cmp	r3, #32
 80048c2:	d129      	bne.n	8004918 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2224      	movs	r2, #36	; 0x24
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f022 0201 	bic.w	r2, r2, #1
 80048da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 0210 	bic.w	r2, r2, #16
 80048ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	430a      	orrs	r2, r1
 80048fa:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0201 	orr.w	r2, r2, #1
 800490a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2220      	movs	r2, #32
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004914:	2300      	movs	r3, #0
 8004916:	e000      	b.n	800491a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004918:	2302      	movs	r3, #2
  }
}
 800491a:	4618      	mov	r0, r3
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004926:	b480      	push	{r7}
 8004928:	b085      	sub	sp, #20
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
 800492e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004930:	2300      	movs	r3, #0
 8004932:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b20      	cmp	r3, #32
 800493e:	d12a      	bne.n	8004996 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2224      	movs	r2, #36	; 0x24
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 0201 	bic.w	r2, r2, #1
 8004956:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004960:	89fb      	ldrh	r3, [r7, #14]
 8004962:	f023 030f 	bic.w	r3, r3, #15
 8004966:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	b29a      	uxth	r2, r3
 800496c:	89fb      	ldrh	r3, [r7, #14]
 800496e:	4313      	orrs	r3, r2
 8004970:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	89fa      	ldrh	r2, [r7, #14]
 8004978:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f042 0201 	orr.w	r2, r2, #1
 8004988:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2220      	movs	r2, #32
 800498e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	e000      	b.n	8004998 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004996:	2302      	movs	r3, #2
  }
}
 8004998:	4618      	mov	r0, r3
 800499a:	3714      	adds	r7, #20
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80049a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049a6:	b08f      	sub	sp, #60	; 0x3c
 80049a8:	af0a      	add	r7, sp, #40	; 0x28
 80049aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e10f      	b.n	8004bd6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d106      	bne.n	80049d6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f7fd fbf9 	bl	80021c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2203      	movs	r2, #3
 80049da:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d102      	bne.n	80049f0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f003 f848 	bl	8007a8a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	603b      	str	r3, [r7, #0]
 8004a00:	687e      	ldr	r6, [r7, #4]
 8004a02:	466d      	mov	r5, sp
 8004a04:	f106 0410 	add.w	r4, r6, #16
 8004a08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004a14:	e885 0003 	stmia.w	r5, {r0, r1}
 8004a18:	1d33      	adds	r3, r6, #4
 8004a1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a1c:	6838      	ldr	r0, [r7, #0]
 8004a1e:	f002 ffd3 	bl	80079c8 <USB_CoreInit>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d005      	beq.n	8004a34 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e0d0      	b.n	8004bd6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2100      	movs	r1, #0
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f003 f836 	bl	8007aac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a40:	2300      	movs	r3, #0
 8004a42:	73fb      	strb	r3, [r7, #15]
 8004a44:	e04a      	b.n	8004adc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004a46:	7bfa      	ldrb	r2, [r7, #15]
 8004a48:	6879      	ldr	r1, [r7, #4]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	4413      	add	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	440b      	add	r3, r1
 8004a54:	333d      	adds	r3, #61	; 0x3d
 8004a56:	2201      	movs	r2, #1
 8004a58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004a5a:	7bfa      	ldrb	r2, [r7, #15]
 8004a5c:	6879      	ldr	r1, [r7, #4]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	00db      	lsls	r3, r3, #3
 8004a62:	4413      	add	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	440b      	add	r3, r1
 8004a68:	333c      	adds	r3, #60	; 0x3c
 8004a6a:	7bfa      	ldrb	r2, [r7, #15]
 8004a6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004a6e:	7bfa      	ldrb	r2, [r7, #15]
 8004a70:	7bfb      	ldrb	r3, [r7, #15]
 8004a72:	b298      	uxth	r0, r3
 8004a74:	6879      	ldr	r1, [r7, #4]
 8004a76:	4613      	mov	r3, r2
 8004a78:	00db      	lsls	r3, r3, #3
 8004a7a:	4413      	add	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	440b      	add	r3, r1
 8004a80:	3344      	adds	r3, #68	; 0x44
 8004a82:	4602      	mov	r2, r0
 8004a84:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004a86:	7bfa      	ldrb	r2, [r7, #15]
 8004a88:	6879      	ldr	r1, [r7, #4]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	00db      	lsls	r3, r3, #3
 8004a8e:	4413      	add	r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	440b      	add	r3, r1
 8004a94:	3340      	adds	r3, #64	; 0x40
 8004a96:	2200      	movs	r2, #0
 8004a98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004a9a:	7bfa      	ldrb	r2, [r7, #15]
 8004a9c:	6879      	ldr	r1, [r7, #4]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	00db      	lsls	r3, r3, #3
 8004aa2:	4413      	add	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	440b      	add	r3, r1
 8004aa8:	3348      	adds	r3, #72	; 0x48
 8004aaa:	2200      	movs	r2, #0
 8004aac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004aae:	7bfa      	ldrb	r2, [r7, #15]
 8004ab0:	6879      	ldr	r1, [r7, #4]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	00db      	lsls	r3, r3, #3
 8004ab6:	4413      	add	r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	440b      	add	r3, r1
 8004abc:	334c      	adds	r3, #76	; 0x4c
 8004abe:	2200      	movs	r2, #0
 8004ac0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004ac2:	7bfa      	ldrb	r2, [r7, #15]
 8004ac4:	6879      	ldr	r1, [r7, #4]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	00db      	lsls	r3, r3, #3
 8004aca:	4413      	add	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	440b      	add	r3, r1
 8004ad0:	3354      	adds	r3, #84	; 0x54
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ad6:	7bfb      	ldrb	r3, [r7, #15]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	73fb      	strb	r3, [r7, #15]
 8004adc:	7bfa      	ldrb	r2, [r7, #15]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d3af      	bcc.n	8004a46 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	73fb      	strb	r3, [r7, #15]
 8004aea:	e044      	b.n	8004b76 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004aec:	7bfa      	ldrb	r2, [r7, #15]
 8004aee:	6879      	ldr	r1, [r7, #4]
 8004af0:	4613      	mov	r3, r2
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	4413      	add	r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	440b      	add	r3, r1
 8004afa:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004afe:	2200      	movs	r2, #0
 8004b00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004b02:	7bfa      	ldrb	r2, [r7, #15]
 8004b04:	6879      	ldr	r1, [r7, #4]
 8004b06:	4613      	mov	r3, r2
 8004b08:	00db      	lsls	r3, r3, #3
 8004b0a:	4413      	add	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	440b      	add	r3, r1
 8004b10:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004b14:	7bfa      	ldrb	r2, [r7, #15]
 8004b16:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004b18:	7bfa      	ldrb	r2, [r7, #15]
 8004b1a:	6879      	ldr	r1, [r7, #4]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	4413      	add	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	440b      	add	r3, r1
 8004b26:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004b2e:	7bfa      	ldrb	r2, [r7, #15]
 8004b30:	6879      	ldr	r1, [r7, #4]
 8004b32:	4613      	mov	r3, r2
 8004b34:	00db      	lsls	r3, r3, #3
 8004b36:	4413      	add	r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	440b      	add	r3, r1
 8004b3c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004b40:	2200      	movs	r2, #0
 8004b42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004b44:	7bfa      	ldrb	r2, [r7, #15]
 8004b46:	6879      	ldr	r1, [r7, #4]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	4413      	add	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	440b      	add	r3, r1
 8004b52:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004b56:	2200      	movs	r2, #0
 8004b58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004b5a:	7bfa      	ldrb	r2, [r7, #15]
 8004b5c:	6879      	ldr	r1, [r7, #4]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	00db      	lsls	r3, r3, #3
 8004b62:	4413      	add	r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	440b      	add	r3, r1
 8004b68:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b70:	7bfb      	ldrb	r3, [r7, #15]
 8004b72:	3301      	adds	r3, #1
 8004b74:	73fb      	strb	r3, [r7, #15]
 8004b76:	7bfa      	ldrb	r2, [r7, #15]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d3b5      	bcc.n	8004aec <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	603b      	str	r3, [r7, #0]
 8004b86:	687e      	ldr	r6, [r7, #4]
 8004b88:	466d      	mov	r5, sp
 8004b8a:	f106 0410 	add.w	r4, r6, #16
 8004b8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b9e:	1d33      	adds	r3, r6, #4
 8004ba0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ba2:	6838      	ldr	r0, [r7, #0]
 8004ba4:	f002 ffce 	bl	8007b44 <USB_DevInit>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d005      	beq.n	8004bba <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2202      	movs	r2, #2
 8004bb2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e00d      	b.n	8004bd6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f003 f999 	bl	8007f06 <USB_DevDisconnect>

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004be0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e267      	b.n	80050c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d075      	beq.n	8004cea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bfe:	4b88      	ldr	r3, [pc, #544]	; (8004e20 <HAL_RCC_OscConfig+0x240>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f003 030c 	and.w	r3, r3, #12
 8004c06:	2b04      	cmp	r3, #4
 8004c08:	d00c      	beq.n	8004c24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c0a:	4b85      	ldr	r3, [pc, #532]	; (8004e20 <HAL_RCC_OscConfig+0x240>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c12:	2b08      	cmp	r3, #8
 8004c14:	d112      	bne.n	8004c3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c16:	4b82      	ldr	r3, [pc, #520]	; (8004e20 <HAL_RCC_OscConfig+0x240>)
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c22:	d10b      	bne.n	8004c3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c24:	4b7e      	ldr	r3, [pc, #504]	; (8004e20 <HAL_RCC_OscConfig+0x240>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d05b      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x108>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d157      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e242      	b.n	80050c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c44:	d106      	bne.n	8004c54 <HAL_RCC_OscConfig+0x74>
 8004c46:	4b76      	ldr	r3, [pc, #472]	; (8004e20 <HAL_RCC_OscConfig+0x240>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a75      	ldr	r2, [pc, #468]	; (8004e20 <HAL_RCC_OscConfig+0x240>)
 8004c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c50:	6013      	str	r3, [r2, #0]
 8004c52:	e01d      	b.n	8004c90 <HAL_RCC_OscConfig+0xb0>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c5c:	d10c      	bne.n	8004c78 <HAL_RCC_OscConfig+0x98>
 8004c5e:	4b70      	ldr	r3, [pc, #448]	; (8004e20 <HAL_RCC_OscConfig+0x240>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a6f      	ldr	r2, [pc, #444]	; (8004e20 <HAL_RCC_OscConfig+0x240>)
 8004c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c68:	6013      	str	r3, [r2, #0]
 8004c6a:	4b6d      	ldr	r3, [pc, #436]	; (8004e20 <HAL_RCC_OscConfig+0x240>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a6c      	ldr	r2, [pc, #432]	; (8004e20 <HAL_RCC_OscConfig+0x240>)
 8004c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c74:	6013      	str	r3, [r2, #0]
 8004c76:	e00b      	b.n	8004c90 <HAL_RCC_OscConfig+0xb0>
 8004c78:	4b69      	ldr	r3, [pc, #420]	; (8004e20 <HAL_RCC_OscConfig+0x240>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a68      	ldr	r2, [pc, #416]	; (8004e20 <HAL_RCC_OscConfig+0x240>)
 8004c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c82:	6013      	str	r3, [r2, #0]
 8004c84:	4b66      	ldr	r3, [pc, #408]	; (8004e20 <HAL_RCC_OscConfig+0x240>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a65      	ldr	r2, [pc, #404]	; (8004e20 <HAL_RCC_OscConfig+0x240>)
 8004c8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d013      	beq.n	8004cc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c98:	f7fe fae4 	bl	8003264 <HAL_GetTick>
 8004c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ca0:	f7fe fae0 	bl	8003264 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b64      	cmp	r3, #100	; 0x64
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e207      	b.n	80050c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cb2:	4b5b      	ldr	r3, [pc, #364]	; (8004e20 <HAL_RCC_OscConfig+0x240>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d0f0      	beq.n	8004ca0 <HAL_RCC_OscConfig+0xc0>
 8004cbe:	e014      	b.n	8004cea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc0:	f7fe fad0 	bl	8003264 <HAL_GetTick>
 8004cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cc6:	e008      	b.n	8004cda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cc8:	f7fe facc 	bl	8003264 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b64      	cmp	r3, #100	; 0x64
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e1f3      	b.n	80050c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cda:	4b51      	ldr	r3, [pc, #324]	; (8004e20 <HAL_RCC_OscConfig+0x240>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1f0      	bne.n	8004cc8 <HAL_RCC_OscConfig+0xe8>
 8004ce6:	e000      	b.n	8004cea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d063      	beq.n	8004dbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cf6:	4b4a      	ldr	r3, [pc, #296]	; (8004e20 <HAL_RCC_OscConfig+0x240>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f003 030c 	and.w	r3, r3, #12
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00b      	beq.n	8004d1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d02:	4b47      	ldr	r3, [pc, #284]	; (8004e20 <HAL_RCC_OscConfig+0x240>)
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d0a:	2b08      	cmp	r3, #8
 8004d0c:	d11c      	bne.n	8004d48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d0e:	4b44      	ldr	r3, [pc, #272]	; (8004e20 <HAL_RCC_OscConfig+0x240>)
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d116      	bne.n	8004d48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d1a:	4b41      	ldr	r3, [pc, #260]	; (8004e20 <HAL_RCC_OscConfig+0x240>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d005      	beq.n	8004d32 <HAL_RCC_OscConfig+0x152>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d001      	beq.n	8004d32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e1c7      	b.n	80050c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d32:	4b3b      	ldr	r3, [pc, #236]	; (8004e20 <HAL_RCC_OscConfig+0x240>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	00db      	lsls	r3, r3, #3
 8004d40:	4937      	ldr	r1, [pc, #220]	; (8004e20 <HAL_RCC_OscConfig+0x240>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d46:	e03a      	b.n	8004dbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d020      	beq.n	8004d92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d50:	4b34      	ldr	r3, [pc, #208]	; (8004e24 <HAL_RCC_OscConfig+0x244>)
 8004d52:	2201      	movs	r2, #1
 8004d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d56:	f7fe fa85 	bl	8003264 <HAL_GetTick>
 8004d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d5c:	e008      	b.n	8004d70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d5e:	f7fe fa81 	bl	8003264 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e1a8      	b.n	80050c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d70:	4b2b      	ldr	r3, [pc, #172]	; (8004e20 <HAL_RCC_OscConfig+0x240>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d0f0      	beq.n	8004d5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d7c:	4b28      	ldr	r3, [pc, #160]	; (8004e20 <HAL_RCC_OscConfig+0x240>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	00db      	lsls	r3, r3, #3
 8004d8a:	4925      	ldr	r1, [pc, #148]	; (8004e20 <HAL_RCC_OscConfig+0x240>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	600b      	str	r3, [r1, #0]
 8004d90:	e015      	b.n	8004dbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d92:	4b24      	ldr	r3, [pc, #144]	; (8004e24 <HAL_RCC_OscConfig+0x244>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d98:	f7fe fa64 	bl	8003264 <HAL_GetTick>
 8004d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004da0:	f7fe fa60 	bl	8003264 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e187      	b.n	80050c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004db2:	4b1b      	ldr	r3, [pc, #108]	; (8004e20 <HAL_RCC_OscConfig+0x240>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1f0      	bne.n	8004da0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0308 	and.w	r3, r3, #8
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d036      	beq.n	8004e38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d016      	beq.n	8004e00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dd2:	4b15      	ldr	r3, [pc, #84]	; (8004e28 <HAL_RCC_OscConfig+0x248>)
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dd8:	f7fe fa44 	bl	8003264 <HAL_GetTick>
 8004ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dde:	e008      	b.n	8004df2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004de0:	f7fe fa40 	bl	8003264 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e167      	b.n	80050c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004df2:	4b0b      	ldr	r3, [pc, #44]	; (8004e20 <HAL_RCC_OscConfig+0x240>)
 8004df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d0f0      	beq.n	8004de0 <HAL_RCC_OscConfig+0x200>
 8004dfe:	e01b      	b.n	8004e38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e00:	4b09      	ldr	r3, [pc, #36]	; (8004e28 <HAL_RCC_OscConfig+0x248>)
 8004e02:	2200      	movs	r2, #0
 8004e04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e06:	f7fe fa2d 	bl	8003264 <HAL_GetTick>
 8004e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e0c:	e00e      	b.n	8004e2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e0e:	f7fe fa29 	bl	8003264 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d907      	bls.n	8004e2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e150      	b.n	80050c2 <HAL_RCC_OscConfig+0x4e2>
 8004e20:	40023800 	.word	0x40023800
 8004e24:	42470000 	.word	0x42470000
 8004e28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e2c:	4b88      	ldr	r3, [pc, #544]	; (8005050 <HAL_RCC_OscConfig+0x470>)
 8004e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e30:	f003 0302 	and.w	r3, r3, #2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1ea      	bne.n	8004e0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0304 	and.w	r3, r3, #4
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f000 8097 	beq.w	8004f74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e46:	2300      	movs	r3, #0
 8004e48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e4a:	4b81      	ldr	r3, [pc, #516]	; (8005050 <HAL_RCC_OscConfig+0x470>)
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10f      	bne.n	8004e76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e56:	2300      	movs	r3, #0
 8004e58:	60bb      	str	r3, [r7, #8]
 8004e5a:	4b7d      	ldr	r3, [pc, #500]	; (8005050 <HAL_RCC_OscConfig+0x470>)
 8004e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5e:	4a7c      	ldr	r2, [pc, #496]	; (8005050 <HAL_RCC_OscConfig+0x470>)
 8004e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e64:	6413      	str	r3, [r2, #64]	; 0x40
 8004e66:	4b7a      	ldr	r3, [pc, #488]	; (8005050 <HAL_RCC_OscConfig+0x470>)
 8004e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e6e:	60bb      	str	r3, [r7, #8]
 8004e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e72:	2301      	movs	r3, #1
 8004e74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e76:	4b77      	ldr	r3, [pc, #476]	; (8005054 <HAL_RCC_OscConfig+0x474>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d118      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e82:	4b74      	ldr	r3, [pc, #464]	; (8005054 <HAL_RCC_OscConfig+0x474>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a73      	ldr	r2, [pc, #460]	; (8005054 <HAL_RCC_OscConfig+0x474>)
 8004e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e8e:	f7fe f9e9 	bl	8003264 <HAL_GetTick>
 8004e92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e94:	e008      	b.n	8004ea8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e96:	f7fe f9e5 	bl	8003264 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d901      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e10c      	b.n	80050c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ea8:	4b6a      	ldr	r3, [pc, #424]	; (8005054 <HAL_RCC_OscConfig+0x474>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d0f0      	beq.n	8004e96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d106      	bne.n	8004eca <HAL_RCC_OscConfig+0x2ea>
 8004ebc:	4b64      	ldr	r3, [pc, #400]	; (8005050 <HAL_RCC_OscConfig+0x470>)
 8004ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec0:	4a63      	ldr	r2, [pc, #396]	; (8005050 <HAL_RCC_OscConfig+0x470>)
 8004ec2:	f043 0301 	orr.w	r3, r3, #1
 8004ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ec8:	e01c      	b.n	8004f04 <HAL_RCC_OscConfig+0x324>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	2b05      	cmp	r3, #5
 8004ed0:	d10c      	bne.n	8004eec <HAL_RCC_OscConfig+0x30c>
 8004ed2:	4b5f      	ldr	r3, [pc, #380]	; (8005050 <HAL_RCC_OscConfig+0x470>)
 8004ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed6:	4a5e      	ldr	r2, [pc, #376]	; (8005050 <HAL_RCC_OscConfig+0x470>)
 8004ed8:	f043 0304 	orr.w	r3, r3, #4
 8004edc:	6713      	str	r3, [r2, #112]	; 0x70
 8004ede:	4b5c      	ldr	r3, [pc, #368]	; (8005050 <HAL_RCC_OscConfig+0x470>)
 8004ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee2:	4a5b      	ldr	r2, [pc, #364]	; (8005050 <HAL_RCC_OscConfig+0x470>)
 8004ee4:	f043 0301 	orr.w	r3, r3, #1
 8004ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8004eea:	e00b      	b.n	8004f04 <HAL_RCC_OscConfig+0x324>
 8004eec:	4b58      	ldr	r3, [pc, #352]	; (8005050 <HAL_RCC_OscConfig+0x470>)
 8004eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef0:	4a57      	ldr	r2, [pc, #348]	; (8005050 <HAL_RCC_OscConfig+0x470>)
 8004ef2:	f023 0301 	bic.w	r3, r3, #1
 8004ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ef8:	4b55      	ldr	r3, [pc, #340]	; (8005050 <HAL_RCC_OscConfig+0x470>)
 8004efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efc:	4a54      	ldr	r2, [pc, #336]	; (8005050 <HAL_RCC_OscConfig+0x470>)
 8004efe:	f023 0304 	bic.w	r3, r3, #4
 8004f02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d015      	beq.n	8004f38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f0c:	f7fe f9aa 	bl	8003264 <HAL_GetTick>
 8004f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f12:	e00a      	b.n	8004f2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f14:	f7fe f9a6 	bl	8003264 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e0cb      	b.n	80050c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f2a:	4b49      	ldr	r3, [pc, #292]	; (8005050 <HAL_RCC_OscConfig+0x470>)
 8004f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d0ee      	beq.n	8004f14 <HAL_RCC_OscConfig+0x334>
 8004f36:	e014      	b.n	8004f62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f38:	f7fe f994 	bl	8003264 <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f3e:	e00a      	b.n	8004f56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f40:	f7fe f990 	bl	8003264 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e0b5      	b.n	80050c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f56:	4b3e      	ldr	r3, [pc, #248]	; (8005050 <HAL_RCC_OscConfig+0x470>)
 8004f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1ee      	bne.n	8004f40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f62:	7dfb      	ldrb	r3, [r7, #23]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d105      	bne.n	8004f74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f68:	4b39      	ldr	r3, [pc, #228]	; (8005050 <HAL_RCC_OscConfig+0x470>)
 8004f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6c:	4a38      	ldr	r2, [pc, #224]	; (8005050 <HAL_RCC_OscConfig+0x470>)
 8004f6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 80a1 	beq.w	80050c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f7e:	4b34      	ldr	r3, [pc, #208]	; (8005050 <HAL_RCC_OscConfig+0x470>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f003 030c 	and.w	r3, r3, #12
 8004f86:	2b08      	cmp	r3, #8
 8004f88:	d05c      	beq.n	8005044 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d141      	bne.n	8005016 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f92:	4b31      	ldr	r3, [pc, #196]	; (8005058 <HAL_RCC_OscConfig+0x478>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f98:	f7fe f964 	bl	8003264 <HAL_GetTick>
 8004f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f9e:	e008      	b.n	8004fb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fa0:	f7fe f960 	bl	8003264 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d901      	bls.n	8004fb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e087      	b.n	80050c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fb2:	4b27      	ldr	r3, [pc, #156]	; (8005050 <HAL_RCC_OscConfig+0x470>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1f0      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	69da      	ldr	r2, [r3, #28]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	019b      	lsls	r3, r3, #6
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd4:	085b      	lsrs	r3, r3, #1
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	041b      	lsls	r3, r3, #16
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe0:	061b      	lsls	r3, r3, #24
 8004fe2:	491b      	ldr	r1, [pc, #108]	; (8005050 <HAL_RCC_OscConfig+0x470>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fe8:	4b1b      	ldr	r3, [pc, #108]	; (8005058 <HAL_RCC_OscConfig+0x478>)
 8004fea:	2201      	movs	r2, #1
 8004fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fee:	f7fe f939 	bl	8003264 <HAL_GetTick>
 8004ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ff4:	e008      	b.n	8005008 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ff6:	f7fe f935 	bl	8003264 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	2b02      	cmp	r3, #2
 8005002:	d901      	bls.n	8005008 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e05c      	b.n	80050c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005008:	4b11      	ldr	r3, [pc, #68]	; (8005050 <HAL_RCC_OscConfig+0x470>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d0f0      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x416>
 8005014:	e054      	b.n	80050c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005016:	4b10      	ldr	r3, [pc, #64]	; (8005058 <HAL_RCC_OscConfig+0x478>)
 8005018:	2200      	movs	r2, #0
 800501a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800501c:	f7fe f922 	bl	8003264 <HAL_GetTick>
 8005020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005022:	e008      	b.n	8005036 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005024:	f7fe f91e 	bl	8003264 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b02      	cmp	r3, #2
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e045      	b.n	80050c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005036:	4b06      	ldr	r3, [pc, #24]	; (8005050 <HAL_RCC_OscConfig+0x470>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1f0      	bne.n	8005024 <HAL_RCC_OscConfig+0x444>
 8005042:	e03d      	b.n	80050c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d107      	bne.n	800505c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e038      	b.n	80050c2 <HAL_RCC_OscConfig+0x4e2>
 8005050:	40023800 	.word	0x40023800
 8005054:	40007000 	.word	0x40007000
 8005058:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800505c:	4b1b      	ldr	r3, [pc, #108]	; (80050cc <HAL_RCC_OscConfig+0x4ec>)
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d028      	beq.n	80050bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005074:	429a      	cmp	r2, r3
 8005076:	d121      	bne.n	80050bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005082:	429a      	cmp	r2, r3
 8005084:	d11a      	bne.n	80050bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800508c:	4013      	ands	r3, r2
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005092:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005094:	4293      	cmp	r3, r2
 8005096:	d111      	bne.n	80050bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a2:	085b      	lsrs	r3, r3, #1
 80050a4:	3b01      	subs	r3, #1
 80050a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d107      	bne.n	80050bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d001      	beq.n	80050c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e000      	b.n	80050c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3718      	adds	r7, #24
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	40023800 	.word	0x40023800

080050d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e0cc      	b.n	800527e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050e4:	4b68      	ldr	r3, [pc, #416]	; (8005288 <HAL_RCC_ClockConfig+0x1b8>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 030f 	and.w	r3, r3, #15
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d90c      	bls.n	800510c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050f2:	4b65      	ldr	r3, [pc, #404]	; (8005288 <HAL_RCC_ClockConfig+0x1b8>)
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050fa:	4b63      	ldr	r3, [pc, #396]	; (8005288 <HAL_RCC_ClockConfig+0x1b8>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 030f 	and.w	r3, r3, #15
 8005102:	683a      	ldr	r2, [r7, #0]
 8005104:	429a      	cmp	r2, r3
 8005106:	d001      	beq.n	800510c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e0b8      	b.n	800527e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d020      	beq.n	800515a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0304 	and.w	r3, r3, #4
 8005120:	2b00      	cmp	r3, #0
 8005122:	d005      	beq.n	8005130 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005124:	4b59      	ldr	r3, [pc, #356]	; (800528c <HAL_RCC_ClockConfig+0x1bc>)
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	4a58      	ldr	r2, [pc, #352]	; (800528c <HAL_RCC_ClockConfig+0x1bc>)
 800512a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800512e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0308 	and.w	r3, r3, #8
 8005138:	2b00      	cmp	r3, #0
 800513a:	d005      	beq.n	8005148 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800513c:	4b53      	ldr	r3, [pc, #332]	; (800528c <HAL_RCC_ClockConfig+0x1bc>)
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	4a52      	ldr	r2, [pc, #328]	; (800528c <HAL_RCC_ClockConfig+0x1bc>)
 8005142:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005146:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005148:	4b50      	ldr	r3, [pc, #320]	; (800528c <HAL_RCC_ClockConfig+0x1bc>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	494d      	ldr	r1, [pc, #308]	; (800528c <HAL_RCC_ClockConfig+0x1bc>)
 8005156:	4313      	orrs	r3, r2
 8005158:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b00      	cmp	r3, #0
 8005164:	d044      	beq.n	80051f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d107      	bne.n	800517e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800516e:	4b47      	ldr	r3, [pc, #284]	; (800528c <HAL_RCC_ClockConfig+0x1bc>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d119      	bne.n	80051ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e07f      	b.n	800527e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	2b02      	cmp	r3, #2
 8005184:	d003      	beq.n	800518e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800518a:	2b03      	cmp	r3, #3
 800518c:	d107      	bne.n	800519e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800518e:	4b3f      	ldr	r3, [pc, #252]	; (800528c <HAL_RCC_ClockConfig+0x1bc>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d109      	bne.n	80051ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e06f      	b.n	800527e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800519e:	4b3b      	ldr	r3, [pc, #236]	; (800528c <HAL_RCC_ClockConfig+0x1bc>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e067      	b.n	800527e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051ae:	4b37      	ldr	r3, [pc, #220]	; (800528c <HAL_RCC_ClockConfig+0x1bc>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f023 0203 	bic.w	r2, r3, #3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	4934      	ldr	r1, [pc, #208]	; (800528c <HAL_RCC_ClockConfig+0x1bc>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051c0:	f7fe f850 	bl	8003264 <HAL_GetTick>
 80051c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051c6:	e00a      	b.n	80051de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051c8:	f7fe f84c 	bl	8003264 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d901      	bls.n	80051de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e04f      	b.n	800527e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051de:	4b2b      	ldr	r3, [pc, #172]	; (800528c <HAL_RCC_ClockConfig+0x1bc>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f003 020c 	and.w	r2, r3, #12
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d1eb      	bne.n	80051c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051f0:	4b25      	ldr	r3, [pc, #148]	; (8005288 <HAL_RCC_ClockConfig+0x1b8>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 030f 	and.w	r3, r3, #15
 80051f8:	683a      	ldr	r2, [r7, #0]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d20c      	bcs.n	8005218 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051fe:	4b22      	ldr	r3, [pc, #136]	; (8005288 <HAL_RCC_ClockConfig+0x1b8>)
 8005200:	683a      	ldr	r2, [r7, #0]
 8005202:	b2d2      	uxtb	r2, r2
 8005204:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005206:	4b20      	ldr	r3, [pc, #128]	; (8005288 <HAL_RCC_ClockConfig+0x1b8>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 030f 	and.w	r3, r3, #15
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	429a      	cmp	r2, r3
 8005212:	d001      	beq.n	8005218 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e032      	b.n	800527e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0304 	and.w	r3, r3, #4
 8005220:	2b00      	cmp	r3, #0
 8005222:	d008      	beq.n	8005236 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005224:	4b19      	ldr	r3, [pc, #100]	; (800528c <HAL_RCC_ClockConfig+0x1bc>)
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	4916      	ldr	r1, [pc, #88]	; (800528c <HAL_RCC_ClockConfig+0x1bc>)
 8005232:	4313      	orrs	r3, r2
 8005234:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0308 	and.w	r3, r3, #8
 800523e:	2b00      	cmp	r3, #0
 8005240:	d009      	beq.n	8005256 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005242:	4b12      	ldr	r3, [pc, #72]	; (800528c <HAL_RCC_ClockConfig+0x1bc>)
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	00db      	lsls	r3, r3, #3
 8005250:	490e      	ldr	r1, [pc, #56]	; (800528c <HAL_RCC_ClockConfig+0x1bc>)
 8005252:	4313      	orrs	r3, r2
 8005254:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005256:	f000 f821 	bl	800529c <HAL_RCC_GetSysClockFreq>
 800525a:	4602      	mov	r2, r0
 800525c:	4b0b      	ldr	r3, [pc, #44]	; (800528c <HAL_RCC_ClockConfig+0x1bc>)
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	091b      	lsrs	r3, r3, #4
 8005262:	f003 030f 	and.w	r3, r3, #15
 8005266:	490a      	ldr	r1, [pc, #40]	; (8005290 <HAL_RCC_ClockConfig+0x1c0>)
 8005268:	5ccb      	ldrb	r3, [r1, r3]
 800526a:	fa22 f303 	lsr.w	r3, r2, r3
 800526e:	4a09      	ldr	r2, [pc, #36]	; (8005294 <HAL_RCC_ClockConfig+0x1c4>)
 8005270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005272:	4b09      	ldr	r3, [pc, #36]	; (8005298 <HAL_RCC_ClockConfig+0x1c8>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4618      	mov	r0, r3
 8005278:	f7fd ffb0 	bl	80031dc <HAL_InitTick>

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	40023c00 	.word	0x40023c00
 800528c:	40023800 	.word	0x40023800
 8005290:	0800945c 	.word	0x0800945c
 8005294:	20000110 	.word	0x20000110
 8005298:	20000130 	.word	0x20000130

0800529c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800529c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052a0:	b094      	sub	sp, #80	; 0x50
 80052a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80052a4:	2300      	movs	r3, #0
 80052a6:	647b      	str	r3, [r7, #68]	; 0x44
 80052a8:	2300      	movs	r3, #0
 80052aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052ac:	2300      	movs	r3, #0
 80052ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80052b0:	2300      	movs	r3, #0
 80052b2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052b4:	4b79      	ldr	r3, [pc, #484]	; (800549c <HAL_RCC_GetSysClockFreq+0x200>)
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f003 030c 	and.w	r3, r3, #12
 80052bc:	2b08      	cmp	r3, #8
 80052be:	d00d      	beq.n	80052dc <HAL_RCC_GetSysClockFreq+0x40>
 80052c0:	2b08      	cmp	r3, #8
 80052c2:	f200 80e1 	bhi.w	8005488 <HAL_RCC_GetSysClockFreq+0x1ec>
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d002      	beq.n	80052d0 <HAL_RCC_GetSysClockFreq+0x34>
 80052ca:	2b04      	cmp	r3, #4
 80052cc:	d003      	beq.n	80052d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80052ce:	e0db      	b.n	8005488 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052d0:	4b73      	ldr	r3, [pc, #460]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80052d2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80052d4:	e0db      	b.n	800548e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052d6:	4b73      	ldr	r3, [pc, #460]	; (80054a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80052d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80052da:	e0d8      	b.n	800548e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052dc:	4b6f      	ldr	r3, [pc, #444]	; (800549c <HAL_RCC_GetSysClockFreq+0x200>)
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052e4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052e6:	4b6d      	ldr	r3, [pc, #436]	; (800549c <HAL_RCC_GetSysClockFreq+0x200>)
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d063      	beq.n	80053ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052f2:	4b6a      	ldr	r3, [pc, #424]	; (800549c <HAL_RCC_GetSysClockFreq+0x200>)
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	099b      	lsrs	r3, r3, #6
 80052f8:	2200      	movs	r2, #0
 80052fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80052fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80052fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005304:	633b      	str	r3, [r7, #48]	; 0x30
 8005306:	2300      	movs	r3, #0
 8005308:	637b      	str	r3, [r7, #52]	; 0x34
 800530a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800530e:	4622      	mov	r2, r4
 8005310:	462b      	mov	r3, r5
 8005312:	f04f 0000 	mov.w	r0, #0
 8005316:	f04f 0100 	mov.w	r1, #0
 800531a:	0159      	lsls	r1, r3, #5
 800531c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005320:	0150      	lsls	r0, r2, #5
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	4621      	mov	r1, r4
 8005328:	1a51      	subs	r1, r2, r1
 800532a:	6139      	str	r1, [r7, #16]
 800532c:	4629      	mov	r1, r5
 800532e:	eb63 0301 	sbc.w	r3, r3, r1
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	f04f 0200 	mov.w	r2, #0
 8005338:	f04f 0300 	mov.w	r3, #0
 800533c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005340:	4659      	mov	r1, fp
 8005342:	018b      	lsls	r3, r1, #6
 8005344:	4651      	mov	r1, sl
 8005346:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800534a:	4651      	mov	r1, sl
 800534c:	018a      	lsls	r2, r1, #6
 800534e:	4651      	mov	r1, sl
 8005350:	ebb2 0801 	subs.w	r8, r2, r1
 8005354:	4659      	mov	r1, fp
 8005356:	eb63 0901 	sbc.w	r9, r3, r1
 800535a:	f04f 0200 	mov.w	r2, #0
 800535e:	f04f 0300 	mov.w	r3, #0
 8005362:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005366:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800536a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800536e:	4690      	mov	r8, r2
 8005370:	4699      	mov	r9, r3
 8005372:	4623      	mov	r3, r4
 8005374:	eb18 0303 	adds.w	r3, r8, r3
 8005378:	60bb      	str	r3, [r7, #8]
 800537a:	462b      	mov	r3, r5
 800537c:	eb49 0303 	adc.w	r3, r9, r3
 8005380:	60fb      	str	r3, [r7, #12]
 8005382:	f04f 0200 	mov.w	r2, #0
 8005386:	f04f 0300 	mov.w	r3, #0
 800538a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800538e:	4629      	mov	r1, r5
 8005390:	024b      	lsls	r3, r1, #9
 8005392:	4621      	mov	r1, r4
 8005394:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005398:	4621      	mov	r1, r4
 800539a:	024a      	lsls	r2, r1, #9
 800539c:	4610      	mov	r0, r2
 800539e:	4619      	mov	r1, r3
 80053a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053a2:	2200      	movs	r2, #0
 80053a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80053a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053ac:	f7fb fb66 	bl	8000a7c <__aeabi_uldivmod>
 80053b0:	4602      	mov	r2, r0
 80053b2:	460b      	mov	r3, r1
 80053b4:	4613      	mov	r3, r2
 80053b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053b8:	e058      	b.n	800546c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053ba:	4b38      	ldr	r3, [pc, #224]	; (800549c <HAL_RCC_GetSysClockFreq+0x200>)
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	099b      	lsrs	r3, r3, #6
 80053c0:	2200      	movs	r2, #0
 80053c2:	4618      	mov	r0, r3
 80053c4:	4611      	mov	r1, r2
 80053c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80053ca:	623b      	str	r3, [r7, #32]
 80053cc:	2300      	movs	r3, #0
 80053ce:	627b      	str	r3, [r7, #36]	; 0x24
 80053d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80053d4:	4642      	mov	r2, r8
 80053d6:	464b      	mov	r3, r9
 80053d8:	f04f 0000 	mov.w	r0, #0
 80053dc:	f04f 0100 	mov.w	r1, #0
 80053e0:	0159      	lsls	r1, r3, #5
 80053e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053e6:	0150      	lsls	r0, r2, #5
 80053e8:	4602      	mov	r2, r0
 80053ea:	460b      	mov	r3, r1
 80053ec:	4641      	mov	r1, r8
 80053ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80053f2:	4649      	mov	r1, r9
 80053f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80053f8:	f04f 0200 	mov.w	r2, #0
 80053fc:	f04f 0300 	mov.w	r3, #0
 8005400:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005404:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005408:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800540c:	ebb2 040a 	subs.w	r4, r2, sl
 8005410:	eb63 050b 	sbc.w	r5, r3, fp
 8005414:	f04f 0200 	mov.w	r2, #0
 8005418:	f04f 0300 	mov.w	r3, #0
 800541c:	00eb      	lsls	r3, r5, #3
 800541e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005422:	00e2      	lsls	r2, r4, #3
 8005424:	4614      	mov	r4, r2
 8005426:	461d      	mov	r5, r3
 8005428:	4643      	mov	r3, r8
 800542a:	18e3      	adds	r3, r4, r3
 800542c:	603b      	str	r3, [r7, #0]
 800542e:	464b      	mov	r3, r9
 8005430:	eb45 0303 	adc.w	r3, r5, r3
 8005434:	607b      	str	r3, [r7, #4]
 8005436:	f04f 0200 	mov.w	r2, #0
 800543a:	f04f 0300 	mov.w	r3, #0
 800543e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005442:	4629      	mov	r1, r5
 8005444:	028b      	lsls	r3, r1, #10
 8005446:	4621      	mov	r1, r4
 8005448:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800544c:	4621      	mov	r1, r4
 800544e:	028a      	lsls	r2, r1, #10
 8005450:	4610      	mov	r0, r2
 8005452:	4619      	mov	r1, r3
 8005454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005456:	2200      	movs	r2, #0
 8005458:	61bb      	str	r3, [r7, #24]
 800545a:	61fa      	str	r2, [r7, #28]
 800545c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005460:	f7fb fb0c 	bl	8000a7c <__aeabi_uldivmod>
 8005464:	4602      	mov	r2, r0
 8005466:	460b      	mov	r3, r1
 8005468:	4613      	mov	r3, r2
 800546a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800546c:	4b0b      	ldr	r3, [pc, #44]	; (800549c <HAL_RCC_GetSysClockFreq+0x200>)
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	0c1b      	lsrs	r3, r3, #16
 8005472:	f003 0303 	and.w	r3, r3, #3
 8005476:	3301      	adds	r3, #1
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800547c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800547e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005480:	fbb2 f3f3 	udiv	r3, r2, r3
 8005484:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005486:	e002      	b.n	800548e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005488:	4b05      	ldr	r3, [pc, #20]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800548a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800548c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800548e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005490:	4618      	mov	r0, r3
 8005492:	3750      	adds	r7, #80	; 0x50
 8005494:	46bd      	mov	sp, r7
 8005496:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800549a:	bf00      	nop
 800549c:	40023800 	.word	0x40023800
 80054a0:	00f42400 	.word	0x00f42400
 80054a4:	007a1200 	.word	0x007a1200

080054a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054a8:	b480      	push	{r7}
 80054aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054ac:	4b03      	ldr	r3, [pc, #12]	; (80054bc <HAL_RCC_GetHCLKFreq+0x14>)
 80054ae:	681b      	ldr	r3, [r3, #0]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	20000110 	.word	0x20000110

080054c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80054c4:	f7ff fff0 	bl	80054a8 <HAL_RCC_GetHCLKFreq>
 80054c8:	4602      	mov	r2, r0
 80054ca:	4b05      	ldr	r3, [pc, #20]	; (80054e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	0a9b      	lsrs	r3, r3, #10
 80054d0:	f003 0307 	and.w	r3, r3, #7
 80054d4:	4903      	ldr	r1, [pc, #12]	; (80054e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054d6:	5ccb      	ldrb	r3, [r1, r3]
 80054d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054dc:	4618      	mov	r0, r3
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	40023800 	.word	0x40023800
 80054e4:	0800946c 	.word	0x0800946c

080054e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80054ec:	f7ff ffdc 	bl	80054a8 <HAL_RCC_GetHCLKFreq>
 80054f0:	4602      	mov	r2, r0
 80054f2:	4b05      	ldr	r3, [pc, #20]	; (8005508 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	0b5b      	lsrs	r3, r3, #13
 80054f8:	f003 0307 	and.w	r3, r3, #7
 80054fc:	4903      	ldr	r1, [pc, #12]	; (800550c <HAL_RCC_GetPCLK2Freq+0x24>)
 80054fe:	5ccb      	ldrb	r3, [r1, r3]
 8005500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005504:	4618      	mov	r0, r3
 8005506:	bd80      	pop	{r7, pc}
 8005508:	40023800 	.word	0x40023800
 800550c:	0800946c 	.word	0x0800946c

08005510 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e041      	b.n	80055a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d106      	bne.n	800553c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f7fc fd4e 	bl	8001fd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2202      	movs	r2, #2
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	3304      	adds	r3, #4
 800554c:	4619      	mov	r1, r3
 800554e:	4610      	mov	r0, r2
 8005550:	f000 fdf6 	bl	8006140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
	...

080055b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d001      	beq.n	80055c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e04e      	b.n	8005666 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68da      	ldr	r2, [r3, #12]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f042 0201 	orr.w	r2, r2, #1
 80055de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a23      	ldr	r2, [pc, #140]	; (8005674 <HAL_TIM_Base_Start_IT+0xc4>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d022      	beq.n	8005630 <HAL_TIM_Base_Start_IT+0x80>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055f2:	d01d      	beq.n	8005630 <HAL_TIM_Base_Start_IT+0x80>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a1f      	ldr	r2, [pc, #124]	; (8005678 <HAL_TIM_Base_Start_IT+0xc8>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d018      	beq.n	8005630 <HAL_TIM_Base_Start_IT+0x80>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a1e      	ldr	r2, [pc, #120]	; (800567c <HAL_TIM_Base_Start_IT+0xcc>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d013      	beq.n	8005630 <HAL_TIM_Base_Start_IT+0x80>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a1c      	ldr	r2, [pc, #112]	; (8005680 <HAL_TIM_Base_Start_IT+0xd0>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d00e      	beq.n	8005630 <HAL_TIM_Base_Start_IT+0x80>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a1b      	ldr	r2, [pc, #108]	; (8005684 <HAL_TIM_Base_Start_IT+0xd4>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d009      	beq.n	8005630 <HAL_TIM_Base_Start_IT+0x80>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a19      	ldr	r2, [pc, #100]	; (8005688 <HAL_TIM_Base_Start_IT+0xd8>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d004      	beq.n	8005630 <HAL_TIM_Base_Start_IT+0x80>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a18      	ldr	r2, [pc, #96]	; (800568c <HAL_TIM_Base_Start_IT+0xdc>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d111      	bne.n	8005654 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f003 0307 	and.w	r3, r3, #7
 800563a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2b06      	cmp	r3, #6
 8005640:	d010      	beq.n	8005664 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f042 0201 	orr.w	r2, r2, #1
 8005650:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005652:	e007      	b.n	8005664 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f042 0201 	orr.w	r2, r2, #1
 8005662:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	40010000 	.word	0x40010000
 8005678:	40000400 	.word	0x40000400
 800567c:	40000800 	.word	0x40000800
 8005680:	40000c00 	.word	0x40000c00
 8005684:	40010400 	.word	0x40010400
 8005688:	40014000 	.word	0x40014000
 800568c:	40001800 	.word	0x40001800

08005690 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e041      	b.n	8005726 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d106      	bne.n	80056bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f7fc fc48 	bl	8001f4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2202      	movs	r2, #2
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	3304      	adds	r3, #4
 80056cc:	4619      	mov	r1, r3
 80056ce:	4610      	mov	r0, r2
 80056d0:	f000 fd36 	bl	8006140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3708      	adds	r7, #8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
	...

08005730 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d109      	bne.n	8005754 <HAL_TIM_PWM_Start+0x24>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005746:	b2db      	uxtb	r3, r3
 8005748:	2b01      	cmp	r3, #1
 800574a:	bf14      	ite	ne
 800574c:	2301      	movne	r3, #1
 800574e:	2300      	moveq	r3, #0
 8005750:	b2db      	uxtb	r3, r3
 8005752:	e022      	b.n	800579a <HAL_TIM_PWM_Start+0x6a>
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	2b04      	cmp	r3, #4
 8005758:	d109      	bne.n	800576e <HAL_TIM_PWM_Start+0x3e>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b01      	cmp	r3, #1
 8005764:	bf14      	ite	ne
 8005766:	2301      	movne	r3, #1
 8005768:	2300      	moveq	r3, #0
 800576a:	b2db      	uxtb	r3, r3
 800576c:	e015      	b.n	800579a <HAL_TIM_PWM_Start+0x6a>
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	2b08      	cmp	r3, #8
 8005772:	d109      	bne.n	8005788 <HAL_TIM_PWM_Start+0x58>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b01      	cmp	r3, #1
 800577e:	bf14      	ite	ne
 8005780:	2301      	movne	r3, #1
 8005782:	2300      	moveq	r3, #0
 8005784:	b2db      	uxtb	r3, r3
 8005786:	e008      	b.n	800579a <HAL_TIM_PWM_Start+0x6a>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800578e:	b2db      	uxtb	r3, r3
 8005790:	2b01      	cmp	r3, #1
 8005792:	bf14      	ite	ne
 8005794:	2301      	movne	r3, #1
 8005796:	2300      	moveq	r3, #0
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d001      	beq.n	80057a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e07c      	b.n	800589c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d104      	bne.n	80057b2 <HAL_TIM_PWM_Start+0x82>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057b0:	e013      	b.n	80057da <HAL_TIM_PWM_Start+0xaa>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2b04      	cmp	r3, #4
 80057b6:	d104      	bne.n	80057c2 <HAL_TIM_PWM_Start+0x92>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2202      	movs	r2, #2
 80057bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057c0:	e00b      	b.n	80057da <HAL_TIM_PWM_Start+0xaa>
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b08      	cmp	r3, #8
 80057c6:	d104      	bne.n	80057d2 <HAL_TIM_PWM_Start+0xa2>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2202      	movs	r2, #2
 80057cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057d0:	e003      	b.n	80057da <HAL_TIM_PWM_Start+0xaa>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2202      	movs	r2, #2
 80057d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2201      	movs	r2, #1
 80057e0:	6839      	ldr	r1, [r7, #0]
 80057e2:	4618      	mov	r0, r3
 80057e4:	f001 f826 	bl	8006834 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a2d      	ldr	r2, [pc, #180]	; (80058a4 <HAL_TIM_PWM_Start+0x174>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d004      	beq.n	80057fc <HAL_TIM_PWM_Start+0xcc>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a2c      	ldr	r2, [pc, #176]	; (80058a8 <HAL_TIM_PWM_Start+0x178>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d101      	bne.n	8005800 <HAL_TIM_PWM_Start+0xd0>
 80057fc:	2301      	movs	r3, #1
 80057fe:	e000      	b.n	8005802 <HAL_TIM_PWM_Start+0xd2>
 8005800:	2300      	movs	r3, #0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d007      	beq.n	8005816 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005814:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a22      	ldr	r2, [pc, #136]	; (80058a4 <HAL_TIM_PWM_Start+0x174>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d022      	beq.n	8005866 <HAL_TIM_PWM_Start+0x136>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005828:	d01d      	beq.n	8005866 <HAL_TIM_PWM_Start+0x136>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a1f      	ldr	r2, [pc, #124]	; (80058ac <HAL_TIM_PWM_Start+0x17c>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d018      	beq.n	8005866 <HAL_TIM_PWM_Start+0x136>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a1d      	ldr	r2, [pc, #116]	; (80058b0 <HAL_TIM_PWM_Start+0x180>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d013      	beq.n	8005866 <HAL_TIM_PWM_Start+0x136>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a1c      	ldr	r2, [pc, #112]	; (80058b4 <HAL_TIM_PWM_Start+0x184>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d00e      	beq.n	8005866 <HAL_TIM_PWM_Start+0x136>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a16      	ldr	r2, [pc, #88]	; (80058a8 <HAL_TIM_PWM_Start+0x178>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d009      	beq.n	8005866 <HAL_TIM_PWM_Start+0x136>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a18      	ldr	r2, [pc, #96]	; (80058b8 <HAL_TIM_PWM_Start+0x188>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d004      	beq.n	8005866 <HAL_TIM_PWM_Start+0x136>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a16      	ldr	r2, [pc, #88]	; (80058bc <HAL_TIM_PWM_Start+0x18c>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d111      	bne.n	800588a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f003 0307 	and.w	r3, r3, #7
 8005870:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2b06      	cmp	r3, #6
 8005876:	d010      	beq.n	800589a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f042 0201 	orr.w	r2, r2, #1
 8005886:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005888:	e007      	b.n	800589a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f042 0201 	orr.w	r2, r2, #1
 8005898:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3710      	adds	r7, #16
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	40010000 	.word	0x40010000
 80058a8:	40010400 	.word	0x40010400
 80058ac:	40000400 	.word	0x40000400
 80058b0:	40000800 	.word	0x40000800
 80058b4:	40000c00 	.word	0x40000c00
 80058b8:	40014000 	.word	0x40014000
 80058bc:	40001800 	.word	0x40001800

080058c0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e041      	b.n	8005956 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d106      	bne.n	80058ec <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7fc fae0 	bl	8001eac <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2202      	movs	r2, #2
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	3304      	adds	r3, #4
 80058fc:	4619      	mov	r1, r3
 80058fe:	4610      	mov	r0, r2
 8005900:	f000 fc1e 	bl	8006140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
	...

08005960 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800596a:	2300      	movs	r3, #0
 800596c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d104      	bne.n	800597e <HAL_TIM_IC_Start_IT+0x1e>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800597a:	b2db      	uxtb	r3, r3
 800597c:	e013      	b.n	80059a6 <HAL_TIM_IC_Start_IT+0x46>
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	2b04      	cmp	r3, #4
 8005982:	d104      	bne.n	800598e <HAL_TIM_IC_Start_IT+0x2e>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800598a:	b2db      	uxtb	r3, r3
 800598c:	e00b      	b.n	80059a6 <HAL_TIM_IC_Start_IT+0x46>
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	2b08      	cmp	r3, #8
 8005992:	d104      	bne.n	800599e <HAL_TIM_IC_Start_IT+0x3e>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800599a:	b2db      	uxtb	r3, r3
 800599c:	e003      	b.n	80059a6 <HAL_TIM_IC_Start_IT+0x46>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d104      	bne.n	80059b8 <HAL_TIM_IC_Start_IT+0x58>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	e013      	b.n	80059e0 <HAL_TIM_IC_Start_IT+0x80>
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	2b04      	cmp	r3, #4
 80059bc:	d104      	bne.n	80059c8 <HAL_TIM_IC_Start_IT+0x68>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	e00b      	b.n	80059e0 <HAL_TIM_IC_Start_IT+0x80>
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	2b08      	cmp	r3, #8
 80059cc:	d104      	bne.n	80059d8 <HAL_TIM_IC_Start_IT+0x78>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	e003      	b.n	80059e0 <HAL_TIM_IC_Start_IT+0x80>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80059e2:	7bbb      	ldrb	r3, [r7, #14]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d102      	bne.n	80059ee <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80059e8:	7b7b      	ldrb	r3, [r7, #13]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d001      	beq.n	80059f2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e0cc      	b.n	8005b8c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d104      	bne.n	8005a02 <HAL_TIM_IC_Start_IT+0xa2>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2202      	movs	r2, #2
 80059fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a00:	e013      	b.n	8005a2a <HAL_TIM_IC_Start_IT+0xca>
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2b04      	cmp	r3, #4
 8005a06:	d104      	bne.n	8005a12 <HAL_TIM_IC_Start_IT+0xb2>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a10:	e00b      	b.n	8005a2a <HAL_TIM_IC_Start_IT+0xca>
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b08      	cmp	r3, #8
 8005a16:	d104      	bne.n	8005a22 <HAL_TIM_IC_Start_IT+0xc2>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a20:	e003      	b.n	8005a2a <HAL_TIM_IC_Start_IT+0xca>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2202      	movs	r2, #2
 8005a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d104      	bne.n	8005a3a <HAL_TIM_IC_Start_IT+0xda>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2202      	movs	r2, #2
 8005a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a38:	e013      	b.n	8005a62 <HAL_TIM_IC_Start_IT+0x102>
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2b04      	cmp	r3, #4
 8005a3e:	d104      	bne.n	8005a4a <HAL_TIM_IC_Start_IT+0xea>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2202      	movs	r2, #2
 8005a44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a48:	e00b      	b.n	8005a62 <HAL_TIM_IC_Start_IT+0x102>
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	2b08      	cmp	r3, #8
 8005a4e:	d104      	bne.n	8005a5a <HAL_TIM_IC_Start_IT+0xfa>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2202      	movs	r2, #2
 8005a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a58:	e003      	b.n	8005a62 <HAL_TIM_IC_Start_IT+0x102>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2202      	movs	r2, #2
 8005a5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b0c      	cmp	r3, #12
 8005a66:	d841      	bhi.n	8005aec <HAL_TIM_IC_Start_IT+0x18c>
 8005a68:	a201      	add	r2, pc, #4	; (adr r2, 8005a70 <HAL_TIM_IC_Start_IT+0x110>)
 8005a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a6e:	bf00      	nop
 8005a70:	08005aa5 	.word	0x08005aa5
 8005a74:	08005aed 	.word	0x08005aed
 8005a78:	08005aed 	.word	0x08005aed
 8005a7c:	08005aed 	.word	0x08005aed
 8005a80:	08005ab7 	.word	0x08005ab7
 8005a84:	08005aed 	.word	0x08005aed
 8005a88:	08005aed 	.word	0x08005aed
 8005a8c:	08005aed 	.word	0x08005aed
 8005a90:	08005ac9 	.word	0x08005ac9
 8005a94:	08005aed 	.word	0x08005aed
 8005a98:	08005aed 	.word	0x08005aed
 8005a9c:	08005aed 	.word	0x08005aed
 8005aa0:	08005adb 	.word	0x08005adb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68da      	ldr	r2, [r3, #12]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f042 0202 	orr.w	r2, r2, #2
 8005ab2:	60da      	str	r2, [r3, #12]
      break;
 8005ab4:	e01d      	b.n	8005af2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68da      	ldr	r2, [r3, #12]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f042 0204 	orr.w	r2, r2, #4
 8005ac4:	60da      	str	r2, [r3, #12]
      break;
 8005ac6:	e014      	b.n	8005af2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68da      	ldr	r2, [r3, #12]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f042 0208 	orr.w	r2, r2, #8
 8005ad6:	60da      	str	r2, [r3, #12]
      break;
 8005ad8:	e00b      	b.n	8005af2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68da      	ldr	r2, [r3, #12]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f042 0210 	orr.w	r2, r2, #16
 8005ae8:	60da      	str	r2, [r3, #12]
      break;
 8005aea:	e002      	b.n	8005af2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	73fb      	strb	r3, [r7, #15]
      break;
 8005af0:	bf00      	nop
  }

  if (status == HAL_OK)
 8005af2:	7bfb      	ldrb	r3, [r7, #15]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d148      	bne.n	8005b8a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2201      	movs	r2, #1
 8005afe:	6839      	ldr	r1, [r7, #0]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f000 fe97 	bl	8006834 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a22      	ldr	r2, [pc, #136]	; (8005b94 <HAL_TIM_IC_Start_IT+0x234>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d022      	beq.n	8005b56 <HAL_TIM_IC_Start_IT+0x1f6>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b18:	d01d      	beq.n	8005b56 <HAL_TIM_IC_Start_IT+0x1f6>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a1e      	ldr	r2, [pc, #120]	; (8005b98 <HAL_TIM_IC_Start_IT+0x238>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d018      	beq.n	8005b56 <HAL_TIM_IC_Start_IT+0x1f6>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a1c      	ldr	r2, [pc, #112]	; (8005b9c <HAL_TIM_IC_Start_IT+0x23c>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d013      	beq.n	8005b56 <HAL_TIM_IC_Start_IT+0x1f6>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a1b      	ldr	r2, [pc, #108]	; (8005ba0 <HAL_TIM_IC_Start_IT+0x240>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d00e      	beq.n	8005b56 <HAL_TIM_IC_Start_IT+0x1f6>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a19      	ldr	r2, [pc, #100]	; (8005ba4 <HAL_TIM_IC_Start_IT+0x244>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d009      	beq.n	8005b56 <HAL_TIM_IC_Start_IT+0x1f6>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a18      	ldr	r2, [pc, #96]	; (8005ba8 <HAL_TIM_IC_Start_IT+0x248>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d004      	beq.n	8005b56 <HAL_TIM_IC_Start_IT+0x1f6>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a16      	ldr	r2, [pc, #88]	; (8005bac <HAL_TIM_IC_Start_IT+0x24c>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d111      	bne.n	8005b7a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f003 0307 	and.w	r3, r3, #7
 8005b60:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	2b06      	cmp	r3, #6
 8005b66:	d010      	beq.n	8005b8a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f042 0201 	orr.w	r2, r2, #1
 8005b76:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b78:	e007      	b.n	8005b8a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f042 0201 	orr.w	r2, r2, #1
 8005b88:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	40010000 	.word	0x40010000
 8005b98:	40000400 	.word	0x40000400
 8005b9c:	40000800 	.word	0x40000800
 8005ba0:	40000c00 	.word	0x40000c00
 8005ba4:	40010400 	.word	0x40010400
 8005ba8:	40014000 	.word	0x40014000
 8005bac:	40001800 	.word	0x40001800

08005bb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	f003 0302 	and.w	r3, r3, #2
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d122      	bne.n	8005c0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d11b      	bne.n	8005c0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f06f 0202 	mvn.w	r2, #2
 8005bdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	f003 0303 	and.w	r3, r3, #3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7fd f9e6 	bl	8002fc4 <HAL_TIM_IC_CaptureCallback>
 8005bf8:	e005      	b.n	8005c06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 fa82 	bl	8006104 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 fa89 	bl	8006118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	f003 0304 	and.w	r3, r3, #4
 8005c16:	2b04      	cmp	r3, #4
 8005c18:	d122      	bne.n	8005c60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	f003 0304 	and.w	r3, r3, #4
 8005c24:	2b04      	cmp	r3, #4
 8005c26:	d11b      	bne.n	8005c60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f06f 0204 	mvn.w	r2, #4
 8005c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2202      	movs	r2, #2
 8005c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f7fd f9bc 	bl	8002fc4 <HAL_TIM_IC_CaptureCallback>
 8005c4c:	e005      	b.n	8005c5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 fa58 	bl	8006104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 fa5f 	bl	8006118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	f003 0308 	and.w	r3, r3, #8
 8005c6a:	2b08      	cmp	r3, #8
 8005c6c:	d122      	bne.n	8005cb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	f003 0308 	and.w	r3, r3, #8
 8005c78:	2b08      	cmp	r3, #8
 8005c7a:	d11b      	bne.n	8005cb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f06f 0208 	mvn.w	r2, #8
 8005c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2204      	movs	r2, #4
 8005c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	f003 0303 	and.w	r3, r3, #3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f7fd f992 	bl	8002fc4 <HAL_TIM_IC_CaptureCallback>
 8005ca0:	e005      	b.n	8005cae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 fa2e 	bl	8006104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 fa35 	bl	8006118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	f003 0310 	and.w	r3, r3, #16
 8005cbe:	2b10      	cmp	r3, #16
 8005cc0:	d122      	bne.n	8005d08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	f003 0310 	and.w	r3, r3, #16
 8005ccc:	2b10      	cmp	r3, #16
 8005cce:	d11b      	bne.n	8005d08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f06f 0210 	mvn.w	r2, #16
 8005cd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2208      	movs	r2, #8
 8005cde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d003      	beq.n	8005cf6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f7fd f968 	bl	8002fc4 <HAL_TIM_IC_CaptureCallback>
 8005cf4:	e005      	b.n	8005d02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 fa04 	bl	8006104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 fa0b 	bl	8006118 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d10e      	bne.n	8005d34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d107      	bne.n	8005d34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f06f 0201 	mvn.w	r2, #1
 8005d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7fb fb42 	bl	80013b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d3e:	2b80      	cmp	r3, #128	; 0x80
 8005d40:	d10e      	bne.n	8005d60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d4c:	2b80      	cmp	r3, #128	; 0x80
 8005d4e:	d107      	bne.n	8005d60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 fe16 	bl	800698c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6a:	2b40      	cmp	r3, #64	; 0x40
 8005d6c:	d10e      	bne.n	8005d8c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d78:	2b40      	cmp	r3, #64	; 0x40
 8005d7a:	d107      	bne.n	8005d8c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 f9d0 	bl	800612c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	f003 0320 	and.w	r3, r3, #32
 8005d96:	2b20      	cmp	r3, #32
 8005d98:	d10e      	bne.n	8005db8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	f003 0320 	and.w	r3, r3, #32
 8005da4:	2b20      	cmp	r3, #32
 8005da6:	d107      	bne.n	8005db8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f06f 0220 	mvn.w	r2, #32
 8005db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 fde0 	bl	8006978 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005db8:	bf00      	nop
 8005dba:	3708      	adds	r7, #8
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d101      	bne.n	8005dde <HAL_TIM_IC_ConfigChannel+0x1e>
 8005dda:	2302      	movs	r3, #2
 8005ddc:	e088      	b.n	8005ef0 <HAL_TIM_IC_ConfigChannel+0x130>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d11b      	bne.n	8005e24 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6818      	ldr	r0, [r3, #0]
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	6819      	ldr	r1, [r3, #0]
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	685a      	ldr	r2, [r3, #4]
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	f000 fbf0 	bl	80065e0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	699a      	ldr	r2, [r3, #24]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f022 020c 	bic.w	r2, r2, #12
 8005e0e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6999      	ldr	r1, [r3, #24]
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	689a      	ldr	r2, [r3, #8]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	619a      	str	r2, [r3, #24]
 8005e22:	e060      	b.n	8005ee6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b04      	cmp	r3, #4
 8005e28:	d11c      	bne.n	8005e64 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6818      	ldr	r0, [r3, #0]
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	6819      	ldr	r1, [r3, #0]
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	f000 fc45 	bl	80066c8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	699a      	ldr	r2, [r3, #24]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005e4c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	6999      	ldr	r1, [r3, #24]
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	021a      	lsls	r2, r3, #8
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	619a      	str	r2, [r3, #24]
 8005e62:	e040      	b.n	8005ee6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b08      	cmp	r3, #8
 8005e68:	d11b      	bne.n	8005ea2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6818      	ldr	r0, [r3, #0]
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	6819      	ldr	r1, [r3, #0]
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	685a      	ldr	r2, [r3, #4]
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	f000 fc62 	bl	8006742 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	69da      	ldr	r2, [r3, #28]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f022 020c 	bic.w	r2, r2, #12
 8005e8c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	69d9      	ldr	r1, [r3, #28]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	689a      	ldr	r2, [r3, #8]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	61da      	str	r2, [r3, #28]
 8005ea0:	e021      	b.n	8005ee6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b0c      	cmp	r3, #12
 8005ea6:	d11c      	bne.n	8005ee2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6818      	ldr	r0, [r3, #0]
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	6819      	ldr	r1, [r3, #0]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	685a      	ldr	r2, [r3, #4]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	f000 fc7f 	bl	80067ba <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	69da      	ldr	r2, [r3, #28]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005eca:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	69d9      	ldr	r1, [r3, #28]
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	021a      	lsls	r2, r3, #8
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	430a      	orrs	r2, r1
 8005ede:	61da      	str	r2, [r3, #28]
 8005ee0:	e001      	b.n	8005ee6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005eee:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3718      	adds	r7, #24
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b086      	sub	sp, #24
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f04:	2300      	movs	r3, #0
 8005f06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d101      	bne.n	8005f16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f12:	2302      	movs	r3, #2
 8005f14:	e0ae      	b.n	8006074 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2b0c      	cmp	r3, #12
 8005f22:	f200 809f 	bhi.w	8006064 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005f26:	a201      	add	r2, pc, #4	; (adr r2, 8005f2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2c:	08005f61 	.word	0x08005f61
 8005f30:	08006065 	.word	0x08006065
 8005f34:	08006065 	.word	0x08006065
 8005f38:	08006065 	.word	0x08006065
 8005f3c:	08005fa1 	.word	0x08005fa1
 8005f40:	08006065 	.word	0x08006065
 8005f44:	08006065 	.word	0x08006065
 8005f48:	08006065 	.word	0x08006065
 8005f4c:	08005fe3 	.word	0x08005fe3
 8005f50:	08006065 	.word	0x08006065
 8005f54:	08006065 	.word	0x08006065
 8005f58:	08006065 	.word	0x08006065
 8005f5c:	08006023 	.word	0x08006023
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68b9      	ldr	r1, [r7, #8]
 8005f66:	4618      	mov	r0, r3
 8005f68:	f000 f98a 	bl	8006280 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	699a      	ldr	r2, [r3, #24]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f042 0208 	orr.w	r2, r2, #8
 8005f7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	699a      	ldr	r2, [r3, #24]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f022 0204 	bic.w	r2, r2, #4
 8005f8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6999      	ldr	r1, [r3, #24]
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	691a      	ldr	r2, [r3, #16]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	619a      	str	r2, [r3, #24]
      break;
 8005f9e:	e064      	b.n	800606a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68b9      	ldr	r1, [r7, #8]
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f000 f9da 	bl	8006360 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	699a      	ldr	r2, [r3, #24]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	699a      	ldr	r2, [r3, #24]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6999      	ldr	r1, [r3, #24]
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	021a      	lsls	r2, r3, #8
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	619a      	str	r2, [r3, #24]
      break;
 8005fe0:	e043      	b.n	800606a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68b9      	ldr	r1, [r7, #8]
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f000 fa2f 	bl	800644c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	69da      	ldr	r2, [r3, #28]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f042 0208 	orr.w	r2, r2, #8
 8005ffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	69da      	ldr	r2, [r3, #28]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f022 0204 	bic.w	r2, r2, #4
 800600c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	69d9      	ldr	r1, [r3, #28]
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	691a      	ldr	r2, [r3, #16]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	430a      	orrs	r2, r1
 800601e:	61da      	str	r2, [r3, #28]
      break;
 8006020:	e023      	b.n	800606a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68b9      	ldr	r1, [r7, #8]
 8006028:	4618      	mov	r0, r3
 800602a:	f000 fa83 	bl	8006534 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	69da      	ldr	r2, [r3, #28]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800603c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	69da      	ldr	r2, [r3, #28]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800604c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	69d9      	ldr	r1, [r3, #28]
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	021a      	lsls	r2, r3, #8
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	430a      	orrs	r2, r1
 8006060:	61da      	str	r2, [r3, #28]
      break;
 8006062:	e002      	b.n	800606a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	75fb      	strb	r3, [r7, #23]
      break;
 8006068:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006072:	7dfb      	ldrb	r3, [r7, #23]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3718      	adds	r7, #24
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006086:	2300      	movs	r3, #0
 8006088:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	2b0c      	cmp	r3, #12
 800608e:	d831      	bhi.n	80060f4 <HAL_TIM_ReadCapturedValue+0x78>
 8006090:	a201      	add	r2, pc, #4	; (adr r2, 8006098 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006096:	bf00      	nop
 8006098:	080060cd 	.word	0x080060cd
 800609c:	080060f5 	.word	0x080060f5
 80060a0:	080060f5 	.word	0x080060f5
 80060a4:	080060f5 	.word	0x080060f5
 80060a8:	080060d7 	.word	0x080060d7
 80060ac:	080060f5 	.word	0x080060f5
 80060b0:	080060f5 	.word	0x080060f5
 80060b4:	080060f5 	.word	0x080060f5
 80060b8:	080060e1 	.word	0x080060e1
 80060bc:	080060f5 	.word	0x080060f5
 80060c0:	080060f5 	.word	0x080060f5
 80060c4:	080060f5 	.word	0x080060f5
 80060c8:	080060eb 	.word	0x080060eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060d2:	60fb      	str	r3, [r7, #12]

      break;
 80060d4:	e00f      	b.n	80060f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060dc:	60fb      	str	r3, [r7, #12]

      break;
 80060de:	e00a      	b.n	80060f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e6:	60fb      	str	r3, [r7, #12]

      break;
 80060e8:	e005      	b.n	80060f6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f0:	60fb      	str	r3, [r7, #12]

      break;
 80060f2:	e000      	b.n	80060f6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80060f4:	bf00      	nop
  }

  return tmpreg;
 80060f6:	68fb      	ldr	r3, [r7, #12]
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3714      	adds	r7, #20
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800610c:	bf00      	nop
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006134:	bf00      	nop
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a40      	ldr	r2, [pc, #256]	; (8006254 <TIM_Base_SetConfig+0x114>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d013      	beq.n	8006180 <TIM_Base_SetConfig+0x40>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800615e:	d00f      	beq.n	8006180 <TIM_Base_SetConfig+0x40>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a3d      	ldr	r2, [pc, #244]	; (8006258 <TIM_Base_SetConfig+0x118>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d00b      	beq.n	8006180 <TIM_Base_SetConfig+0x40>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a3c      	ldr	r2, [pc, #240]	; (800625c <TIM_Base_SetConfig+0x11c>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d007      	beq.n	8006180 <TIM_Base_SetConfig+0x40>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a3b      	ldr	r2, [pc, #236]	; (8006260 <TIM_Base_SetConfig+0x120>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d003      	beq.n	8006180 <TIM_Base_SetConfig+0x40>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a3a      	ldr	r2, [pc, #232]	; (8006264 <TIM_Base_SetConfig+0x124>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d108      	bne.n	8006192 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006186:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	4313      	orrs	r3, r2
 8006190:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a2f      	ldr	r2, [pc, #188]	; (8006254 <TIM_Base_SetConfig+0x114>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d02b      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061a0:	d027      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a2c      	ldr	r2, [pc, #176]	; (8006258 <TIM_Base_SetConfig+0x118>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d023      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a2b      	ldr	r2, [pc, #172]	; (800625c <TIM_Base_SetConfig+0x11c>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d01f      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a2a      	ldr	r2, [pc, #168]	; (8006260 <TIM_Base_SetConfig+0x120>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d01b      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a29      	ldr	r2, [pc, #164]	; (8006264 <TIM_Base_SetConfig+0x124>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d017      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a28      	ldr	r2, [pc, #160]	; (8006268 <TIM_Base_SetConfig+0x128>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d013      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a27      	ldr	r2, [pc, #156]	; (800626c <TIM_Base_SetConfig+0x12c>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d00f      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a26      	ldr	r2, [pc, #152]	; (8006270 <TIM_Base_SetConfig+0x130>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d00b      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a25      	ldr	r2, [pc, #148]	; (8006274 <TIM_Base_SetConfig+0x134>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d007      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a24      	ldr	r2, [pc, #144]	; (8006278 <TIM_Base_SetConfig+0x138>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d003      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a23      	ldr	r2, [pc, #140]	; (800627c <TIM_Base_SetConfig+0x13c>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d108      	bne.n	8006204 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	4313      	orrs	r3, r2
 8006202:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	4313      	orrs	r3, r2
 8006210:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	689a      	ldr	r2, [r3, #8]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a0a      	ldr	r2, [pc, #40]	; (8006254 <TIM_Base_SetConfig+0x114>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d003      	beq.n	8006238 <TIM_Base_SetConfig+0xf8>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a0c      	ldr	r2, [pc, #48]	; (8006264 <TIM_Base_SetConfig+0x124>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d103      	bne.n	8006240 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	691a      	ldr	r2, [r3, #16]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	615a      	str	r2, [r3, #20]
}
 8006246:	bf00      	nop
 8006248:	3714      	adds	r7, #20
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	40010000 	.word	0x40010000
 8006258:	40000400 	.word	0x40000400
 800625c:	40000800 	.word	0x40000800
 8006260:	40000c00 	.word	0x40000c00
 8006264:	40010400 	.word	0x40010400
 8006268:	40014000 	.word	0x40014000
 800626c:	40014400 	.word	0x40014400
 8006270:	40014800 	.word	0x40014800
 8006274:	40001800 	.word	0x40001800
 8006278:	40001c00 	.word	0x40001c00
 800627c:	40002000 	.word	0x40002000

08006280 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006280:	b480      	push	{r7}
 8006282:	b087      	sub	sp, #28
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	f023 0201 	bic.w	r2, r3, #1
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f023 0303 	bic.w	r3, r3, #3
 80062b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	4313      	orrs	r3, r2
 80062c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	f023 0302 	bic.w	r3, r3, #2
 80062c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a20      	ldr	r2, [pc, #128]	; (8006358 <TIM_OC1_SetConfig+0xd8>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d003      	beq.n	80062e4 <TIM_OC1_SetConfig+0x64>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a1f      	ldr	r2, [pc, #124]	; (800635c <TIM_OC1_SetConfig+0xdc>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d10c      	bne.n	80062fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	f023 0308 	bic.w	r3, r3, #8
 80062ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f023 0304 	bic.w	r3, r3, #4
 80062fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a15      	ldr	r2, [pc, #84]	; (8006358 <TIM_OC1_SetConfig+0xd8>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d003      	beq.n	800630e <TIM_OC1_SetConfig+0x8e>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a14      	ldr	r2, [pc, #80]	; (800635c <TIM_OC1_SetConfig+0xdc>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d111      	bne.n	8006332 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006314:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800631c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	4313      	orrs	r3, r2
 8006326:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	4313      	orrs	r3, r2
 8006330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	621a      	str	r2, [r3, #32]
}
 800634c:	bf00      	nop
 800634e:	371c      	adds	r7, #28
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr
 8006358:	40010000 	.word	0x40010000
 800635c:	40010400 	.word	0x40010400

08006360 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006360:	b480      	push	{r7}
 8006362:	b087      	sub	sp, #28
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	f023 0210 	bic.w	r2, r3, #16
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800638e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006396:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	021b      	lsls	r3, r3, #8
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	f023 0320 	bic.w	r3, r3, #32
 80063aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	011b      	lsls	r3, r3, #4
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a22      	ldr	r2, [pc, #136]	; (8006444 <TIM_OC2_SetConfig+0xe4>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d003      	beq.n	80063c8 <TIM_OC2_SetConfig+0x68>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a21      	ldr	r2, [pc, #132]	; (8006448 <TIM_OC2_SetConfig+0xe8>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d10d      	bne.n	80063e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	011b      	lsls	r3, r3, #4
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	4313      	orrs	r3, r2
 80063da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a17      	ldr	r2, [pc, #92]	; (8006444 <TIM_OC2_SetConfig+0xe4>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d003      	beq.n	80063f4 <TIM_OC2_SetConfig+0x94>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a16      	ldr	r2, [pc, #88]	; (8006448 <TIM_OC2_SetConfig+0xe8>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d113      	bne.n	800641c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006402:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	695b      	ldr	r3, [r3, #20]
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	4313      	orrs	r3, r2
 800640e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	4313      	orrs	r3, r2
 800641a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	621a      	str	r2, [r3, #32]
}
 8006436:	bf00      	nop
 8006438:	371c      	adds	r7, #28
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	40010000 	.word	0x40010000
 8006448:	40010400 	.word	0x40010400

0800644c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800644c:	b480      	push	{r7}
 800644e:	b087      	sub	sp, #28
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	69db      	ldr	r3, [r3, #28]
 8006472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800647a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f023 0303 	bic.w	r3, r3, #3
 8006482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	4313      	orrs	r3, r2
 800648c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006494:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	021b      	lsls	r3, r3, #8
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	4313      	orrs	r3, r2
 80064a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a21      	ldr	r2, [pc, #132]	; (800652c <TIM_OC3_SetConfig+0xe0>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d003      	beq.n	80064b2 <TIM_OC3_SetConfig+0x66>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a20      	ldr	r2, [pc, #128]	; (8006530 <TIM_OC3_SetConfig+0xe4>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d10d      	bne.n	80064ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	021b      	lsls	r3, r3, #8
 80064c0:	697a      	ldr	r2, [r7, #20]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a16      	ldr	r2, [pc, #88]	; (800652c <TIM_OC3_SetConfig+0xe0>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d003      	beq.n	80064de <TIM_OC3_SetConfig+0x92>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a15      	ldr	r2, [pc, #84]	; (8006530 <TIM_OC3_SetConfig+0xe4>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d113      	bne.n	8006506 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	011b      	lsls	r3, r3, #4
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	011b      	lsls	r3, r3, #4
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	4313      	orrs	r3, r2
 8006504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	685a      	ldr	r2, [r3, #4]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	621a      	str	r2, [r3, #32]
}
 8006520:	bf00      	nop
 8006522:	371c      	adds	r7, #28
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	40010000 	.word	0x40010000
 8006530:	40010400 	.word	0x40010400

08006534 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006534:	b480      	push	{r7}
 8006536:	b087      	sub	sp, #28
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a1b      	ldr	r3, [r3, #32]
 800654e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	69db      	ldr	r3, [r3, #28]
 800655a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800656a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	021b      	lsls	r3, r3, #8
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	4313      	orrs	r3, r2
 8006576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800657e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	031b      	lsls	r3, r3, #12
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	4313      	orrs	r3, r2
 800658a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a12      	ldr	r2, [pc, #72]	; (80065d8 <TIM_OC4_SetConfig+0xa4>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d003      	beq.n	800659c <TIM_OC4_SetConfig+0x68>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a11      	ldr	r2, [pc, #68]	; (80065dc <TIM_OC4_SetConfig+0xa8>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d109      	bne.n	80065b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	695b      	ldr	r3, [r3, #20]
 80065a8:	019b      	lsls	r3, r3, #6
 80065aa:	697a      	ldr	r2, [r7, #20]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	685a      	ldr	r2, [r3, #4]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	621a      	str	r2, [r3, #32]
}
 80065ca:	bf00      	nop
 80065cc:	371c      	adds	r7, #28
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	40010000 	.word	0x40010000
 80065dc:	40010400 	.word	0x40010400

080065e0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b087      	sub	sp, #28
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
 80065ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	f023 0201 	bic.w	r2, r3, #1
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	699b      	ldr	r3, [r3, #24]
 80065fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6a1b      	ldr	r3, [r3, #32]
 8006604:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	4a28      	ldr	r2, [pc, #160]	; (80066ac <TIM_TI1_SetConfig+0xcc>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d01b      	beq.n	8006646 <TIM_TI1_SetConfig+0x66>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006614:	d017      	beq.n	8006646 <TIM_TI1_SetConfig+0x66>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	4a25      	ldr	r2, [pc, #148]	; (80066b0 <TIM_TI1_SetConfig+0xd0>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d013      	beq.n	8006646 <TIM_TI1_SetConfig+0x66>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	4a24      	ldr	r2, [pc, #144]	; (80066b4 <TIM_TI1_SetConfig+0xd4>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d00f      	beq.n	8006646 <TIM_TI1_SetConfig+0x66>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	4a23      	ldr	r2, [pc, #140]	; (80066b8 <TIM_TI1_SetConfig+0xd8>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d00b      	beq.n	8006646 <TIM_TI1_SetConfig+0x66>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	4a22      	ldr	r2, [pc, #136]	; (80066bc <TIM_TI1_SetConfig+0xdc>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d007      	beq.n	8006646 <TIM_TI1_SetConfig+0x66>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	4a21      	ldr	r2, [pc, #132]	; (80066c0 <TIM_TI1_SetConfig+0xe0>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d003      	beq.n	8006646 <TIM_TI1_SetConfig+0x66>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	4a20      	ldr	r2, [pc, #128]	; (80066c4 <TIM_TI1_SetConfig+0xe4>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d101      	bne.n	800664a <TIM_TI1_SetConfig+0x6a>
 8006646:	2301      	movs	r3, #1
 8006648:	e000      	b.n	800664c <TIM_TI1_SetConfig+0x6c>
 800664a:	2300      	movs	r3, #0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d008      	beq.n	8006662 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	f023 0303 	bic.w	r3, r3, #3
 8006656:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4313      	orrs	r3, r2
 800665e:	617b      	str	r3, [r7, #20]
 8006660:	e003      	b.n	800666a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f043 0301 	orr.w	r3, r3, #1
 8006668:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006670:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	011b      	lsls	r3, r3, #4
 8006676:	b2db      	uxtb	r3, r3
 8006678:	697a      	ldr	r2, [r7, #20]
 800667a:	4313      	orrs	r3, r2
 800667c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	f023 030a 	bic.w	r3, r3, #10
 8006684:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	f003 030a 	and.w	r3, r3, #10
 800668c:	693a      	ldr	r2, [r7, #16]
 800668e:	4313      	orrs	r3, r2
 8006690:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	621a      	str	r2, [r3, #32]
}
 800669e:	bf00      	nop
 80066a0:	371c      	adds	r7, #28
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	40010000 	.word	0x40010000
 80066b0:	40000400 	.word	0x40000400
 80066b4:	40000800 	.word	0x40000800
 80066b8:	40000c00 	.word	0x40000c00
 80066bc:	40010400 	.word	0x40010400
 80066c0:	40014000 	.word	0x40014000
 80066c4:	40001800 	.word	0x40001800

080066c8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b087      	sub	sp, #28
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	607a      	str	r2, [r7, #4]
 80066d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	f023 0210 	bic.w	r2, r3, #16
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6a1b      	ldr	r3, [r3, #32]
 80066ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	021b      	lsls	r3, r3, #8
 80066fa:	697a      	ldr	r2, [r7, #20]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006706:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	031b      	lsls	r3, r3, #12
 800670c:	b29b      	uxth	r3, r3
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	4313      	orrs	r3, r2
 8006712:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800671a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	011b      	lsls	r3, r3, #4
 8006720:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	4313      	orrs	r3, r2
 8006728:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	697a      	ldr	r2, [r7, #20]
 800672e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	693a      	ldr	r2, [r7, #16]
 8006734:	621a      	str	r2, [r3, #32]
}
 8006736:	bf00      	nop
 8006738:	371c      	adds	r7, #28
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006742:	b480      	push	{r7}
 8006744:	b087      	sub	sp, #28
 8006746:	af00      	add	r7, sp, #0
 8006748:	60f8      	str	r0, [r7, #12]
 800674a:	60b9      	str	r1, [r7, #8]
 800674c:	607a      	str	r2, [r7, #4]
 800674e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	69db      	ldr	r3, [r3, #28]
 8006760:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6a1b      	ldr	r3, [r3, #32]
 8006766:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	f023 0303 	bic.w	r3, r3, #3
 800676e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4313      	orrs	r3, r2
 8006776:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800677e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	011b      	lsls	r3, r3, #4
 8006784:	b2db      	uxtb	r3, r3
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	4313      	orrs	r3, r2
 800678a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006792:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	021b      	lsls	r3, r3, #8
 8006798:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	4313      	orrs	r3, r2
 80067a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	697a      	ldr	r2, [r7, #20]
 80067a6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	621a      	str	r2, [r3, #32]
}
 80067ae:	bf00      	nop
 80067b0:	371c      	adds	r7, #28
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr

080067ba <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80067ba:	b480      	push	{r7}
 80067bc:	b087      	sub	sp, #28
 80067be:	af00      	add	r7, sp, #0
 80067c0:	60f8      	str	r0, [r7, #12]
 80067c2:	60b9      	str	r1, [r7, #8]
 80067c4:	607a      	str	r2, [r7, #4]
 80067c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6a1b      	ldr	r3, [r3, #32]
 80067cc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	69db      	ldr	r3, [r3, #28]
 80067d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067e6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	021b      	lsls	r3, r3, #8
 80067ec:	697a      	ldr	r2, [r7, #20]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	031b      	lsls	r3, r3, #12
 80067fe:	b29b      	uxth	r3, r3
 8006800:	697a      	ldr	r2, [r7, #20]
 8006802:	4313      	orrs	r3, r2
 8006804:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800680c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	031b      	lsls	r3, r3, #12
 8006812:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	4313      	orrs	r3, r2
 800681a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	621a      	str	r2, [r3, #32]
}
 8006828:	bf00      	nop
 800682a:	371c      	adds	r7, #28
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006834:	b480      	push	{r7}
 8006836:	b087      	sub	sp, #28
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	f003 031f 	and.w	r3, r3, #31
 8006846:	2201      	movs	r2, #1
 8006848:	fa02 f303 	lsl.w	r3, r2, r3
 800684c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6a1a      	ldr	r2, [r3, #32]
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	43db      	mvns	r3, r3
 8006856:	401a      	ands	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6a1a      	ldr	r2, [r3, #32]
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	f003 031f 	and.w	r3, r3, #31
 8006866:	6879      	ldr	r1, [r7, #4]
 8006868:	fa01 f303 	lsl.w	r3, r1, r3
 800686c:	431a      	orrs	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	621a      	str	r2, [r3, #32]
}
 8006872:	bf00      	nop
 8006874:	371c      	adds	r7, #28
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
	...

08006880 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006890:	2b01      	cmp	r3, #1
 8006892:	d101      	bne.n	8006898 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006894:	2302      	movs	r3, #2
 8006896:	e05a      	b.n	800694e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2202      	movs	r2, #2
 80068a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a21      	ldr	r2, [pc, #132]	; (800695c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d022      	beq.n	8006922 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068e4:	d01d      	beq.n	8006922 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a1d      	ldr	r2, [pc, #116]	; (8006960 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d018      	beq.n	8006922 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a1b      	ldr	r2, [pc, #108]	; (8006964 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d013      	beq.n	8006922 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a1a      	ldr	r2, [pc, #104]	; (8006968 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d00e      	beq.n	8006922 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a18      	ldr	r2, [pc, #96]	; (800696c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d009      	beq.n	8006922 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a17      	ldr	r2, [pc, #92]	; (8006970 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d004      	beq.n	8006922 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a15      	ldr	r2, [pc, #84]	; (8006974 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d10c      	bne.n	800693c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006928:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	4313      	orrs	r3, r2
 8006932:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68ba      	ldr	r2, [r7, #8]
 800693a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3714      	adds	r7, #20
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	40010000 	.word	0x40010000
 8006960:	40000400 	.word	0x40000400
 8006964:	40000800 	.word	0x40000800
 8006968:	40000c00 	.word	0x40000c00
 800696c:	40010400 	.word	0x40010400
 8006970:	40014000 	.word	0x40014000
 8006974:	40001800 	.word	0x40001800

08006978 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006994:	bf00      	nop
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d101      	bne.n	80069b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e03f      	b.n	8006a32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d106      	bne.n	80069cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7fb fbae 	bl	8002128 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2224      	movs	r2, #36	; 0x24
 80069d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68da      	ldr	r2, [r3, #12]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 fd7b 	bl	80074e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	691a      	ldr	r2, [r3, #16]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	695a      	ldr	r2, [r3, #20]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68da      	ldr	r2, [r3, #12]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2220      	movs	r2, #32
 8006a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2220      	movs	r2, #32
 8006a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3708      	adds	r7, #8
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a3a:	b580      	push	{r7, lr}
 8006a3c:	b08a      	sub	sp, #40	; 0x28
 8006a3e:	af02      	add	r7, sp, #8
 8006a40:	60f8      	str	r0, [r7, #12]
 8006a42:	60b9      	str	r1, [r7, #8]
 8006a44:	603b      	str	r3, [r7, #0]
 8006a46:	4613      	mov	r3, r2
 8006a48:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	2b20      	cmp	r3, #32
 8006a58:	d17c      	bne.n	8006b54 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d002      	beq.n	8006a66 <HAL_UART_Transmit+0x2c>
 8006a60:	88fb      	ldrh	r3, [r7, #6]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d101      	bne.n	8006a6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e075      	b.n	8006b56 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d101      	bne.n	8006a78 <HAL_UART_Transmit+0x3e>
 8006a74:	2302      	movs	r3, #2
 8006a76:	e06e      	b.n	8006b56 <HAL_UART_Transmit+0x11c>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2221      	movs	r2, #33	; 0x21
 8006a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a8e:	f7fc fbe9 	bl	8003264 <HAL_GetTick>
 8006a92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	88fa      	ldrh	r2, [r7, #6]
 8006a98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	88fa      	ldrh	r2, [r7, #6]
 8006a9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aa8:	d108      	bne.n	8006abc <HAL_UART_Transmit+0x82>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d104      	bne.n	8006abc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	61bb      	str	r3, [r7, #24]
 8006aba:	e003      	b.n	8006ac4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006acc:	e02a      	b.n	8006b24 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	9300      	str	r3, [sp, #0]
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	2180      	movs	r1, #128	; 0x80
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f000 faf9 	bl	80070d0 <UART_WaitOnFlagUntilTimeout>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d001      	beq.n	8006ae8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	e036      	b.n	8006b56 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d10b      	bne.n	8006b06 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	881b      	ldrh	r3, [r3, #0]
 8006af2:	461a      	mov	r2, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006afc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	3302      	adds	r3, #2
 8006b02:	61bb      	str	r3, [r7, #24]
 8006b04:	e007      	b.n	8006b16 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	781a      	ldrb	r2, [r3, #0]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	3301      	adds	r3, #1
 8006b14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1cf      	bne.n	8006ace <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	2200      	movs	r2, #0
 8006b36:	2140      	movs	r1, #64	; 0x40
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 fac9 	bl	80070d0 <UART_WaitOnFlagUntilTimeout>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d001      	beq.n	8006b48 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006b44:	2303      	movs	r3, #3
 8006b46:	e006      	b.n	8006b56 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2220      	movs	r2, #32
 8006b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006b50:	2300      	movs	r3, #0
 8006b52:	e000      	b.n	8006b56 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006b54:	2302      	movs	r3, #2
  }
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3720      	adds	r7, #32
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
	...

08006b60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b0ba      	sub	sp, #232	; 0xe8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006b86:	2300      	movs	r3, #0
 8006b88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b96:	f003 030f 	and.w	r3, r3, #15
 8006b9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006b9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d10f      	bne.n	8006bc6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006baa:	f003 0320 	and.w	r3, r3, #32
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d009      	beq.n	8006bc6 <HAL_UART_IRQHandler+0x66>
 8006bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bb6:	f003 0320 	and.w	r3, r3, #32
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d003      	beq.n	8006bc6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 fbd3 	bl	800736a <UART_Receive_IT>
      return;
 8006bc4:	e256      	b.n	8007074 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006bc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f000 80de 	beq.w	8006d8c <HAL_UART_IRQHandler+0x22c>
 8006bd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bd4:	f003 0301 	and.w	r3, r3, #1
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d106      	bne.n	8006bea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006be0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 80d1 	beq.w	8006d8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bee:	f003 0301 	and.w	r3, r3, #1
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00b      	beq.n	8006c0e <HAL_UART_IRQHandler+0xae>
 8006bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d005      	beq.n	8006c0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c06:	f043 0201 	orr.w	r2, r3, #1
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c12:	f003 0304 	and.w	r3, r3, #4
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00b      	beq.n	8006c32 <HAL_UART_IRQHandler+0xd2>
 8006c1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d005      	beq.n	8006c32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2a:	f043 0202 	orr.w	r2, r3, #2
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c36:	f003 0302 	and.w	r3, r3, #2
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00b      	beq.n	8006c56 <HAL_UART_IRQHandler+0xf6>
 8006c3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c42:	f003 0301 	and.w	r3, r3, #1
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d005      	beq.n	8006c56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4e:	f043 0204 	orr.w	r2, r3, #4
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c5a:	f003 0308 	and.w	r3, r3, #8
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d011      	beq.n	8006c86 <HAL_UART_IRQHandler+0x126>
 8006c62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c66:	f003 0320 	and.w	r3, r3, #32
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d105      	bne.n	8006c7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006c6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d005      	beq.n	8006c86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7e:	f043 0208 	orr.w	r2, r3, #8
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	f000 81ed 	beq.w	800706a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c94:	f003 0320 	and.w	r3, r3, #32
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d008      	beq.n	8006cae <HAL_UART_IRQHandler+0x14e>
 8006c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ca0:	f003 0320 	and.w	r3, r3, #32
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d002      	beq.n	8006cae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fb5e 	bl	800736a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	695b      	ldr	r3, [r3, #20]
 8006cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cb8:	2b40      	cmp	r3, #64	; 0x40
 8006cba:	bf0c      	ite	eq
 8006cbc:	2301      	moveq	r3, #1
 8006cbe:	2300      	movne	r3, #0
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cca:	f003 0308 	and.w	r3, r3, #8
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d103      	bne.n	8006cda <HAL_UART_IRQHandler+0x17a>
 8006cd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d04f      	beq.n	8006d7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 fa66 	bl	80071ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cea:	2b40      	cmp	r3, #64	; 0x40
 8006cec:	d141      	bne.n	8006d72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	3314      	adds	r3, #20
 8006cf4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006cfc:	e853 3f00 	ldrex	r3, [r3]
 8006d00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006d04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	3314      	adds	r3, #20
 8006d16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006d1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006d26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006d2a:	e841 2300 	strex	r3, r2, [r1]
 8006d2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006d32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1d9      	bne.n	8006cee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d013      	beq.n	8006d6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d46:	4a7d      	ldr	r2, [pc, #500]	; (8006f3c <HAL_UART_IRQHandler+0x3dc>)
 8006d48:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7fc fc39 	bl	80035c6 <HAL_DMA_Abort_IT>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d016      	beq.n	8006d88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006d64:	4610      	mov	r0, r2
 8006d66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d68:	e00e      	b.n	8006d88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 f99a 	bl	80070a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d70:	e00a      	b.n	8006d88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f996 	bl	80070a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d78:	e006      	b.n	8006d88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f992 	bl	80070a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006d86:	e170      	b.n	800706a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d88:	bf00      	nop
    return;
 8006d8a:	e16e      	b.n	800706a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	f040 814a 	bne.w	800702a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d9a:	f003 0310 	and.w	r3, r3, #16
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	f000 8143 	beq.w	800702a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006da8:	f003 0310 	and.w	r3, r3, #16
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f000 813c 	beq.w	800702a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006db2:	2300      	movs	r3, #0
 8006db4:	60bb      	str	r3, [r7, #8]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	60bb      	str	r3, [r7, #8]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	60bb      	str	r3, [r7, #8]
 8006dc6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd2:	2b40      	cmp	r3, #64	; 0x40
 8006dd4:	f040 80b4 	bne.w	8006f40 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006de4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f000 8140 	beq.w	800706e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006df2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006df6:	429a      	cmp	r2, r3
 8006df8:	f080 8139 	bcs.w	800706e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e02:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e08:	69db      	ldr	r3, [r3, #28]
 8006e0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e0e:	f000 8088 	beq.w	8006f22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	330c      	adds	r3, #12
 8006e18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e20:	e853 3f00 	ldrex	r3, [r3]
 8006e24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006e28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	330c      	adds	r3, #12
 8006e3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006e3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006e42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006e4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e4e:	e841 2300 	strex	r3, r2, [r1]
 8006e52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006e56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1d9      	bne.n	8006e12 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	3314      	adds	r3, #20
 8006e64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e68:	e853 3f00 	ldrex	r3, [r3]
 8006e6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006e6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e70:	f023 0301 	bic.w	r3, r3, #1
 8006e74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	3314      	adds	r3, #20
 8006e7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006e82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006e86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006e8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006e8e:	e841 2300 	strex	r3, r2, [r1]
 8006e92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006e94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1e1      	bne.n	8006e5e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	3314      	adds	r3, #20
 8006ea0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ea4:	e853 3f00 	ldrex	r3, [r3]
 8006ea8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006eaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006eac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	3314      	adds	r3, #20
 8006eba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006ebe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ec0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ec4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ec6:	e841 2300 	strex	r3, r2, [r1]
 8006eca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006ecc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d1e3      	bne.n	8006e9a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2220      	movs	r2, #32
 8006ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	330c      	adds	r3, #12
 8006ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eea:	e853 3f00 	ldrex	r3, [r3]
 8006eee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006ef0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ef2:	f023 0310 	bic.w	r3, r3, #16
 8006ef6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	330c      	adds	r3, #12
 8006f00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006f04:	65ba      	str	r2, [r7, #88]	; 0x58
 8006f06:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f0c:	e841 2300 	strex	r3, r2, [r1]
 8006f10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1e3      	bne.n	8006ee0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f7fc fae2 	bl	80034e6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	4619      	mov	r1, r3
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 f8c0 	bl	80070b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f38:	e099      	b.n	800706e <HAL_UART_IRQHandler+0x50e>
 8006f3a:	bf00      	nop
 8006f3c:	08007273 	.word	0x08007273
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f000 808b 	beq.w	8007072 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006f5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f000 8086 	beq.w	8007072 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	330c      	adds	r3, #12
 8006f6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f70:	e853 3f00 	ldrex	r3, [r3]
 8006f74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	330c      	adds	r3, #12
 8006f86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006f8a:	647a      	str	r2, [r7, #68]	; 0x44
 8006f8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f92:	e841 2300 	strex	r3, r2, [r1]
 8006f96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1e3      	bne.n	8006f66 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	3314      	adds	r3, #20
 8006fa4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa8:	e853 3f00 	ldrex	r3, [r3]
 8006fac:	623b      	str	r3, [r7, #32]
   return(result);
 8006fae:	6a3b      	ldr	r3, [r7, #32]
 8006fb0:	f023 0301 	bic.w	r3, r3, #1
 8006fb4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	3314      	adds	r3, #20
 8006fbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006fc2:	633a      	str	r2, [r7, #48]	; 0x30
 8006fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fca:	e841 2300 	strex	r3, r2, [r1]
 8006fce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1e3      	bne.n	8006f9e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2220      	movs	r2, #32
 8006fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	330c      	adds	r3, #12
 8006fea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	e853 3f00 	ldrex	r3, [r3]
 8006ff2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f023 0310 	bic.w	r3, r3, #16
 8006ffa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	330c      	adds	r3, #12
 8007004:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007008:	61fa      	str	r2, [r7, #28]
 800700a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700c:	69b9      	ldr	r1, [r7, #24]
 800700e:	69fa      	ldr	r2, [r7, #28]
 8007010:	e841 2300 	strex	r3, r2, [r1]
 8007014:	617b      	str	r3, [r7, #20]
   return(result);
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d1e3      	bne.n	8006fe4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800701c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007020:	4619      	mov	r1, r3
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 f848 	bl	80070b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007028:	e023      	b.n	8007072 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800702a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800702e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007032:	2b00      	cmp	r3, #0
 8007034:	d009      	beq.n	800704a <HAL_UART_IRQHandler+0x4ea>
 8007036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800703a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800703e:	2b00      	cmp	r3, #0
 8007040:	d003      	beq.n	800704a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f929 	bl	800729a <UART_Transmit_IT>
    return;
 8007048:	e014      	b.n	8007074 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800704a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800704e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00e      	beq.n	8007074 <HAL_UART_IRQHandler+0x514>
 8007056:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800705a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800705e:	2b00      	cmp	r3, #0
 8007060:	d008      	beq.n	8007074 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 f969 	bl	800733a <UART_EndTransmit_IT>
    return;
 8007068:	e004      	b.n	8007074 <HAL_UART_IRQHandler+0x514>
    return;
 800706a:	bf00      	nop
 800706c:	e002      	b.n	8007074 <HAL_UART_IRQHandler+0x514>
      return;
 800706e:	bf00      	nop
 8007070:	e000      	b.n	8007074 <HAL_UART_IRQHandler+0x514>
      return;
 8007072:	bf00      	nop
  }
}
 8007074:	37e8      	adds	r7, #232	; 0xe8
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop

0800707c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007084:	bf00      	nop
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007098:	bf00      	nop
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	460b      	mov	r3, r1
 80070c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80070c4:	bf00      	nop
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b090      	sub	sp, #64	; 0x40
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	603b      	str	r3, [r7, #0]
 80070dc:	4613      	mov	r3, r2
 80070de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070e0:	e050      	b.n	8007184 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e8:	d04c      	beq.n	8007184 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80070ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d007      	beq.n	8007100 <UART_WaitOnFlagUntilTimeout+0x30>
 80070f0:	f7fc f8b8 	bl	8003264 <HAL_GetTick>
 80070f4:	4602      	mov	r2, r0
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d241      	bcs.n	8007184 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	330c      	adds	r3, #12
 8007106:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710a:	e853 3f00 	ldrex	r3, [r3]
 800710e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007112:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007116:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	330c      	adds	r3, #12
 800711e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007120:	637a      	str	r2, [r7, #52]	; 0x34
 8007122:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007124:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007126:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007128:	e841 2300 	strex	r3, r2, [r1]
 800712c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800712e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007130:	2b00      	cmp	r3, #0
 8007132:	d1e5      	bne.n	8007100 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	3314      	adds	r3, #20
 800713a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	e853 3f00 	ldrex	r3, [r3]
 8007142:	613b      	str	r3, [r7, #16]
   return(result);
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	f023 0301 	bic.w	r3, r3, #1
 800714a:	63bb      	str	r3, [r7, #56]	; 0x38
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	3314      	adds	r3, #20
 8007152:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007154:	623a      	str	r2, [r7, #32]
 8007156:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007158:	69f9      	ldr	r1, [r7, #28]
 800715a:	6a3a      	ldr	r2, [r7, #32]
 800715c:	e841 2300 	strex	r3, r2, [r1]
 8007160:	61bb      	str	r3, [r7, #24]
   return(result);
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d1e5      	bne.n	8007134 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2220      	movs	r2, #32
 800716c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2220      	movs	r2, #32
 8007174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e00f      	b.n	80071a4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	4013      	ands	r3, r2
 800718e:	68ba      	ldr	r2, [r7, #8]
 8007190:	429a      	cmp	r2, r3
 8007192:	bf0c      	ite	eq
 8007194:	2301      	moveq	r3, #1
 8007196:	2300      	movne	r3, #0
 8007198:	b2db      	uxtb	r3, r3
 800719a:	461a      	mov	r2, r3
 800719c:	79fb      	ldrb	r3, [r7, #7]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d09f      	beq.n	80070e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3740      	adds	r7, #64	; 0x40
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b095      	sub	sp, #84	; 0x54
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	330c      	adds	r3, #12
 80071ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071be:	e853 3f00 	ldrex	r3, [r3]
 80071c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80071c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	330c      	adds	r3, #12
 80071d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80071d4:	643a      	str	r2, [r7, #64]	; 0x40
 80071d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80071da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80071dc:	e841 2300 	strex	r3, r2, [r1]
 80071e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1e5      	bne.n	80071b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	3314      	adds	r3, #20
 80071ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f0:	6a3b      	ldr	r3, [r7, #32]
 80071f2:	e853 3f00 	ldrex	r3, [r3]
 80071f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	f023 0301 	bic.w	r3, r3, #1
 80071fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	3314      	adds	r3, #20
 8007206:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007208:	62fa      	str	r2, [r7, #44]	; 0x2c
 800720a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800720e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007210:	e841 2300 	strex	r3, r2, [r1]
 8007214:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	2b00      	cmp	r3, #0
 800721a:	d1e5      	bne.n	80071e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007220:	2b01      	cmp	r3, #1
 8007222:	d119      	bne.n	8007258 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	330c      	adds	r3, #12
 800722a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	e853 3f00 	ldrex	r3, [r3]
 8007232:	60bb      	str	r3, [r7, #8]
   return(result);
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	f023 0310 	bic.w	r3, r3, #16
 800723a:	647b      	str	r3, [r7, #68]	; 0x44
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	330c      	adds	r3, #12
 8007242:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007244:	61ba      	str	r2, [r7, #24]
 8007246:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007248:	6979      	ldr	r1, [r7, #20]
 800724a:	69ba      	ldr	r2, [r7, #24]
 800724c:	e841 2300 	strex	r3, r2, [r1]
 8007250:	613b      	str	r3, [r7, #16]
   return(result);
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d1e5      	bne.n	8007224 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2220      	movs	r2, #32
 800725c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007266:	bf00      	nop
 8007268:	3754      	adds	r7, #84	; 0x54
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr

08007272 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b084      	sub	sp, #16
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800727e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2200      	movs	r2, #0
 8007284:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f7ff ff09 	bl	80070a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007292:	bf00      	nop
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800729a:	b480      	push	{r7}
 800729c:	b085      	sub	sp, #20
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	2b21      	cmp	r3, #33	; 0x21
 80072ac:	d13e      	bne.n	800732c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072b6:	d114      	bne.n	80072e2 <UART_Transmit_IT+0x48>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d110      	bne.n	80072e2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6a1b      	ldr	r3, [r3, #32]
 80072c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	881b      	ldrh	r3, [r3, #0]
 80072ca:	461a      	mov	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a1b      	ldr	r3, [r3, #32]
 80072da:	1c9a      	adds	r2, r3, #2
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	621a      	str	r2, [r3, #32]
 80072e0:	e008      	b.n	80072f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a1b      	ldr	r3, [r3, #32]
 80072e6:	1c59      	adds	r1, r3, #1
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	6211      	str	r1, [r2, #32]
 80072ec:	781a      	ldrb	r2, [r3, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	3b01      	subs	r3, #1
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	4619      	mov	r1, r3
 8007302:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007304:	2b00      	cmp	r3, #0
 8007306:	d10f      	bne.n	8007328 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	68da      	ldr	r2, [r3, #12]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007316:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	68da      	ldr	r2, [r3, #12]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007326:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007328:	2300      	movs	r3, #0
 800732a:	e000      	b.n	800732e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800732c:	2302      	movs	r3, #2
  }
}
 800732e:	4618      	mov	r0, r3
 8007330:	3714      	adds	r7, #20
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr

0800733a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b082      	sub	sp, #8
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68da      	ldr	r2, [r3, #12]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007350:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2220      	movs	r2, #32
 8007356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7ff fe8e 	bl	800707c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3708      	adds	r7, #8
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b08c      	sub	sp, #48	; 0x30
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007378:	b2db      	uxtb	r3, r3
 800737a:	2b22      	cmp	r3, #34	; 0x22
 800737c:	f040 80ab 	bne.w	80074d6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007388:	d117      	bne.n	80073ba <UART_Receive_IT+0x50>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d113      	bne.n	80073ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007392:	2300      	movs	r3, #0
 8007394:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800739a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b2:	1c9a      	adds	r2, r3, #2
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	629a      	str	r2, [r3, #40]	; 0x28
 80073b8:	e026      	b.n	8007408 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80073c0:	2300      	movs	r3, #0
 80073c2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073cc:	d007      	beq.n	80073de <UART_Receive_IT+0x74>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d10a      	bne.n	80073ec <UART_Receive_IT+0x82>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d106      	bne.n	80073ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	b2da      	uxtb	r2, r3
 80073e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e8:	701a      	strb	r2, [r3, #0]
 80073ea:	e008      	b.n	80073fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073f8:	b2da      	uxtb	r2, r3
 80073fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007402:	1c5a      	adds	r2, r3, #1
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800740c:	b29b      	uxth	r3, r3
 800740e:	3b01      	subs	r3, #1
 8007410:	b29b      	uxth	r3, r3
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	4619      	mov	r1, r3
 8007416:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007418:	2b00      	cmp	r3, #0
 800741a:	d15a      	bne.n	80074d2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	68da      	ldr	r2, [r3, #12]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f022 0220 	bic.w	r2, r2, #32
 800742a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	68da      	ldr	r2, [r3, #12]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800743a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	695a      	ldr	r2, [r3, #20]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f022 0201 	bic.w	r2, r2, #1
 800744a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2220      	movs	r2, #32
 8007450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007458:	2b01      	cmp	r3, #1
 800745a:	d135      	bne.n	80074c8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	330c      	adds	r3, #12
 8007468:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	e853 3f00 	ldrex	r3, [r3]
 8007470:	613b      	str	r3, [r7, #16]
   return(result);
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	f023 0310 	bic.w	r3, r3, #16
 8007478:	627b      	str	r3, [r7, #36]	; 0x24
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	330c      	adds	r3, #12
 8007480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007482:	623a      	str	r2, [r7, #32]
 8007484:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007486:	69f9      	ldr	r1, [r7, #28]
 8007488:	6a3a      	ldr	r2, [r7, #32]
 800748a:	e841 2300 	strex	r3, r2, [r1]
 800748e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d1e5      	bne.n	8007462 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 0310 	and.w	r3, r3, #16
 80074a0:	2b10      	cmp	r3, #16
 80074a2:	d10a      	bne.n	80074ba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80074a4:	2300      	movs	r3, #0
 80074a6:	60fb      	str	r3, [r7, #12]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	60fb      	str	r3, [r7, #12]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	60fb      	str	r3, [r7, #12]
 80074b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80074be:	4619      	mov	r1, r3
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f7ff fdf9 	bl	80070b8 <HAL_UARTEx_RxEventCallback>
 80074c6:	e002      	b.n	80074ce <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f7ff fde1 	bl	8007090 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80074ce:	2300      	movs	r3, #0
 80074d0:	e002      	b.n	80074d8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80074d2:	2300      	movs	r3, #0
 80074d4:	e000      	b.n	80074d8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80074d6:	2302      	movs	r3, #2
  }
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3730      	adds	r7, #48	; 0x30
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074e4:	b0c0      	sub	sp, #256	; 0x100
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80074f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074fc:	68d9      	ldr	r1, [r3, #12]
 80074fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	ea40 0301 	orr.w	r3, r0, r1
 8007508:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800750a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800750e:	689a      	ldr	r2, [r3, #8]
 8007510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	431a      	orrs	r2, r3
 8007518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	431a      	orrs	r2, r3
 8007520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007524:	69db      	ldr	r3, [r3, #28]
 8007526:	4313      	orrs	r3, r2
 8007528:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800752c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007538:	f021 010c 	bic.w	r1, r1, #12
 800753c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007546:	430b      	orrs	r3, r1
 8007548:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800754a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	695b      	ldr	r3, [r3, #20]
 8007552:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800755a:	6999      	ldr	r1, [r3, #24]
 800755c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	ea40 0301 	orr.w	r3, r0, r1
 8007566:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	4b8f      	ldr	r3, [pc, #572]	; (80077ac <UART_SetConfig+0x2cc>)
 8007570:	429a      	cmp	r2, r3
 8007572:	d005      	beq.n	8007580 <UART_SetConfig+0xa0>
 8007574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	4b8d      	ldr	r3, [pc, #564]	; (80077b0 <UART_SetConfig+0x2d0>)
 800757c:	429a      	cmp	r2, r3
 800757e:	d104      	bne.n	800758a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007580:	f7fd ffb2 	bl	80054e8 <HAL_RCC_GetPCLK2Freq>
 8007584:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007588:	e003      	b.n	8007592 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800758a:	f7fd ff99 	bl	80054c0 <HAL_RCC_GetPCLK1Freq>
 800758e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007596:	69db      	ldr	r3, [r3, #28]
 8007598:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800759c:	f040 810c 	bne.w	80077b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80075a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075a4:	2200      	movs	r2, #0
 80075a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80075aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80075ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80075b2:	4622      	mov	r2, r4
 80075b4:	462b      	mov	r3, r5
 80075b6:	1891      	adds	r1, r2, r2
 80075b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80075ba:	415b      	adcs	r3, r3
 80075bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80075c2:	4621      	mov	r1, r4
 80075c4:	eb12 0801 	adds.w	r8, r2, r1
 80075c8:	4629      	mov	r1, r5
 80075ca:	eb43 0901 	adc.w	r9, r3, r1
 80075ce:	f04f 0200 	mov.w	r2, #0
 80075d2:	f04f 0300 	mov.w	r3, #0
 80075d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80075da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80075de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80075e2:	4690      	mov	r8, r2
 80075e4:	4699      	mov	r9, r3
 80075e6:	4623      	mov	r3, r4
 80075e8:	eb18 0303 	adds.w	r3, r8, r3
 80075ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80075f0:	462b      	mov	r3, r5
 80075f2:	eb49 0303 	adc.w	r3, r9, r3
 80075f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80075fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007606:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800760a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800760e:	460b      	mov	r3, r1
 8007610:	18db      	adds	r3, r3, r3
 8007612:	653b      	str	r3, [r7, #80]	; 0x50
 8007614:	4613      	mov	r3, r2
 8007616:	eb42 0303 	adc.w	r3, r2, r3
 800761a:	657b      	str	r3, [r7, #84]	; 0x54
 800761c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007620:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007624:	f7f9 fa2a 	bl	8000a7c <__aeabi_uldivmod>
 8007628:	4602      	mov	r2, r0
 800762a:	460b      	mov	r3, r1
 800762c:	4b61      	ldr	r3, [pc, #388]	; (80077b4 <UART_SetConfig+0x2d4>)
 800762e:	fba3 2302 	umull	r2, r3, r3, r2
 8007632:	095b      	lsrs	r3, r3, #5
 8007634:	011c      	lsls	r4, r3, #4
 8007636:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800763a:	2200      	movs	r2, #0
 800763c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007640:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007644:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007648:	4642      	mov	r2, r8
 800764a:	464b      	mov	r3, r9
 800764c:	1891      	adds	r1, r2, r2
 800764e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007650:	415b      	adcs	r3, r3
 8007652:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007654:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007658:	4641      	mov	r1, r8
 800765a:	eb12 0a01 	adds.w	sl, r2, r1
 800765e:	4649      	mov	r1, r9
 8007660:	eb43 0b01 	adc.w	fp, r3, r1
 8007664:	f04f 0200 	mov.w	r2, #0
 8007668:	f04f 0300 	mov.w	r3, #0
 800766c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007670:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007674:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007678:	4692      	mov	sl, r2
 800767a:	469b      	mov	fp, r3
 800767c:	4643      	mov	r3, r8
 800767e:	eb1a 0303 	adds.w	r3, sl, r3
 8007682:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007686:	464b      	mov	r3, r9
 8007688:	eb4b 0303 	adc.w	r3, fp, r3
 800768c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800769c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80076a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80076a4:	460b      	mov	r3, r1
 80076a6:	18db      	adds	r3, r3, r3
 80076a8:	643b      	str	r3, [r7, #64]	; 0x40
 80076aa:	4613      	mov	r3, r2
 80076ac:	eb42 0303 	adc.w	r3, r2, r3
 80076b0:	647b      	str	r3, [r7, #68]	; 0x44
 80076b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80076b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80076ba:	f7f9 f9df 	bl	8000a7c <__aeabi_uldivmod>
 80076be:	4602      	mov	r2, r0
 80076c0:	460b      	mov	r3, r1
 80076c2:	4611      	mov	r1, r2
 80076c4:	4b3b      	ldr	r3, [pc, #236]	; (80077b4 <UART_SetConfig+0x2d4>)
 80076c6:	fba3 2301 	umull	r2, r3, r3, r1
 80076ca:	095b      	lsrs	r3, r3, #5
 80076cc:	2264      	movs	r2, #100	; 0x64
 80076ce:	fb02 f303 	mul.w	r3, r2, r3
 80076d2:	1acb      	subs	r3, r1, r3
 80076d4:	00db      	lsls	r3, r3, #3
 80076d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80076da:	4b36      	ldr	r3, [pc, #216]	; (80077b4 <UART_SetConfig+0x2d4>)
 80076dc:	fba3 2302 	umull	r2, r3, r3, r2
 80076e0:	095b      	lsrs	r3, r3, #5
 80076e2:	005b      	lsls	r3, r3, #1
 80076e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80076e8:	441c      	add	r4, r3
 80076ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076ee:	2200      	movs	r2, #0
 80076f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80076f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80076f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80076fc:	4642      	mov	r2, r8
 80076fe:	464b      	mov	r3, r9
 8007700:	1891      	adds	r1, r2, r2
 8007702:	63b9      	str	r1, [r7, #56]	; 0x38
 8007704:	415b      	adcs	r3, r3
 8007706:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007708:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800770c:	4641      	mov	r1, r8
 800770e:	1851      	adds	r1, r2, r1
 8007710:	6339      	str	r1, [r7, #48]	; 0x30
 8007712:	4649      	mov	r1, r9
 8007714:	414b      	adcs	r3, r1
 8007716:	637b      	str	r3, [r7, #52]	; 0x34
 8007718:	f04f 0200 	mov.w	r2, #0
 800771c:	f04f 0300 	mov.w	r3, #0
 8007720:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007724:	4659      	mov	r1, fp
 8007726:	00cb      	lsls	r3, r1, #3
 8007728:	4651      	mov	r1, sl
 800772a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800772e:	4651      	mov	r1, sl
 8007730:	00ca      	lsls	r2, r1, #3
 8007732:	4610      	mov	r0, r2
 8007734:	4619      	mov	r1, r3
 8007736:	4603      	mov	r3, r0
 8007738:	4642      	mov	r2, r8
 800773a:	189b      	adds	r3, r3, r2
 800773c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007740:	464b      	mov	r3, r9
 8007742:	460a      	mov	r2, r1
 8007744:	eb42 0303 	adc.w	r3, r2, r3
 8007748:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800774c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007758:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800775c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007760:	460b      	mov	r3, r1
 8007762:	18db      	adds	r3, r3, r3
 8007764:	62bb      	str	r3, [r7, #40]	; 0x28
 8007766:	4613      	mov	r3, r2
 8007768:	eb42 0303 	adc.w	r3, r2, r3
 800776c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800776e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007772:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007776:	f7f9 f981 	bl	8000a7c <__aeabi_uldivmod>
 800777a:	4602      	mov	r2, r0
 800777c:	460b      	mov	r3, r1
 800777e:	4b0d      	ldr	r3, [pc, #52]	; (80077b4 <UART_SetConfig+0x2d4>)
 8007780:	fba3 1302 	umull	r1, r3, r3, r2
 8007784:	095b      	lsrs	r3, r3, #5
 8007786:	2164      	movs	r1, #100	; 0x64
 8007788:	fb01 f303 	mul.w	r3, r1, r3
 800778c:	1ad3      	subs	r3, r2, r3
 800778e:	00db      	lsls	r3, r3, #3
 8007790:	3332      	adds	r3, #50	; 0x32
 8007792:	4a08      	ldr	r2, [pc, #32]	; (80077b4 <UART_SetConfig+0x2d4>)
 8007794:	fba2 2303 	umull	r2, r3, r2, r3
 8007798:	095b      	lsrs	r3, r3, #5
 800779a:	f003 0207 	and.w	r2, r3, #7
 800779e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4422      	add	r2, r4
 80077a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80077a8:	e106      	b.n	80079b8 <UART_SetConfig+0x4d8>
 80077aa:	bf00      	nop
 80077ac:	40011000 	.word	0x40011000
 80077b0:	40011400 	.word	0x40011400
 80077b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80077b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077bc:	2200      	movs	r2, #0
 80077be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80077c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80077c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80077ca:	4642      	mov	r2, r8
 80077cc:	464b      	mov	r3, r9
 80077ce:	1891      	adds	r1, r2, r2
 80077d0:	6239      	str	r1, [r7, #32]
 80077d2:	415b      	adcs	r3, r3
 80077d4:	627b      	str	r3, [r7, #36]	; 0x24
 80077d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80077da:	4641      	mov	r1, r8
 80077dc:	1854      	adds	r4, r2, r1
 80077de:	4649      	mov	r1, r9
 80077e0:	eb43 0501 	adc.w	r5, r3, r1
 80077e4:	f04f 0200 	mov.w	r2, #0
 80077e8:	f04f 0300 	mov.w	r3, #0
 80077ec:	00eb      	lsls	r3, r5, #3
 80077ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80077f2:	00e2      	lsls	r2, r4, #3
 80077f4:	4614      	mov	r4, r2
 80077f6:	461d      	mov	r5, r3
 80077f8:	4643      	mov	r3, r8
 80077fa:	18e3      	adds	r3, r4, r3
 80077fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007800:	464b      	mov	r3, r9
 8007802:	eb45 0303 	adc.w	r3, r5, r3
 8007806:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800780a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007816:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800781a:	f04f 0200 	mov.w	r2, #0
 800781e:	f04f 0300 	mov.w	r3, #0
 8007822:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007826:	4629      	mov	r1, r5
 8007828:	008b      	lsls	r3, r1, #2
 800782a:	4621      	mov	r1, r4
 800782c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007830:	4621      	mov	r1, r4
 8007832:	008a      	lsls	r2, r1, #2
 8007834:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007838:	f7f9 f920 	bl	8000a7c <__aeabi_uldivmod>
 800783c:	4602      	mov	r2, r0
 800783e:	460b      	mov	r3, r1
 8007840:	4b60      	ldr	r3, [pc, #384]	; (80079c4 <UART_SetConfig+0x4e4>)
 8007842:	fba3 2302 	umull	r2, r3, r3, r2
 8007846:	095b      	lsrs	r3, r3, #5
 8007848:	011c      	lsls	r4, r3, #4
 800784a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800784e:	2200      	movs	r2, #0
 8007850:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007854:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007858:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800785c:	4642      	mov	r2, r8
 800785e:	464b      	mov	r3, r9
 8007860:	1891      	adds	r1, r2, r2
 8007862:	61b9      	str	r1, [r7, #24]
 8007864:	415b      	adcs	r3, r3
 8007866:	61fb      	str	r3, [r7, #28]
 8007868:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800786c:	4641      	mov	r1, r8
 800786e:	1851      	adds	r1, r2, r1
 8007870:	6139      	str	r1, [r7, #16]
 8007872:	4649      	mov	r1, r9
 8007874:	414b      	adcs	r3, r1
 8007876:	617b      	str	r3, [r7, #20]
 8007878:	f04f 0200 	mov.w	r2, #0
 800787c:	f04f 0300 	mov.w	r3, #0
 8007880:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007884:	4659      	mov	r1, fp
 8007886:	00cb      	lsls	r3, r1, #3
 8007888:	4651      	mov	r1, sl
 800788a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800788e:	4651      	mov	r1, sl
 8007890:	00ca      	lsls	r2, r1, #3
 8007892:	4610      	mov	r0, r2
 8007894:	4619      	mov	r1, r3
 8007896:	4603      	mov	r3, r0
 8007898:	4642      	mov	r2, r8
 800789a:	189b      	adds	r3, r3, r2
 800789c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80078a0:	464b      	mov	r3, r9
 80078a2:	460a      	mov	r2, r1
 80078a4:	eb42 0303 	adc.w	r3, r2, r3
 80078a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80078ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80078b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80078b8:	f04f 0200 	mov.w	r2, #0
 80078bc:	f04f 0300 	mov.w	r3, #0
 80078c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80078c4:	4649      	mov	r1, r9
 80078c6:	008b      	lsls	r3, r1, #2
 80078c8:	4641      	mov	r1, r8
 80078ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078ce:	4641      	mov	r1, r8
 80078d0:	008a      	lsls	r2, r1, #2
 80078d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80078d6:	f7f9 f8d1 	bl	8000a7c <__aeabi_uldivmod>
 80078da:	4602      	mov	r2, r0
 80078dc:	460b      	mov	r3, r1
 80078de:	4611      	mov	r1, r2
 80078e0:	4b38      	ldr	r3, [pc, #224]	; (80079c4 <UART_SetConfig+0x4e4>)
 80078e2:	fba3 2301 	umull	r2, r3, r3, r1
 80078e6:	095b      	lsrs	r3, r3, #5
 80078e8:	2264      	movs	r2, #100	; 0x64
 80078ea:	fb02 f303 	mul.w	r3, r2, r3
 80078ee:	1acb      	subs	r3, r1, r3
 80078f0:	011b      	lsls	r3, r3, #4
 80078f2:	3332      	adds	r3, #50	; 0x32
 80078f4:	4a33      	ldr	r2, [pc, #204]	; (80079c4 <UART_SetConfig+0x4e4>)
 80078f6:	fba2 2303 	umull	r2, r3, r2, r3
 80078fa:	095b      	lsrs	r3, r3, #5
 80078fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007900:	441c      	add	r4, r3
 8007902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007906:	2200      	movs	r2, #0
 8007908:	673b      	str	r3, [r7, #112]	; 0x70
 800790a:	677a      	str	r2, [r7, #116]	; 0x74
 800790c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007910:	4642      	mov	r2, r8
 8007912:	464b      	mov	r3, r9
 8007914:	1891      	adds	r1, r2, r2
 8007916:	60b9      	str	r1, [r7, #8]
 8007918:	415b      	adcs	r3, r3
 800791a:	60fb      	str	r3, [r7, #12]
 800791c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007920:	4641      	mov	r1, r8
 8007922:	1851      	adds	r1, r2, r1
 8007924:	6039      	str	r1, [r7, #0]
 8007926:	4649      	mov	r1, r9
 8007928:	414b      	adcs	r3, r1
 800792a:	607b      	str	r3, [r7, #4]
 800792c:	f04f 0200 	mov.w	r2, #0
 8007930:	f04f 0300 	mov.w	r3, #0
 8007934:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007938:	4659      	mov	r1, fp
 800793a:	00cb      	lsls	r3, r1, #3
 800793c:	4651      	mov	r1, sl
 800793e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007942:	4651      	mov	r1, sl
 8007944:	00ca      	lsls	r2, r1, #3
 8007946:	4610      	mov	r0, r2
 8007948:	4619      	mov	r1, r3
 800794a:	4603      	mov	r3, r0
 800794c:	4642      	mov	r2, r8
 800794e:	189b      	adds	r3, r3, r2
 8007950:	66bb      	str	r3, [r7, #104]	; 0x68
 8007952:	464b      	mov	r3, r9
 8007954:	460a      	mov	r2, r1
 8007956:	eb42 0303 	adc.w	r3, r2, r3
 800795a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800795c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	663b      	str	r3, [r7, #96]	; 0x60
 8007966:	667a      	str	r2, [r7, #100]	; 0x64
 8007968:	f04f 0200 	mov.w	r2, #0
 800796c:	f04f 0300 	mov.w	r3, #0
 8007970:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007974:	4649      	mov	r1, r9
 8007976:	008b      	lsls	r3, r1, #2
 8007978:	4641      	mov	r1, r8
 800797a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800797e:	4641      	mov	r1, r8
 8007980:	008a      	lsls	r2, r1, #2
 8007982:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007986:	f7f9 f879 	bl	8000a7c <__aeabi_uldivmod>
 800798a:	4602      	mov	r2, r0
 800798c:	460b      	mov	r3, r1
 800798e:	4b0d      	ldr	r3, [pc, #52]	; (80079c4 <UART_SetConfig+0x4e4>)
 8007990:	fba3 1302 	umull	r1, r3, r3, r2
 8007994:	095b      	lsrs	r3, r3, #5
 8007996:	2164      	movs	r1, #100	; 0x64
 8007998:	fb01 f303 	mul.w	r3, r1, r3
 800799c:	1ad3      	subs	r3, r2, r3
 800799e:	011b      	lsls	r3, r3, #4
 80079a0:	3332      	adds	r3, #50	; 0x32
 80079a2:	4a08      	ldr	r2, [pc, #32]	; (80079c4 <UART_SetConfig+0x4e4>)
 80079a4:	fba2 2303 	umull	r2, r3, r2, r3
 80079a8:	095b      	lsrs	r3, r3, #5
 80079aa:	f003 020f 	and.w	r2, r3, #15
 80079ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4422      	add	r2, r4
 80079b6:	609a      	str	r2, [r3, #8]
}
 80079b8:	bf00      	nop
 80079ba:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80079be:	46bd      	mov	sp, r7
 80079c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079c4:	51eb851f 	.word	0x51eb851f

080079c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80079c8:	b084      	sub	sp, #16
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b084      	sub	sp, #16
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
 80079d2:	f107 001c 	add.w	r0, r7, #28
 80079d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80079da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d122      	bne.n	8007a26 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80079f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d105      	bne.n	8007a1a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 faa2 	bl	8007f64 <USB_CoreReset>
 8007a20:	4603      	mov	r3, r0
 8007a22:	73fb      	strb	r3, [r7, #15]
 8007a24:	e01a      	b.n	8007a5c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 fa96 	bl	8007f64 <USB_CoreReset>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d106      	bne.n	8007a50 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a46:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	639a      	str	r2, [r3, #56]	; 0x38
 8007a4e:	e005      	b.n	8007a5c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d10b      	bne.n	8007a7a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	f043 0206 	orr.w	r2, r3, #6
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	f043 0220 	orr.w	r2, r3, #32
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3710      	adds	r7, #16
 8007a80:	46bd      	mov	sp, r7
 8007a82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a86:	b004      	add	sp, #16
 8007a88:	4770      	bx	lr

08007a8a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a8a:	b480      	push	{r7}
 8007a8c:	b083      	sub	sp, #12
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	f023 0201 	bic.w	r2, r3, #1
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007ac8:	78fb      	ldrb	r3, [r7, #3]
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d115      	bne.n	8007afa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007ada:	2001      	movs	r0, #1
 8007adc:	f7fb fbce 	bl	800327c <HAL_Delay>
      ms++;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fa2e 	bl	8007f48 <USB_GetMode>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d01e      	beq.n	8007b30 <USB_SetCurrentMode+0x84>
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2b31      	cmp	r3, #49	; 0x31
 8007af6:	d9f0      	bls.n	8007ada <USB_SetCurrentMode+0x2e>
 8007af8:	e01a      	b.n	8007b30 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007afa:	78fb      	ldrb	r3, [r7, #3]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d115      	bne.n	8007b2c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007b0c:	2001      	movs	r0, #1
 8007b0e:	f7fb fbb5 	bl	800327c <HAL_Delay>
      ms++;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	3301      	adds	r3, #1
 8007b16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 fa15 	bl	8007f48 <USB_GetMode>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d005      	beq.n	8007b30 <USB_SetCurrentMode+0x84>
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2b31      	cmp	r3, #49	; 0x31
 8007b28:	d9f0      	bls.n	8007b0c <USB_SetCurrentMode+0x60>
 8007b2a:	e001      	b.n	8007b30 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e005      	b.n	8007b3c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2b32      	cmp	r3, #50	; 0x32
 8007b34:	d101      	bne.n	8007b3a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e000      	b.n	8007b3c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b44:	b084      	sub	sp, #16
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b086      	sub	sp, #24
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
 8007b4e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007b52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007b56:	2300      	movs	r3, #0
 8007b58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007b5e:	2300      	movs	r3, #0
 8007b60:	613b      	str	r3, [r7, #16]
 8007b62:	e009      	b.n	8007b78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	3340      	adds	r3, #64	; 0x40
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4413      	add	r3, r2
 8007b6e:	2200      	movs	r2, #0
 8007b70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	3301      	adds	r3, #1
 8007b76:	613b      	str	r3, [r7, #16]
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	2b0e      	cmp	r3, #14
 8007b7c:	d9f2      	bls.n	8007b64 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d11c      	bne.n	8007bbe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b92:	f043 0302 	orr.w	r3, r3, #2
 8007b96:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	639a      	str	r2, [r3, #56]	; 0x38
 8007bbc:	e00b      	b.n	8007bd6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007bdc:	461a      	mov	r2, r3
 8007bde:	2300      	movs	r3, #0
 8007be0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007be8:	4619      	mov	r1, r3
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	680b      	ldr	r3, [r1, #0]
 8007bf4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d10c      	bne.n	8007c16 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d104      	bne.n	8007c0c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007c02:	2100      	movs	r1, #0
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 f965 	bl	8007ed4 <USB_SetDevSpeed>
 8007c0a:	e008      	b.n	8007c1e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007c0c:	2101      	movs	r1, #1
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f960 	bl	8007ed4 <USB_SetDevSpeed>
 8007c14:	e003      	b.n	8007c1e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007c16:	2103      	movs	r1, #3
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f95b 	bl	8007ed4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007c1e:	2110      	movs	r1, #16
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 f8f3 	bl	8007e0c <USB_FlushTxFifo>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d001      	beq.n	8007c30 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 f91f 	bl	8007e74 <USB_FlushRxFifo>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d001      	beq.n	8007c40 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c46:	461a      	mov	r2, r3
 8007c48:	2300      	movs	r3, #0
 8007c4a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c52:	461a      	mov	r2, r3
 8007c54:	2300      	movs	r3, #0
 8007c56:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c5e:	461a      	mov	r2, r3
 8007c60:	2300      	movs	r3, #0
 8007c62:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c64:	2300      	movs	r3, #0
 8007c66:	613b      	str	r3, [r7, #16]
 8007c68:	e043      	b.n	8007cf2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	015a      	lsls	r2, r3, #5
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	4413      	add	r3, r2
 8007c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c80:	d118      	bne.n	8007cb4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d10a      	bne.n	8007c9e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	015a      	lsls	r2, r3, #5
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	4413      	add	r3, r2
 8007c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c94:	461a      	mov	r2, r3
 8007c96:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007c9a:	6013      	str	r3, [r2, #0]
 8007c9c:	e013      	b.n	8007cc6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	015a      	lsls	r2, r3, #5
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007caa:	461a      	mov	r2, r3
 8007cac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007cb0:	6013      	str	r3, [r2, #0]
 8007cb2:	e008      	b.n	8007cc6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	015a      	lsls	r2, r3, #5
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	4413      	add	r3, r2
 8007cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	015a      	lsls	r2, r3, #5
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	4413      	add	r3, r2
 8007cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	015a      	lsls	r2, r3, #5
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	4413      	add	r3, r2
 8007ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007cea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	3301      	adds	r3, #1
 8007cf0:	613b      	str	r3, [r7, #16]
 8007cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf4:	693a      	ldr	r2, [r7, #16]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d3b7      	bcc.n	8007c6a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	613b      	str	r3, [r7, #16]
 8007cfe:	e043      	b.n	8007d88 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	015a      	lsls	r2, r3, #5
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	4413      	add	r3, r2
 8007d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d16:	d118      	bne.n	8007d4a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d10a      	bne.n	8007d34 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	015a      	lsls	r2, r3, #5
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	4413      	add	r3, r2
 8007d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007d30:	6013      	str	r3, [r2, #0]
 8007d32:	e013      	b.n	8007d5c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	015a      	lsls	r2, r3, #5
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d40:	461a      	mov	r2, r3
 8007d42:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007d46:	6013      	str	r3, [r2, #0]
 8007d48:	e008      	b.n	8007d5c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	015a      	lsls	r2, r3, #5
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	4413      	add	r3, r2
 8007d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d56:	461a      	mov	r2, r3
 8007d58:	2300      	movs	r3, #0
 8007d5a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	015a      	lsls	r2, r3, #5
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	4413      	add	r3, r2
 8007d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d68:	461a      	mov	r2, r3
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	015a      	lsls	r2, r3, #5
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	4413      	add	r3, r2
 8007d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007d80:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	3301      	adds	r3, #1
 8007d86:	613b      	str	r3, [r7, #16]
 8007d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8a:	693a      	ldr	r2, [r7, #16]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d3b7      	bcc.n	8007d00 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d96:	691b      	ldr	r3, [r3, #16]
 8007d98:	68fa      	ldr	r2, [r7, #12]
 8007d9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007da2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007db0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d105      	bne.n	8007dc4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	699b      	ldr	r3, [r3, #24]
 8007dbc:	f043 0210 	orr.w	r2, r3, #16
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	699a      	ldr	r2, [r3, #24]
 8007dc8:	4b0f      	ldr	r3, [pc, #60]	; (8007e08 <USB_DevInit+0x2c4>)
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d005      	beq.n	8007de2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	699b      	ldr	r3, [r3, #24]
 8007dda:	f043 0208 	orr.w	r2, r3, #8
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d107      	bne.n	8007df8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	699b      	ldr	r3, [r3, #24]
 8007dec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007df0:	f043 0304 	orr.w	r3, r3, #4
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007df8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3718      	adds	r7, #24
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e04:	b004      	add	sp, #16
 8007e06:	4770      	bx	lr
 8007e08:	803c3800 	.word	0x803c3800

08007e0c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b085      	sub	sp, #20
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007e16:	2300      	movs	r3, #0
 8007e18:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	4a13      	ldr	r2, [pc, #76]	; (8007e70 <USB_FlushTxFifo+0x64>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d901      	bls.n	8007e2c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007e28:	2303      	movs	r3, #3
 8007e2a:	e01b      	b.n	8007e64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	691b      	ldr	r3, [r3, #16]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	daf2      	bge.n	8007e1a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007e34:	2300      	movs	r3, #0
 8007e36:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	019b      	lsls	r3, r3, #6
 8007e3c:	f043 0220 	orr.w	r2, r3, #32
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	3301      	adds	r3, #1
 8007e48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	4a08      	ldr	r2, [pc, #32]	; (8007e70 <USB_FlushTxFifo+0x64>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d901      	bls.n	8007e56 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007e52:	2303      	movs	r3, #3
 8007e54:	e006      	b.n	8007e64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	f003 0320 	and.w	r3, r3, #32
 8007e5e:	2b20      	cmp	r3, #32
 8007e60:	d0f0      	beq.n	8007e44 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007e62:	2300      	movs	r3, #0
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3714      	adds	r7, #20
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr
 8007e70:	00030d40 	.word	0x00030d40

08007e74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	3301      	adds	r3, #1
 8007e84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	4a11      	ldr	r2, [pc, #68]	; (8007ed0 <USB_FlushRxFifo+0x5c>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d901      	bls.n	8007e92 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e018      	b.n	8007ec4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	daf2      	bge.n	8007e80 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2210      	movs	r2, #16
 8007ea2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	4a08      	ldr	r2, [pc, #32]	; (8007ed0 <USB_FlushRxFifo+0x5c>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d901      	bls.n	8007eb6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007eb2:	2303      	movs	r3, #3
 8007eb4:	e006      	b.n	8007ec4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	f003 0310 	and.w	r3, r3, #16
 8007ebe:	2b10      	cmp	r3, #16
 8007ec0:	d0f0      	beq.n	8007ea4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3714      	adds	r7, #20
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr
 8007ed0:	00030d40 	.word	0x00030d40

08007ed4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	460b      	mov	r3, r1
 8007ede:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	78fb      	ldrb	r3, [r7, #3]
 8007eee:	68f9      	ldr	r1, [r7, #12]
 8007ef0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3714      	adds	r7, #20
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr

08007f06 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007f06:	b480      	push	{r7}
 8007f08:	b085      	sub	sp, #20
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007f20:	f023 0303 	bic.w	r3, r3, #3
 8007f24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	68fa      	ldr	r2, [r7, #12]
 8007f30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f34:	f043 0302 	orr.w	r3, r3, #2
 8007f38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3714      	adds	r7, #20
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	695b      	ldr	r3, [r3, #20]
 8007f54:	f003 0301 	and.w	r3, r3, #1
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	3301      	adds	r3, #1
 8007f74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	4a13      	ldr	r2, [pc, #76]	; (8007fc8 <USB_CoreReset+0x64>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d901      	bls.n	8007f82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007f7e:	2303      	movs	r3, #3
 8007f80:	e01b      	b.n	8007fba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	daf2      	bge.n	8007f70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	691b      	ldr	r3, [r3, #16]
 8007f92:	f043 0201 	orr.w	r2, r3, #1
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	3301      	adds	r3, #1
 8007f9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	4a09      	ldr	r2, [pc, #36]	; (8007fc8 <USB_CoreReset+0x64>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d901      	bls.n	8007fac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007fa8:	2303      	movs	r3, #3
 8007faa:	e006      	b.n	8007fba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	691b      	ldr	r3, [r3, #16]
 8007fb0:	f003 0301 	and.w	r3, r3, #1
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d0f0      	beq.n	8007f9a <USB_CoreReset+0x36>

  return HAL_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3714      	adds	r7, #20
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop
 8007fc8:	00030d40 	.word	0x00030d40

08007fcc <std>:
 8007fcc:	2300      	movs	r3, #0
 8007fce:	b510      	push	{r4, lr}
 8007fd0:	4604      	mov	r4, r0
 8007fd2:	e9c0 3300 	strd	r3, r3, [r0]
 8007fd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fda:	6083      	str	r3, [r0, #8]
 8007fdc:	8181      	strh	r1, [r0, #12]
 8007fde:	6643      	str	r3, [r0, #100]	; 0x64
 8007fe0:	81c2      	strh	r2, [r0, #14]
 8007fe2:	6183      	str	r3, [r0, #24]
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	2208      	movs	r2, #8
 8007fe8:	305c      	adds	r0, #92	; 0x5c
 8007fea:	f000 fa17 	bl	800841c <memset>
 8007fee:	4b0d      	ldr	r3, [pc, #52]	; (8008024 <std+0x58>)
 8007ff0:	6263      	str	r3, [r4, #36]	; 0x24
 8007ff2:	4b0d      	ldr	r3, [pc, #52]	; (8008028 <std+0x5c>)
 8007ff4:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ff6:	4b0d      	ldr	r3, [pc, #52]	; (800802c <std+0x60>)
 8007ff8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ffa:	4b0d      	ldr	r3, [pc, #52]	; (8008030 <std+0x64>)
 8007ffc:	6323      	str	r3, [r4, #48]	; 0x30
 8007ffe:	4b0d      	ldr	r3, [pc, #52]	; (8008034 <std+0x68>)
 8008000:	6224      	str	r4, [r4, #32]
 8008002:	429c      	cmp	r4, r3
 8008004:	d006      	beq.n	8008014 <std+0x48>
 8008006:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800800a:	4294      	cmp	r4, r2
 800800c:	d002      	beq.n	8008014 <std+0x48>
 800800e:	33d0      	adds	r3, #208	; 0xd0
 8008010:	429c      	cmp	r4, r3
 8008012:	d105      	bne.n	8008020 <std+0x54>
 8008014:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800801c:	f000 ba76 	b.w	800850c <__retarget_lock_init_recursive>
 8008020:	bd10      	pop	{r4, pc}
 8008022:	bf00      	nop
 8008024:	0800826d 	.word	0x0800826d
 8008028:	0800828f 	.word	0x0800828f
 800802c:	080082c7 	.word	0x080082c7
 8008030:	080082eb 	.word	0x080082eb
 8008034:	20000b4c 	.word	0x20000b4c

08008038 <stdio_exit_handler>:
 8008038:	4a02      	ldr	r2, [pc, #8]	; (8008044 <stdio_exit_handler+0xc>)
 800803a:	4903      	ldr	r1, [pc, #12]	; (8008048 <stdio_exit_handler+0x10>)
 800803c:	4803      	ldr	r0, [pc, #12]	; (800804c <stdio_exit_handler+0x14>)
 800803e:	f000 b869 	b.w	8008114 <_fwalk_sglue>
 8008042:	bf00      	nop
 8008044:	20000138 	.word	0x20000138
 8008048:	08009069 	.word	0x08009069
 800804c:	20000144 	.word	0x20000144

08008050 <cleanup_stdio>:
 8008050:	6841      	ldr	r1, [r0, #4]
 8008052:	4b0c      	ldr	r3, [pc, #48]	; (8008084 <cleanup_stdio+0x34>)
 8008054:	4299      	cmp	r1, r3
 8008056:	b510      	push	{r4, lr}
 8008058:	4604      	mov	r4, r0
 800805a:	d001      	beq.n	8008060 <cleanup_stdio+0x10>
 800805c:	f001 f804 	bl	8009068 <_fflush_r>
 8008060:	68a1      	ldr	r1, [r4, #8]
 8008062:	4b09      	ldr	r3, [pc, #36]	; (8008088 <cleanup_stdio+0x38>)
 8008064:	4299      	cmp	r1, r3
 8008066:	d002      	beq.n	800806e <cleanup_stdio+0x1e>
 8008068:	4620      	mov	r0, r4
 800806a:	f000 fffd 	bl	8009068 <_fflush_r>
 800806e:	68e1      	ldr	r1, [r4, #12]
 8008070:	4b06      	ldr	r3, [pc, #24]	; (800808c <cleanup_stdio+0x3c>)
 8008072:	4299      	cmp	r1, r3
 8008074:	d004      	beq.n	8008080 <cleanup_stdio+0x30>
 8008076:	4620      	mov	r0, r4
 8008078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800807c:	f000 bff4 	b.w	8009068 <_fflush_r>
 8008080:	bd10      	pop	{r4, pc}
 8008082:	bf00      	nop
 8008084:	20000b4c 	.word	0x20000b4c
 8008088:	20000bb4 	.word	0x20000bb4
 800808c:	20000c1c 	.word	0x20000c1c

08008090 <global_stdio_init.part.0>:
 8008090:	b510      	push	{r4, lr}
 8008092:	4b0b      	ldr	r3, [pc, #44]	; (80080c0 <global_stdio_init.part.0+0x30>)
 8008094:	4c0b      	ldr	r4, [pc, #44]	; (80080c4 <global_stdio_init.part.0+0x34>)
 8008096:	4a0c      	ldr	r2, [pc, #48]	; (80080c8 <global_stdio_init.part.0+0x38>)
 8008098:	601a      	str	r2, [r3, #0]
 800809a:	4620      	mov	r0, r4
 800809c:	2200      	movs	r2, #0
 800809e:	2104      	movs	r1, #4
 80080a0:	f7ff ff94 	bl	8007fcc <std>
 80080a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80080a8:	2201      	movs	r2, #1
 80080aa:	2109      	movs	r1, #9
 80080ac:	f7ff ff8e 	bl	8007fcc <std>
 80080b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80080b4:	2202      	movs	r2, #2
 80080b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080ba:	2112      	movs	r1, #18
 80080bc:	f7ff bf86 	b.w	8007fcc <std>
 80080c0:	20000c84 	.word	0x20000c84
 80080c4:	20000b4c 	.word	0x20000b4c
 80080c8:	08008039 	.word	0x08008039

080080cc <__sfp_lock_acquire>:
 80080cc:	4801      	ldr	r0, [pc, #4]	; (80080d4 <__sfp_lock_acquire+0x8>)
 80080ce:	f000 ba1e 	b.w	800850e <__retarget_lock_acquire_recursive>
 80080d2:	bf00      	nop
 80080d4:	20000c8d 	.word	0x20000c8d

080080d8 <__sfp_lock_release>:
 80080d8:	4801      	ldr	r0, [pc, #4]	; (80080e0 <__sfp_lock_release+0x8>)
 80080da:	f000 ba19 	b.w	8008510 <__retarget_lock_release_recursive>
 80080de:	bf00      	nop
 80080e0:	20000c8d 	.word	0x20000c8d

080080e4 <__sinit>:
 80080e4:	b510      	push	{r4, lr}
 80080e6:	4604      	mov	r4, r0
 80080e8:	f7ff fff0 	bl	80080cc <__sfp_lock_acquire>
 80080ec:	6a23      	ldr	r3, [r4, #32]
 80080ee:	b11b      	cbz	r3, 80080f8 <__sinit+0x14>
 80080f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080f4:	f7ff bff0 	b.w	80080d8 <__sfp_lock_release>
 80080f8:	4b04      	ldr	r3, [pc, #16]	; (800810c <__sinit+0x28>)
 80080fa:	6223      	str	r3, [r4, #32]
 80080fc:	4b04      	ldr	r3, [pc, #16]	; (8008110 <__sinit+0x2c>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d1f5      	bne.n	80080f0 <__sinit+0xc>
 8008104:	f7ff ffc4 	bl	8008090 <global_stdio_init.part.0>
 8008108:	e7f2      	b.n	80080f0 <__sinit+0xc>
 800810a:	bf00      	nop
 800810c:	08008051 	.word	0x08008051
 8008110:	20000c84 	.word	0x20000c84

08008114 <_fwalk_sglue>:
 8008114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008118:	4607      	mov	r7, r0
 800811a:	4688      	mov	r8, r1
 800811c:	4614      	mov	r4, r2
 800811e:	2600      	movs	r6, #0
 8008120:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008124:	f1b9 0901 	subs.w	r9, r9, #1
 8008128:	d505      	bpl.n	8008136 <_fwalk_sglue+0x22>
 800812a:	6824      	ldr	r4, [r4, #0]
 800812c:	2c00      	cmp	r4, #0
 800812e:	d1f7      	bne.n	8008120 <_fwalk_sglue+0xc>
 8008130:	4630      	mov	r0, r6
 8008132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008136:	89ab      	ldrh	r3, [r5, #12]
 8008138:	2b01      	cmp	r3, #1
 800813a:	d907      	bls.n	800814c <_fwalk_sglue+0x38>
 800813c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008140:	3301      	adds	r3, #1
 8008142:	d003      	beq.n	800814c <_fwalk_sglue+0x38>
 8008144:	4629      	mov	r1, r5
 8008146:	4638      	mov	r0, r7
 8008148:	47c0      	blx	r8
 800814a:	4306      	orrs	r6, r0
 800814c:	3568      	adds	r5, #104	; 0x68
 800814e:	e7e9      	b.n	8008124 <_fwalk_sglue+0x10>

08008150 <iprintf>:
 8008150:	b40f      	push	{r0, r1, r2, r3}
 8008152:	b507      	push	{r0, r1, r2, lr}
 8008154:	4906      	ldr	r1, [pc, #24]	; (8008170 <iprintf+0x20>)
 8008156:	ab04      	add	r3, sp, #16
 8008158:	6808      	ldr	r0, [r1, #0]
 800815a:	f853 2b04 	ldr.w	r2, [r3], #4
 800815e:	6881      	ldr	r1, [r0, #8]
 8008160:	9301      	str	r3, [sp, #4]
 8008162:	f000 fc51 	bl	8008a08 <_vfiprintf_r>
 8008166:	b003      	add	sp, #12
 8008168:	f85d eb04 	ldr.w	lr, [sp], #4
 800816c:	b004      	add	sp, #16
 800816e:	4770      	bx	lr
 8008170:	20000190 	.word	0x20000190

08008174 <_puts_r>:
 8008174:	6a03      	ldr	r3, [r0, #32]
 8008176:	b570      	push	{r4, r5, r6, lr}
 8008178:	6884      	ldr	r4, [r0, #8]
 800817a:	4605      	mov	r5, r0
 800817c:	460e      	mov	r6, r1
 800817e:	b90b      	cbnz	r3, 8008184 <_puts_r+0x10>
 8008180:	f7ff ffb0 	bl	80080e4 <__sinit>
 8008184:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008186:	07db      	lsls	r3, r3, #31
 8008188:	d405      	bmi.n	8008196 <_puts_r+0x22>
 800818a:	89a3      	ldrh	r3, [r4, #12]
 800818c:	0598      	lsls	r0, r3, #22
 800818e:	d402      	bmi.n	8008196 <_puts_r+0x22>
 8008190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008192:	f000 f9bc 	bl	800850e <__retarget_lock_acquire_recursive>
 8008196:	89a3      	ldrh	r3, [r4, #12]
 8008198:	0719      	lsls	r1, r3, #28
 800819a:	d513      	bpl.n	80081c4 <_puts_r+0x50>
 800819c:	6923      	ldr	r3, [r4, #16]
 800819e:	b18b      	cbz	r3, 80081c4 <_puts_r+0x50>
 80081a0:	3e01      	subs	r6, #1
 80081a2:	68a3      	ldr	r3, [r4, #8]
 80081a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80081a8:	3b01      	subs	r3, #1
 80081aa:	60a3      	str	r3, [r4, #8]
 80081ac:	b9e9      	cbnz	r1, 80081ea <_puts_r+0x76>
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	da2e      	bge.n	8008210 <_puts_r+0x9c>
 80081b2:	4622      	mov	r2, r4
 80081b4:	210a      	movs	r1, #10
 80081b6:	4628      	mov	r0, r5
 80081b8:	f000 f89b 	bl	80082f2 <__swbuf_r>
 80081bc:	3001      	adds	r0, #1
 80081be:	d007      	beq.n	80081d0 <_puts_r+0x5c>
 80081c0:	250a      	movs	r5, #10
 80081c2:	e007      	b.n	80081d4 <_puts_r+0x60>
 80081c4:	4621      	mov	r1, r4
 80081c6:	4628      	mov	r0, r5
 80081c8:	f000 f8d0 	bl	800836c <__swsetup_r>
 80081cc:	2800      	cmp	r0, #0
 80081ce:	d0e7      	beq.n	80081a0 <_puts_r+0x2c>
 80081d0:	f04f 35ff 	mov.w	r5, #4294967295
 80081d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081d6:	07da      	lsls	r2, r3, #31
 80081d8:	d405      	bmi.n	80081e6 <_puts_r+0x72>
 80081da:	89a3      	ldrh	r3, [r4, #12]
 80081dc:	059b      	lsls	r3, r3, #22
 80081de:	d402      	bmi.n	80081e6 <_puts_r+0x72>
 80081e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081e2:	f000 f995 	bl	8008510 <__retarget_lock_release_recursive>
 80081e6:	4628      	mov	r0, r5
 80081e8:	bd70      	pop	{r4, r5, r6, pc}
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	da04      	bge.n	80081f8 <_puts_r+0x84>
 80081ee:	69a2      	ldr	r2, [r4, #24]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	dc06      	bgt.n	8008202 <_puts_r+0x8e>
 80081f4:	290a      	cmp	r1, #10
 80081f6:	d004      	beq.n	8008202 <_puts_r+0x8e>
 80081f8:	6823      	ldr	r3, [r4, #0]
 80081fa:	1c5a      	adds	r2, r3, #1
 80081fc:	6022      	str	r2, [r4, #0]
 80081fe:	7019      	strb	r1, [r3, #0]
 8008200:	e7cf      	b.n	80081a2 <_puts_r+0x2e>
 8008202:	4622      	mov	r2, r4
 8008204:	4628      	mov	r0, r5
 8008206:	f000 f874 	bl	80082f2 <__swbuf_r>
 800820a:	3001      	adds	r0, #1
 800820c:	d1c9      	bne.n	80081a2 <_puts_r+0x2e>
 800820e:	e7df      	b.n	80081d0 <_puts_r+0x5c>
 8008210:	6823      	ldr	r3, [r4, #0]
 8008212:	250a      	movs	r5, #10
 8008214:	1c5a      	adds	r2, r3, #1
 8008216:	6022      	str	r2, [r4, #0]
 8008218:	701d      	strb	r5, [r3, #0]
 800821a:	e7db      	b.n	80081d4 <_puts_r+0x60>

0800821c <puts>:
 800821c:	4b02      	ldr	r3, [pc, #8]	; (8008228 <puts+0xc>)
 800821e:	4601      	mov	r1, r0
 8008220:	6818      	ldr	r0, [r3, #0]
 8008222:	f7ff bfa7 	b.w	8008174 <_puts_r>
 8008226:	bf00      	nop
 8008228:	20000190 	.word	0x20000190

0800822c <siprintf>:
 800822c:	b40e      	push	{r1, r2, r3}
 800822e:	b500      	push	{lr}
 8008230:	b09c      	sub	sp, #112	; 0x70
 8008232:	ab1d      	add	r3, sp, #116	; 0x74
 8008234:	9002      	str	r0, [sp, #8]
 8008236:	9006      	str	r0, [sp, #24]
 8008238:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800823c:	4809      	ldr	r0, [pc, #36]	; (8008264 <siprintf+0x38>)
 800823e:	9107      	str	r1, [sp, #28]
 8008240:	9104      	str	r1, [sp, #16]
 8008242:	4909      	ldr	r1, [pc, #36]	; (8008268 <siprintf+0x3c>)
 8008244:	f853 2b04 	ldr.w	r2, [r3], #4
 8008248:	9105      	str	r1, [sp, #20]
 800824a:	6800      	ldr	r0, [r0, #0]
 800824c:	9301      	str	r3, [sp, #4]
 800824e:	a902      	add	r1, sp, #8
 8008250:	f000 fab2 	bl	80087b8 <_svfiprintf_r>
 8008254:	9b02      	ldr	r3, [sp, #8]
 8008256:	2200      	movs	r2, #0
 8008258:	701a      	strb	r2, [r3, #0]
 800825a:	b01c      	add	sp, #112	; 0x70
 800825c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008260:	b003      	add	sp, #12
 8008262:	4770      	bx	lr
 8008264:	20000190 	.word	0x20000190
 8008268:	ffff0208 	.word	0xffff0208

0800826c <__sread>:
 800826c:	b510      	push	{r4, lr}
 800826e:	460c      	mov	r4, r1
 8008270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008274:	f000 f8fc 	bl	8008470 <_read_r>
 8008278:	2800      	cmp	r0, #0
 800827a:	bfab      	itete	ge
 800827c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800827e:	89a3      	ldrhlt	r3, [r4, #12]
 8008280:	181b      	addge	r3, r3, r0
 8008282:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008286:	bfac      	ite	ge
 8008288:	6563      	strge	r3, [r4, #84]	; 0x54
 800828a:	81a3      	strhlt	r3, [r4, #12]
 800828c:	bd10      	pop	{r4, pc}

0800828e <__swrite>:
 800828e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008292:	461f      	mov	r7, r3
 8008294:	898b      	ldrh	r3, [r1, #12]
 8008296:	05db      	lsls	r3, r3, #23
 8008298:	4605      	mov	r5, r0
 800829a:	460c      	mov	r4, r1
 800829c:	4616      	mov	r6, r2
 800829e:	d505      	bpl.n	80082ac <__swrite+0x1e>
 80082a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082a4:	2302      	movs	r3, #2
 80082a6:	2200      	movs	r2, #0
 80082a8:	f000 f8d0 	bl	800844c <_lseek_r>
 80082ac:	89a3      	ldrh	r3, [r4, #12]
 80082ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082b6:	81a3      	strh	r3, [r4, #12]
 80082b8:	4632      	mov	r2, r6
 80082ba:	463b      	mov	r3, r7
 80082bc:	4628      	mov	r0, r5
 80082be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082c2:	f000 b8e7 	b.w	8008494 <_write_r>

080082c6 <__sseek>:
 80082c6:	b510      	push	{r4, lr}
 80082c8:	460c      	mov	r4, r1
 80082ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082ce:	f000 f8bd 	bl	800844c <_lseek_r>
 80082d2:	1c43      	adds	r3, r0, #1
 80082d4:	89a3      	ldrh	r3, [r4, #12]
 80082d6:	bf15      	itete	ne
 80082d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80082da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80082de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80082e2:	81a3      	strheq	r3, [r4, #12]
 80082e4:	bf18      	it	ne
 80082e6:	81a3      	strhne	r3, [r4, #12]
 80082e8:	bd10      	pop	{r4, pc}

080082ea <__sclose>:
 80082ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082ee:	f000 b89d 	b.w	800842c <_close_r>

080082f2 <__swbuf_r>:
 80082f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f4:	460e      	mov	r6, r1
 80082f6:	4614      	mov	r4, r2
 80082f8:	4605      	mov	r5, r0
 80082fa:	b118      	cbz	r0, 8008304 <__swbuf_r+0x12>
 80082fc:	6a03      	ldr	r3, [r0, #32]
 80082fe:	b90b      	cbnz	r3, 8008304 <__swbuf_r+0x12>
 8008300:	f7ff fef0 	bl	80080e4 <__sinit>
 8008304:	69a3      	ldr	r3, [r4, #24]
 8008306:	60a3      	str	r3, [r4, #8]
 8008308:	89a3      	ldrh	r3, [r4, #12]
 800830a:	071a      	lsls	r2, r3, #28
 800830c:	d525      	bpl.n	800835a <__swbuf_r+0x68>
 800830e:	6923      	ldr	r3, [r4, #16]
 8008310:	b31b      	cbz	r3, 800835a <__swbuf_r+0x68>
 8008312:	6823      	ldr	r3, [r4, #0]
 8008314:	6922      	ldr	r2, [r4, #16]
 8008316:	1a98      	subs	r0, r3, r2
 8008318:	6963      	ldr	r3, [r4, #20]
 800831a:	b2f6      	uxtb	r6, r6
 800831c:	4283      	cmp	r3, r0
 800831e:	4637      	mov	r7, r6
 8008320:	dc04      	bgt.n	800832c <__swbuf_r+0x3a>
 8008322:	4621      	mov	r1, r4
 8008324:	4628      	mov	r0, r5
 8008326:	f000 fe9f 	bl	8009068 <_fflush_r>
 800832a:	b9e0      	cbnz	r0, 8008366 <__swbuf_r+0x74>
 800832c:	68a3      	ldr	r3, [r4, #8]
 800832e:	3b01      	subs	r3, #1
 8008330:	60a3      	str	r3, [r4, #8]
 8008332:	6823      	ldr	r3, [r4, #0]
 8008334:	1c5a      	adds	r2, r3, #1
 8008336:	6022      	str	r2, [r4, #0]
 8008338:	701e      	strb	r6, [r3, #0]
 800833a:	6962      	ldr	r2, [r4, #20]
 800833c:	1c43      	adds	r3, r0, #1
 800833e:	429a      	cmp	r2, r3
 8008340:	d004      	beq.n	800834c <__swbuf_r+0x5a>
 8008342:	89a3      	ldrh	r3, [r4, #12]
 8008344:	07db      	lsls	r3, r3, #31
 8008346:	d506      	bpl.n	8008356 <__swbuf_r+0x64>
 8008348:	2e0a      	cmp	r6, #10
 800834a:	d104      	bne.n	8008356 <__swbuf_r+0x64>
 800834c:	4621      	mov	r1, r4
 800834e:	4628      	mov	r0, r5
 8008350:	f000 fe8a 	bl	8009068 <_fflush_r>
 8008354:	b938      	cbnz	r0, 8008366 <__swbuf_r+0x74>
 8008356:	4638      	mov	r0, r7
 8008358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800835a:	4621      	mov	r1, r4
 800835c:	4628      	mov	r0, r5
 800835e:	f000 f805 	bl	800836c <__swsetup_r>
 8008362:	2800      	cmp	r0, #0
 8008364:	d0d5      	beq.n	8008312 <__swbuf_r+0x20>
 8008366:	f04f 37ff 	mov.w	r7, #4294967295
 800836a:	e7f4      	b.n	8008356 <__swbuf_r+0x64>

0800836c <__swsetup_r>:
 800836c:	b538      	push	{r3, r4, r5, lr}
 800836e:	4b2a      	ldr	r3, [pc, #168]	; (8008418 <__swsetup_r+0xac>)
 8008370:	4605      	mov	r5, r0
 8008372:	6818      	ldr	r0, [r3, #0]
 8008374:	460c      	mov	r4, r1
 8008376:	b118      	cbz	r0, 8008380 <__swsetup_r+0x14>
 8008378:	6a03      	ldr	r3, [r0, #32]
 800837a:	b90b      	cbnz	r3, 8008380 <__swsetup_r+0x14>
 800837c:	f7ff feb2 	bl	80080e4 <__sinit>
 8008380:	89a3      	ldrh	r3, [r4, #12]
 8008382:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008386:	0718      	lsls	r0, r3, #28
 8008388:	d422      	bmi.n	80083d0 <__swsetup_r+0x64>
 800838a:	06d9      	lsls	r1, r3, #27
 800838c:	d407      	bmi.n	800839e <__swsetup_r+0x32>
 800838e:	2309      	movs	r3, #9
 8008390:	602b      	str	r3, [r5, #0]
 8008392:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008396:	81a3      	strh	r3, [r4, #12]
 8008398:	f04f 30ff 	mov.w	r0, #4294967295
 800839c:	e034      	b.n	8008408 <__swsetup_r+0x9c>
 800839e:	0758      	lsls	r0, r3, #29
 80083a0:	d512      	bpl.n	80083c8 <__swsetup_r+0x5c>
 80083a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083a4:	b141      	cbz	r1, 80083b8 <__swsetup_r+0x4c>
 80083a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083aa:	4299      	cmp	r1, r3
 80083ac:	d002      	beq.n	80083b4 <__swsetup_r+0x48>
 80083ae:	4628      	mov	r0, r5
 80083b0:	f000 f8b0 	bl	8008514 <_free_r>
 80083b4:	2300      	movs	r3, #0
 80083b6:	6363      	str	r3, [r4, #52]	; 0x34
 80083b8:	89a3      	ldrh	r3, [r4, #12]
 80083ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80083be:	81a3      	strh	r3, [r4, #12]
 80083c0:	2300      	movs	r3, #0
 80083c2:	6063      	str	r3, [r4, #4]
 80083c4:	6923      	ldr	r3, [r4, #16]
 80083c6:	6023      	str	r3, [r4, #0]
 80083c8:	89a3      	ldrh	r3, [r4, #12]
 80083ca:	f043 0308 	orr.w	r3, r3, #8
 80083ce:	81a3      	strh	r3, [r4, #12]
 80083d0:	6923      	ldr	r3, [r4, #16]
 80083d2:	b94b      	cbnz	r3, 80083e8 <__swsetup_r+0x7c>
 80083d4:	89a3      	ldrh	r3, [r4, #12]
 80083d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80083da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083de:	d003      	beq.n	80083e8 <__swsetup_r+0x7c>
 80083e0:	4621      	mov	r1, r4
 80083e2:	4628      	mov	r0, r5
 80083e4:	f000 fe8e 	bl	8009104 <__smakebuf_r>
 80083e8:	89a0      	ldrh	r0, [r4, #12]
 80083ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083ee:	f010 0301 	ands.w	r3, r0, #1
 80083f2:	d00a      	beq.n	800840a <__swsetup_r+0x9e>
 80083f4:	2300      	movs	r3, #0
 80083f6:	60a3      	str	r3, [r4, #8]
 80083f8:	6963      	ldr	r3, [r4, #20]
 80083fa:	425b      	negs	r3, r3
 80083fc:	61a3      	str	r3, [r4, #24]
 80083fe:	6923      	ldr	r3, [r4, #16]
 8008400:	b943      	cbnz	r3, 8008414 <__swsetup_r+0xa8>
 8008402:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008406:	d1c4      	bne.n	8008392 <__swsetup_r+0x26>
 8008408:	bd38      	pop	{r3, r4, r5, pc}
 800840a:	0781      	lsls	r1, r0, #30
 800840c:	bf58      	it	pl
 800840e:	6963      	ldrpl	r3, [r4, #20]
 8008410:	60a3      	str	r3, [r4, #8]
 8008412:	e7f4      	b.n	80083fe <__swsetup_r+0x92>
 8008414:	2000      	movs	r0, #0
 8008416:	e7f7      	b.n	8008408 <__swsetup_r+0x9c>
 8008418:	20000190 	.word	0x20000190

0800841c <memset>:
 800841c:	4402      	add	r2, r0
 800841e:	4603      	mov	r3, r0
 8008420:	4293      	cmp	r3, r2
 8008422:	d100      	bne.n	8008426 <memset+0xa>
 8008424:	4770      	bx	lr
 8008426:	f803 1b01 	strb.w	r1, [r3], #1
 800842a:	e7f9      	b.n	8008420 <memset+0x4>

0800842c <_close_r>:
 800842c:	b538      	push	{r3, r4, r5, lr}
 800842e:	4d06      	ldr	r5, [pc, #24]	; (8008448 <_close_r+0x1c>)
 8008430:	2300      	movs	r3, #0
 8008432:	4604      	mov	r4, r0
 8008434:	4608      	mov	r0, r1
 8008436:	602b      	str	r3, [r5, #0]
 8008438:	f7f9 ffc1 	bl	80023be <_close>
 800843c:	1c43      	adds	r3, r0, #1
 800843e:	d102      	bne.n	8008446 <_close_r+0x1a>
 8008440:	682b      	ldr	r3, [r5, #0]
 8008442:	b103      	cbz	r3, 8008446 <_close_r+0x1a>
 8008444:	6023      	str	r3, [r4, #0]
 8008446:	bd38      	pop	{r3, r4, r5, pc}
 8008448:	20000c88 	.word	0x20000c88

0800844c <_lseek_r>:
 800844c:	b538      	push	{r3, r4, r5, lr}
 800844e:	4d07      	ldr	r5, [pc, #28]	; (800846c <_lseek_r+0x20>)
 8008450:	4604      	mov	r4, r0
 8008452:	4608      	mov	r0, r1
 8008454:	4611      	mov	r1, r2
 8008456:	2200      	movs	r2, #0
 8008458:	602a      	str	r2, [r5, #0]
 800845a:	461a      	mov	r2, r3
 800845c:	f7f9 ffd6 	bl	800240c <_lseek>
 8008460:	1c43      	adds	r3, r0, #1
 8008462:	d102      	bne.n	800846a <_lseek_r+0x1e>
 8008464:	682b      	ldr	r3, [r5, #0]
 8008466:	b103      	cbz	r3, 800846a <_lseek_r+0x1e>
 8008468:	6023      	str	r3, [r4, #0]
 800846a:	bd38      	pop	{r3, r4, r5, pc}
 800846c:	20000c88 	.word	0x20000c88

08008470 <_read_r>:
 8008470:	b538      	push	{r3, r4, r5, lr}
 8008472:	4d07      	ldr	r5, [pc, #28]	; (8008490 <_read_r+0x20>)
 8008474:	4604      	mov	r4, r0
 8008476:	4608      	mov	r0, r1
 8008478:	4611      	mov	r1, r2
 800847a:	2200      	movs	r2, #0
 800847c:	602a      	str	r2, [r5, #0]
 800847e:	461a      	mov	r2, r3
 8008480:	f7f9 ff64 	bl	800234c <_read>
 8008484:	1c43      	adds	r3, r0, #1
 8008486:	d102      	bne.n	800848e <_read_r+0x1e>
 8008488:	682b      	ldr	r3, [r5, #0]
 800848a:	b103      	cbz	r3, 800848e <_read_r+0x1e>
 800848c:	6023      	str	r3, [r4, #0]
 800848e:	bd38      	pop	{r3, r4, r5, pc}
 8008490:	20000c88 	.word	0x20000c88

08008494 <_write_r>:
 8008494:	b538      	push	{r3, r4, r5, lr}
 8008496:	4d07      	ldr	r5, [pc, #28]	; (80084b4 <_write_r+0x20>)
 8008498:	4604      	mov	r4, r0
 800849a:	4608      	mov	r0, r1
 800849c:	4611      	mov	r1, r2
 800849e:	2200      	movs	r2, #0
 80084a0:	602a      	str	r2, [r5, #0]
 80084a2:	461a      	mov	r2, r3
 80084a4:	f7f9 ff6f 	bl	8002386 <_write>
 80084a8:	1c43      	adds	r3, r0, #1
 80084aa:	d102      	bne.n	80084b2 <_write_r+0x1e>
 80084ac:	682b      	ldr	r3, [r5, #0]
 80084ae:	b103      	cbz	r3, 80084b2 <_write_r+0x1e>
 80084b0:	6023      	str	r3, [r4, #0]
 80084b2:	bd38      	pop	{r3, r4, r5, pc}
 80084b4:	20000c88 	.word	0x20000c88

080084b8 <__errno>:
 80084b8:	4b01      	ldr	r3, [pc, #4]	; (80084c0 <__errno+0x8>)
 80084ba:	6818      	ldr	r0, [r3, #0]
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop
 80084c0:	20000190 	.word	0x20000190

080084c4 <__libc_init_array>:
 80084c4:	b570      	push	{r4, r5, r6, lr}
 80084c6:	4d0d      	ldr	r5, [pc, #52]	; (80084fc <__libc_init_array+0x38>)
 80084c8:	4c0d      	ldr	r4, [pc, #52]	; (8008500 <__libc_init_array+0x3c>)
 80084ca:	1b64      	subs	r4, r4, r5
 80084cc:	10a4      	asrs	r4, r4, #2
 80084ce:	2600      	movs	r6, #0
 80084d0:	42a6      	cmp	r6, r4
 80084d2:	d109      	bne.n	80084e8 <__libc_init_array+0x24>
 80084d4:	4d0b      	ldr	r5, [pc, #44]	; (8008504 <__libc_init_array+0x40>)
 80084d6:	4c0c      	ldr	r4, [pc, #48]	; (8008508 <__libc_init_array+0x44>)
 80084d8:	f000 fee2 	bl	80092a0 <_init>
 80084dc:	1b64      	subs	r4, r4, r5
 80084de:	10a4      	asrs	r4, r4, #2
 80084e0:	2600      	movs	r6, #0
 80084e2:	42a6      	cmp	r6, r4
 80084e4:	d105      	bne.n	80084f2 <__libc_init_array+0x2e>
 80084e6:	bd70      	pop	{r4, r5, r6, pc}
 80084e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ec:	4798      	blx	r3
 80084ee:	3601      	adds	r6, #1
 80084f0:	e7ee      	b.n	80084d0 <__libc_init_array+0xc>
 80084f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80084f6:	4798      	blx	r3
 80084f8:	3601      	adds	r6, #1
 80084fa:	e7f2      	b.n	80084e2 <__libc_init_array+0x1e>
 80084fc:	080094b0 	.word	0x080094b0
 8008500:	080094b0 	.word	0x080094b0
 8008504:	080094b0 	.word	0x080094b0
 8008508:	080094b4 	.word	0x080094b4

0800850c <__retarget_lock_init_recursive>:
 800850c:	4770      	bx	lr

0800850e <__retarget_lock_acquire_recursive>:
 800850e:	4770      	bx	lr

08008510 <__retarget_lock_release_recursive>:
 8008510:	4770      	bx	lr
	...

08008514 <_free_r>:
 8008514:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008516:	2900      	cmp	r1, #0
 8008518:	d044      	beq.n	80085a4 <_free_r+0x90>
 800851a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800851e:	9001      	str	r0, [sp, #4]
 8008520:	2b00      	cmp	r3, #0
 8008522:	f1a1 0404 	sub.w	r4, r1, #4
 8008526:	bfb8      	it	lt
 8008528:	18e4      	addlt	r4, r4, r3
 800852a:	f000 f8df 	bl	80086ec <__malloc_lock>
 800852e:	4a1e      	ldr	r2, [pc, #120]	; (80085a8 <_free_r+0x94>)
 8008530:	9801      	ldr	r0, [sp, #4]
 8008532:	6813      	ldr	r3, [r2, #0]
 8008534:	b933      	cbnz	r3, 8008544 <_free_r+0x30>
 8008536:	6063      	str	r3, [r4, #4]
 8008538:	6014      	str	r4, [r2, #0]
 800853a:	b003      	add	sp, #12
 800853c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008540:	f000 b8da 	b.w	80086f8 <__malloc_unlock>
 8008544:	42a3      	cmp	r3, r4
 8008546:	d908      	bls.n	800855a <_free_r+0x46>
 8008548:	6825      	ldr	r5, [r4, #0]
 800854a:	1961      	adds	r1, r4, r5
 800854c:	428b      	cmp	r3, r1
 800854e:	bf01      	itttt	eq
 8008550:	6819      	ldreq	r1, [r3, #0]
 8008552:	685b      	ldreq	r3, [r3, #4]
 8008554:	1949      	addeq	r1, r1, r5
 8008556:	6021      	streq	r1, [r4, #0]
 8008558:	e7ed      	b.n	8008536 <_free_r+0x22>
 800855a:	461a      	mov	r2, r3
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	b10b      	cbz	r3, 8008564 <_free_r+0x50>
 8008560:	42a3      	cmp	r3, r4
 8008562:	d9fa      	bls.n	800855a <_free_r+0x46>
 8008564:	6811      	ldr	r1, [r2, #0]
 8008566:	1855      	adds	r5, r2, r1
 8008568:	42a5      	cmp	r5, r4
 800856a:	d10b      	bne.n	8008584 <_free_r+0x70>
 800856c:	6824      	ldr	r4, [r4, #0]
 800856e:	4421      	add	r1, r4
 8008570:	1854      	adds	r4, r2, r1
 8008572:	42a3      	cmp	r3, r4
 8008574:	6011      	str	r1, [r2, #0]
 8008576:	d1e0      	bne.n	800853a <_free_r+0x26>
 8008578:	681c      	ldr	r4, [r3, #0]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	6053      	str	r3, [r2, #4]
 800857e:	440c      	add	r4, r1
 8008580:	6014      	str	r4, [r2, #0]
 8008582:	e7da      	b.n	800853a <_free_r+0x26>
 8008584:	d902      	bls.n	800858c <_free_r+0x78>
 8008586:	230c      	movs	r3, #12
 8008588:	6003      	str	r3, [r0, #0]
 800858a:	e7d6      	b.n	800853a <_free_r+0x26>
 800858c:	6825      	ldr	r5, [r4, #0]
 800858e:	1961      	adds	r1, r4, r5
 8008590:	428b      	cmp	r3, r1
 8008592:	bf04      	itt	eq
 8008594:	6819      	ldreq	r1, [r3, #0]
 8008596:	685b      	ldreq	r3, [r3, #4]
 8008598:	6063      	str	r3, [r4, #4]
 800859a:	bf04      	itt	eq
 800859c:	1949      	addeq	r1, r1, r5
 800859e:	6021      	streq	r1, [r4, #0]
 80085a0:	6054      	str	r4, [r2, #4]
 80085a2:	e7ca      	b.n	800853a <_free_r+0x26>
 80085a4:	b003      	add	sp, #12
 80085a6:	bd30      	pop	{r4, r5, pc}
 80085a8:	20000c90 	.word	0x20000c90

080085ac <sbrk_aligned>:
 80085ac:	b570      	push	{r4, r5, r6, lr}
 80085ae:	4e0e      	ldr	r6, [pc, #56]	; (80085e8 <sbrk_aligned+0x3c>)
 80085b0:	460c      	mov	r4, r1
 80085b2:	6831      	ldr	r1, [r6, #0]
 80085b4:	4605      	mov	r5, r0
 80085b6:	b911      	cbnz	r1, 80085be <sbrk_aligned+0x12>
 80085b8:	f000 fe1c 	bl	80091f4 <_sbrk_r>
 80085bc:	6030      	str	r0, [r6, #0]
 80085be:	4621      	mov	r1, r4
 80085c0:	4628      	mov	r0, r5
 80085c2:	f000 fe17 	bl	80091f4 <_sbrk_r>
 80085c6:	1c43      	adds	r3, r0, #1
 80085c8:	d00a      	beq.n	80085e0 <sbrk_aligned+0x34>
 80085ca:	1cc4      	adds	r4, r0, #3
 80085cc:	f024 0403 	bic.w	r4, r4, #3
 80085d0:	42a0      	cmp	r0, r4
 80085d2:	d007      	beq.n	80085e4 <sbrk_aligned+0x38>
 80085d4:	1a21      	subs	r1, r4, r0
 80085d6:	4628      	mov	r0, r5
 80085d8:	f000 fe0c 	bl	80091f4 <_sbrk_r>
 80085dc:	3001      	adds	r0, #1
 80085de:	d101      	bne.n	80085e4 <sbrk_aligned+0x38>
 80085e0:	f04f 34ff 	mov.w	r4, #4294967295
 80085e4:	4620      	mov	r0, r4
 80085e6:	bd70      	pop	{r4, r5, r6, pc}
 80085e8:	20000c94 	.word	0x20000c94

080085ec <_malloc_r>:
 80085ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085f0:	1ccd      	adds	r5, r1, #3
 80085f2:	f025 0503 	bic.w	r5, r5, #3
 80085f6:	3508      	adds	r5, #8
 80085f8:	2d0c      	cmp	r5, #12
 80085fa:	bf38      	it	cc
 80085fc:	250c      	movcc	r5, #12
 80085fe:	2d00      	cmp	r5, #0
 8008600:	4607      	mov	r7, r0
 8008602:	db01      	blt.n	8008608 <_malloc_r+0x1c>
 8008604:	42a9      	cmp	r1, r5
 8008606:	d905      	bls.n	8008614 <_malloc_r+0x28>
 8008608:	230c      	movs	r3, #12
 800860a:	603b      	str	r3, [r7, #0]
 800860c:	2600      	movs	r6, #0
 800860e:	4630      	mov	r0, r6
 8008610:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008614:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80086e8 <_malloc_r+0xfc>
 8008618:	f000 f868 	bl	80086ec <__malloc_lock>
 800861c:	f8d8 3000 	ldr.w	r3, [r8]
 8008620:	461c      	mov	r4, r3
 8008622:	bb5c      	cbnz	r4, 800867c <_malloc_r+0x90>
 8008624:	4629      	mov	r1, r5
 8008626:	4638      	mov	r0, r7
 8008628:	f7ff ffc0 	bl	80085ac <sbrk_aligned>
 800862c:	1c43      	adds	r3, r0, #1
 800862e:	4604      	mov	r4, r0
 8008630:	d155      	bne.n	80086de <_malloc_r+0xf2>
 8008632:	f8d8 4000 	ldr.w	r4, [r8]
 8008636:	4626      	mov	r6, r4
 8008638:	2e00      	cmp	r6, #0
 800863a:	d145      	bne.n	80086c8 <_malloc_r+0xdc>
 800863c:	2c00      	cmp	r4, #0
 800863e:	d048      	beq.n	80086d2 <_malloc_r+0xe6>
 8008640:	6823      	ldr	r3, [r4, #0]
 8008642:	4631      	mov	r1, r6
 8008644:	4638      	mov	r0, r7
 8008646:	eb04 0903 	add.w	r9, r4, r3
 800864a:	f000 fdd3 	bl	80091f4 <_sbrk_r>
 800864e:	4581      	cmp	r9, r0
 8008650:	d13f      	bne.n	80086d2 <_malloc_r+0xe6>
 8008652:	6821      	ldr	r1, [r4, #0]
 8008654:	1a6d      	subs	r5, r5, r1
 8008656:	4629      	mov	r1, r5
 8008658:	4638      	mov	r0, r7
 800865a:	f7ff ffa7 	bl	80085ac <sbrk_aligned>
 800865e:	3001      	adds	r0, #1
 8008660:	d037      	beq.n	80086d2 <_malloc_r+0xe6>
 8008662:	6823      	ldr	r3, [r4, #0]
 8008664:	442b      	add	r3, r5
 8008666:	6023      	str	r3, [r4, #0]
 8008668:	f8d8 3000 	ldr.w	r3, [r8]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d038      	beq.n	80086e2 <_malloc_r+0xf6>
 8008670:	685a      	ldr	r2, [r3, #4]
 8008672:	42a2      	cmp	r2, r4
 8008674:	d12b      	bne.n	80086ce <_malloc_r+0xe2>
 8008676:	2200      	movs	r2, #0
 8008678:	605a      	str	r2, [r3, #4]
 800867a:	e00f      	b.n	800869c <_malloc_r+0xb0>
 800867c:	6822      	ldr	r2, [r4, #0]
 800867e:	1b52      	subs	r2, r2, r5
 8008680:	d41f      	bmi.n	80086c2 <_malloc_r+0xd6>
 8008682:	2a0b      	cmp	r2, #11
 8008684:	d917      	bls.n	80086b6 <_malloc_r+0xca>
 8008686:	1961      	adds	r1, r4, r5
 8008688:	42a3      	cmp	r3, r4
 800868a:	6025      	str	r5, [r4, #0]
 800868c:	bf18      	it	ne
 800868e:	6059      	strne	r1, [r3, #4]
 8008690:	6863      	ldr	r3, [r4, #4]
 8008692:	bf08      	it	eq
 8008694:	f8c8 1000 	streq.w	r1, [r8]
 8008698:	5162      	str	r2, [r4, r5]
 800869a:	604b      	str	r3, [r1, #4]
 800869c:	4638      	mov	r0, r7
 800869e:	f104 060b 	add.w	r6, r4, #11
 80086a2:	f000 f829 	bl	80086f8 <__malloc_unlock>
 80086a6:	f026 0607 	bic.w	r6, r6, #7
 80086aa:	1d23      	adds	r3, r4, #4
 80086ac:	1af2      	subs	r2, r6, r3
 80086ae:	d0ae      	beq.n	800860e <_malloc_r+0x22>
 80086b0:	1b9b      	subs	r3, r3, r6
 80086b2:	50a3      	str	r3, [r4, r2]
 80086b4:	e7ab      	b.n	800860e <_malloc_r+0x22>
 80086b6:	42a3      	cmp	r3, r4
 80086b8:	6862      	ldr	r2, [r4, #4]
 80086ba:	d1dd      	bne.n	8008678 <_malloc_r+0x8c>
 80086bc:	f8c8 2000 	str.w	r2, [r8]
 80086c0:	e7ec      	b.n	800869c <_malloc_r+0xb0>
 80086c2:	4623      	mov	r3, r4
 80086c4:	6864      	ldr	r4, [r4, #4]
 80086c6:	e7ac      	b.n	8008622 <_malloc_r+0x36>
 80086c8:	4634      	mov	r4, r6
 80086ca:	6876      	ldr	r6, [r6, #4]
 80086cc:	e7b4      	b.n	8008638 <_malloc_r+0x4c>
 80086ce:	4613      	mov	r3, r2
 80086d0:	e7cc      	b.n	800866c <_malloc_r+0x80>
 80086d2:	230c      	movs	r3, #12
 80086d4:	603b      	str	r3, [r7, #0]
 80086d6:	4638      	mov	r0, r7
 80086d8:	f000 f80e 	bl	80086f8 <__malloc_unlock>
 80086dc:	e797      	b.n	800860e <_malloc_r+0x22>
 80086de:	6025      	str	r5, [r4, #0]
 80086e0:	e7dc      	b.n	800869c <_malloc_r+0xb0>
 80086e2:	605b      	str	r3, [r3, #4]
 80086e4:	deff      	udf	#255	; 0xff
 80086e6:	bf00      	nop
 80086e8:	20000c90 	.word	0x20000c90

080086ec <__malloc_lock>:
 80086ec:	4801      	ldr	r0, [pc, #4]	; (80086f4 <__malloc_lock+0x8>)
 80086ee:	f7ff bf0e 	b.w	800850e <__retarget_lock_acquire_recursive>
 80086f2:	bf00      	nop
 80086f4:	20000c8c 	.word	0x20000c8c

080086f8 <__malloc_unlock>:
 80086f8:	4801      	ldr	r0, [pc, #4]	; (8008700 <__malloc_unlock+0x8>)
 80086fa:	f7ff bf09 	b.w	8008510 <__retarget_lock_release_recursive>
 80086fe:	bf00      	nop
 8008700:	20000c8c 	.word	0x20000c8c

08008704 <__ssputs_r>:
 8008704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008708:	688e      	ldr	r6, [r1, #8]
 800870a:	461f      	mov	r7, r3
 800870c:	42be      	cmp	r6, r7
 800870e:	680b      	ldr	r3, [r1, #0]
 8008710:	4682      	mov	sl, r0
 8008712:	460c      	mov	r4, r1
 8008714:	4690      	mov	r8, r2
 8008716:	d82c      	bhi.n	8008772 <__ssputs_r+0x6e>
 8008718:	898a      	ldrh	r2, [r1, #12]
 800871a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800871e:	d026      	beq.n	800876e <__ssputs_r+0x6a>
 8008720:	6965      	ldr	r5, [r4, #20]
 8008722:	6909      	ldr	r1, [r1, #16]
 8008724:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008728:	eba3 0901 	sub.w	r9, r3, r1
 800872c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008730:	1c7b      	adds	r3, r7, #1
 8008732:	444b      	add	r3, r9
 8008734:	106d      	asrs	r5, r5, #1
 8008736:	429d      	cmp	r5, r3
 8008738:	bf38      	it	cc
 800873a:	461d      	movcc	r5, r3
 800873c:	0553      	lsls	r3, r2, #21
 800873e:	d527      	bpl.n	8008790 <__ssputs_r+0x8c>
 8008740:	4629      	mov	r1, r5
 8008742:	f7ff ff53 	bl	80085ec <_malloc_r>
 8008746:	4606      	mov	r6, r0
 8008748:	b360      	cbz	r0, 80087a4 <__ssputs_r+0xa0>
 800874a:	6921      	ldr	r1, [r4, #16]
 800874c:	464a      	mov	r2, r9
 800874e:	f000 fd61 	bl	8009214 <memcpy>
 8008752:	89a3      	ldrh	r3, [r4, #12]
 8008754:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800875c:	81a3      	strh	r3, [r4, #12]
 800875e:	6126      	str	r6, [r4, #16]
 8008760:	6165      	str	r5, [r4, #20]
 8008762:	444e      	add	r6, r9
 8008764:	eba5 0509 	sub.w	r5, r5, r9
 8008768:	6026      	str	r6, [r4, #0]
 800876a:	60a5      	str	r5, [r4, #8]
 800876c:	463e      	mov	r6, r7
 800876e:	42be      	cmp	r6, r7
 8008770:	d900      	bls.n	8008774 <__ssputs_r+0x70>
 8008772:	463e      	mov	r6, r7
 8008774:	6820      	ldr	r0, [r4, #0]
 8008776:	4632      	mov	r2, r6
 8008778:	4641      	mov	r1, r8
 800877a:	f000 fcff 	bl	800917c <memmove>
 800877e:	68a3      	ldr	r3, [r4, #8]
 8008780:	1b9b      	subs	r3, r3, r6
 8008782:	60a3      	str	r3, [r4, #8]
 8008784:	6823      	ldr	r3, [r4, #0]
 8008786:	4433      	add	r3, r6
 8008788:	6023      	str	r3, [r4, #0]
 800878a:	2000      	movs	r0, #0
 800878c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008790:	462a      	mov	r2, r5
 8008792:	f000 fd4d 	bl	8009230 <_realloc_r>
 8008796:	4606      	mov	r6, r0
 8008798:	2800      	cmp	r0, #0
 800879a:	d1e0      	bne.n	800875e <__ssputs_r+0x5a>
 800879c:	6921      	ldr	r1, [r4, #16]
 800879e:	4650      	mov	r0, sl
 80087a0:	f7ff feb8 	bl	8008514 <_free_r>
 80087a4:	230c      	movs	r3, #12
 80087a6:	f8ca 3000 	str.w	r3, [sl]
 80087aa:	89a3      	ldrh	r3, [r4, #12]
 80087ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087b0:	81a3      	strh	r3, [r4, #12]
 80087b2:	f04f 30ff 	mov.w	r0, #4294967295
 80087b6:	e7e9      	b.n	800878c <__ssputs_r+0x88>

080087b8 <_svfiprintf_r>:
 80087b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087bc:	4698      	mov	r8, r3
 80087be:	898b      	ldrh	r3, [r1, #12]
 80087c0:	061b      	lsls	r3, r3, #24
 80087c2:	b09d      	sub	sp, #116	; 0x74
 80087c4:	4607      	mov	r7, r0
 80087c6:	460d      	mov	r5, r1
 80087c8:	4614      	mov	r4, r2
 80087ca:	d50e      	bpl.n	80087ea <_svfiprintf_r+0x32>
 80087cc:	690b      	ldr	r3, [r1, #16]
 80087ce:	b963      	cbnz	r3, 80087ea <_svfiprintf_r+0x32>
 80087d0:	2140      	movs	r1, #64	; 0x40
 80087d2:	f7ff ff0b 	bl	80085ec <_malloc_r>
 80087d6:	6028      	str	r0, [r5, #0]
 80087d8:	6128      	str	r0, [r5, #16]
 80087da:	b920      	cbnz	r0, 80087e6 <_svfiprintf_r+0x2e>
 80087dc:	230c      	movs	r3, #12
 80087de:	603b      	str	r3, [r7, #0]
 80087e0:	f04f 30ff 	mov.w	r0, #4294967295
 80087e4:	e0d0      	b.n	8008988 <_svfiprintf_r+0x1d0>
 80087e6:	2340      	movs	r3, #64	; 0x40
 80087e8:	616b      	str	r3, [r5, #20]
 80087ea:	2300      	movs	r3, #0
 80087ec:	9309      	str	r3, [sp, #36]	; 0x24
 80087ee:	2320      	movs	r3, #32
 80087f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80087f8:	2330      	movs	r3, #48	; 0x30
 80087fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80089a0 <_svfiprintf_r+0x1e8>
 80087fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008802:	f04f 0901 	mov.w	r9, #1
 8008806:	4623      	mov	r3, r4
 8008808:	469a      	mov	sl, r3
 800880a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800880e:	b10a      	cbz	r2, 8008814 <_svfiprintf_r+0x5c>
 8008810:	2a25      	cmp	r2, #37	; 0x25
 8008812:	d1f9      	bne.n	8008808 <_svfiprintf_r+0x50>
 8008814:	ebba 0b04 	subs.w	fp, sl, r4
 8008818:	d00b      	beq.n	8008832 <_svfiprintf_r+0x7a>
 800881a:	465b      	mov	r3, fp
 800881c:	4622      	mov	r2, r4
 800881e:	4629      	mov	r1, r5
 8008820:	4638      	mov	r0, r7
 8008822:	f7ff ff6f 	bl	8008704 <__ssputs_r>
 8008826:	3001      	adds	r0, #1
 8008828:	f000 80a9 	beq.w	800897e <_svfiprintf_r+0x1c6>
 800882c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800882e:	445a      	add	r2, fp
 8008830:	9209      	str	r2, [sp, #36]	; 0x24
 8008832:	f89a 3000 	ldrb.w	r3, [sl]
 8008836:	2b00      	cmp	r3, #0
 8008838:	f000 80a1 	beq.w	800897e <_svfiprintf_r+0x1c6>
 800883c:	2300      	movs	r3, #0
 800883e:	f04f 32ff 	mov.w	r2, #4294967295
 8008842:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008846:	f10a 0a01 	add.w	sl, sl, #1
 800884a:	9304      	str	r3, [sp, #16]
 800884c:	9307      	str	r3, [sp, #28]
 800884e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008852:	931a      	str	r3, [sp, #104]	; 0x68
 8008854:	4654      	mov	r4, sl
 8008856:	2205      	movs	r2, #5
 8008858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800885c:	4850      	ldr	r0, [pc, #320]	; (80089a0 <_svfiprintf_r+0x1e8>)
 800885e:	f7f7 fcc7 	bl	80001f0 <memchr>
 8008862:	9a04      	ldr	r2, [sp, #16]
 8008864:	b9d8      	cbnz	r0, 800889e <_svfiprintf_r+0xe6>
 8008866:	06d0      	lsls	r0, r2, #27
 8008868:	bf44      	itt	mi
 800886a:	2320      	movmi	r3, #32
 800886c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008870:	0711      	lsls	r1, r2, #28
 8008872:	bf44      	itt	mi
 8008874:	232b      	movmi	r3, #43	; 0x2b
 8008876:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800887a:	f89a 3000 	ldrb.w	r3, [sl]
 800887e:	2b2a      	cmp	r3, #42	; 0x2a
 8008880:	d015      	beq.n	80088ae <_svfiprintf_r+0xf6>
 8008882:	9a07      	ldr	r2, [sp, #28]
 8008884:	4654      	mov	r4, sl
 8008886:	2000      	movs	r0, #0
 8008888:	f04f 0c0a 	mov.w	ip, #10
 800888c:	4621      	mov	r1, r4
 800888e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008892:	3b30      	subs	r3, #48	; 0x30
 8008894:	2b09      	cmp	r3, #9
 8008896:	d94d      	bls.n	8008934 <_svfiprintf_r+0x17c>
 8008898:	b1b0      	cbz	r0, 80088c8 <_svfiprintf_r+0x110>
 800889a:	9207      	str	r2, [sp, #28]
 800889c:	e014      	b.n	80088c8 <_svfiprintf_r+0x110>
 800889e:	eba0 0308 	sub.w	r3, r0, r8
 80088a2:	fa09 f303 	lsl.w	r3, r9, r3
 80088a6:	4313      	orrs	r3, r2
 80088a8:	9304      	str	r3, [sp, #16]
 80088aa:	46a2      	mov	sl, r4
 80088ac:	e7d2      	b.n	8008854 <_svfiprintf_r+0x9c>
 80088ae:	9b03      	ldr	r3, [sp, #12]
 80088b0:	1d19      	adds	r1, r3, #4
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	9103      	str	r1, [sp, #12]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	bfbb      	ittet	lt
 80088ba:	425b      	neglt	r3, r3
 80088bc:	f042 0202 	orrlt.w	r2, r2, #2
 80088c0:	9307      	strge	r3, [sp, #28]
 80088c2:	9307      	strlt	r3, [sp, #28]
 80088c4:	bfb8      	it	lt
 80088c6:	9204      	strlt	r2, [sp, #16]
 80088c8:	7823      	ldrb	r3, [r4, #0]
 80088ca:	2b2e      	cmp	r3, #46	; 0x2e
 80088cc:	d10c      	bne.n	80088e8 <_svfiprintf_r+0x130>
 80088ce:	7863      	ldrb	r3, [r4, #1]
 80088d0:	2b2a      	cmp	r3, #42	; 0x2a
 80088d2:	d134      	bne.n	800893e <_svfiprintf_r+0x186>
 80088d4:	9b03      	ldr	r3, [sp, #12]
 80088d6:	1d1a      	adds	r2, r3, #4
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	9203      	str	r2, [sp, #12]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	bfb8      	it	lt
 80088e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80088e4:	3402      	adds	r4, #2
 80088e6:	9305      	str	r3, [sp, #20]
 80088e8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80089b0 <_svfiprintf_r+0x1f8>
 80088ec:	7821      	ldrb	r1, [r4, #0]
 80088ee:	2203      	movs	r2, #3
 80088f0:	4650      	mov	r0, sl
 80088f2:	f7f7 fc7d 	bl	80001f0 <memchr>
 80088f6:	b138      	cbz	r0, 8008908 <_svfiprintf_r+0x150>
 80088f8:	9b04      	ldr	r3, [sp, #16]
 80088fa:	eba0 000a 	sub.w	r0, r0, sl
 80088fe:	2240      	movs	r2, #64	; 0x40
 8008900:	4082      	lsls	r2, r0
 8008902:	4313      	orrs	r3, r2
 8008904:	3401      	adds	r4, #1
 8008906:	9304      	str	r3, [sp, #16]
 8008908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800890c:	4825      	ldr	r0, [pc, #148]	; (80089a4 <_svfiprintf_r+0x1ec>)
 800890e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008912:	2206      	movs	r2, #6
 8008914:	f7f7 fc6c 	bl	80001f0 <memchr>
 8008918:	2800      	cmp	r0, #0
 800891a:	d038      	beq.n	800898e <_svfiprintf_r+0x1d6>
 800891c:	4b22      	ldr	r3, [pc, #136]	; (80089a8 <_svfiprintf_r+0x1f0>)
 800891e:	bb1b      	cbnz	r3, 8008968 <_svfiprintf_r+0x1b0>
 8008920:	9b03      	ldr	r3, [sp, #12]
 8008922:	3307      	adds	r3, #7
 8008924:	f023 0307 	bic.w	r3, r3, #7
 8008928:	3308      	adds	r3, #8
 800892a:	9303      	str	r3, [sp, #12]
 800892c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800892e:	4433      	add	r3, r6
 8008930:	9309      	str	r3, [sp, #36]	; 0x24
 8008932:	e768      	b.n	8008806 <_svfiprintf_r+0x4e>
 8008934:	fb0c 3202 	mla	r2, ip, r2, r3
 8008938:	460c      	mov	r4, r1
 800893a:	2001      	movs	r0, #1
 800893c:	e7a6      	b.n	800888c <_svfiprintf_r+0xd4>
 800893e:	2300      	movs	r3, #0
 8008940:	3401      	adds	r4, #1
 8008942:	9305      	str	r3, [sp, #20]
 8008944:	4619      	mov	r1, r3
 8008946:	f04f 0c0a 	mov.w	ip, #10
 800894a:	4620      	mov	r0, r4
 800894c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008950:	3a30      	subs	r2, #48	; 0x30
 8008952:	2a09      	cmp	r2, #9
 8008954:	d903      	bls.n	800895e <_svfiprintf_r+0x1a6>
 8008956:	2b00      	cmp	r3, #0
 8008958:	d0c6      	beq.n	80088e8 <_svfiprintf_r+0x130>
 800895a:	9105      	str	r1, [sp, #20]
 800895c:	e7c4      	b.n	80088e8 <_svfiprintf_r+0x130>
 800895e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008962:	4604      	mov	r4, r0
 8008964:	2301      	movs	r3, #1
 8008966:	e7f0      	b.n	800894a <_svfiprintf_r+0x192>
 8008968:	ab03      	add	r3, sp, #12
 800896a:	9300      	str	r3, [sp, #0]
 800896c:	462a      	mov	r2, r5
 800896e:	4b0f      	ldr	r3, [pc, #60]	; (80089ac <_svfiprintf_r+0x1f4>)
 8008970:	a904      	add	r1, sp, #16
 8008972:	4638      	mov	r0, r7
 8008974:	f3af 8000 	nop.w
 8008978:	1c42      	adds	r2, r0, #1
 800897a:	4606      	mov	r6, r0
 800897c:	d1d6      	bne.n	800892c <_svfiprintf_r+0x174>
 800897e:	89ab      	ldrh	r3, [r5, #12]
 8008980:	065b      	lsls	r3, r3, #25
 8008982:	f53f af2d 	bmi.w	80087e0 <_svfiprintf_r+0x28>
 8008986:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008988:	b01d      	add	sp, #116	; 0x74
 800898a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800898e:	ab03      	add	r3, sp, #12
 8008990:	9300      	str	r3, [sp, #0]
 8008992:	462a      	mov	r2, r5
 8008994:	4b05      	ldr	r3, [pc, #20]	; (80089ac <_svfiprintf_r+0x1f4>)
 8008996:	a904      	add	r1, sp, #16
 8008998:	4638      	mov	r0, r7
 800899a:	f000 f9bd 	bl	8008d18 <_printf_i>
 800899e:	e7eb      	b.n	8008978 <_svfiprintf_r+0x1c0>
 80089a0:	08009474 	.word	0x08009474
 80089a4:	0800947e 	.word	0x0800947e
 80089a8:	00000000 	.word	0x00000000
 80089ac:	08008705 	.word	0x08008705
 80089b0:	0800947a 	.word	0x0800947a

080089b4 <__sfputc_r>:
 80089b4:	6893      	ldr	r3, [r2, #8]
 80089b6:	3b01      	subs	r3, #1
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	b410      	push	{r4}
 80089bc:	6093      	str	r3, [r2, #8]
 80089be:	da08      	bge.n	80089d2 <__sfputc_r+0x1e>
 80089c0:	6994      	ldr	r4, [r2, #24]
 80089c2:	42a3      	cmp	r3, r4
 80089c4:	db01      	blt.n	80089ca <__sfputc_r+0x16>
 80089c6:	290a      	cmp	r1, #10
 80089c8:	d103      	bne.n	80089d2 <__sfputc_r+0x1e>
 80089ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089ce:	f7ff bc90 	b.w	80082f2 <__swbuf_r>
 80089d2:	6813      	ldr	r3, [r2, #0]
 80089d4:	1c58      	adds	r0, r3, #1
 80089d6:	6010      	str	r0, [r2, #0]
 80089d8:	7019      	strb	r1, [r3, #0]
 80089da:	4608      	mov	r0, r1
 80089dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089e0:	4770      	bx	lr

080089e2 <__sfputs_r>:
 80089e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089e4:	4606      	mov	r6, r0
 80089e6:	460f      	mov	r7, r1
 80089e8:	4614      	mov	r4, r2
 80089ea:	18d5      	adds	r5, r2, r3
 80089ec:	42ac      	cmp	r4, r5
 80089ee:	d101      	bne.n	80089f4 <__sfputs_r+0x12>
 80089f0:	2000      	movs	r0, #0
 80089f2:	e007      	b.n	8008a04 <__sfputs_r+0x22>
 80089f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089f8:	463a      	mov	r2, r7
 80089fa:	4630      	mov	r0, r6
 80089fc:	f7ff ffda 	bl	80089b4 <__sfputc_r>
 8008a00:	1c43      	adds	r3, r0, #1
 8008a02:	d1f3      	bne.n	80089ec <__sfputs_r+0xa>
 8008a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a08 <_vfiprintf_r>:
 8008a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a0c:	460d      	mov	r5, r1
 8008a0e:	b09d      	sub	sp, #116	; 0x74
 8008a10:	4614      	mov	r4, r2
 8008a12:	4698      	mov	r8, r3
 8008a14:	4606      	mov	r6, r0
 8008a16:	b118      	cbz	r0, 8008a20 <_vfiprintf_r+0x18>
 8008a18:	6a03      	ldr	r3, [r0, #32]
 8008a1a:	b90b      	cbnz	r3, 8008a20 <_vfiprintf_r+0x18>
 8008a1c:	f7ff fb62 	bl	80080e4 <__sinit>
 8008a20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a22:	07d9      	lsls	r1, r3, #31
 8008a24:	d405      	bmi.n	8008a32 <_vfiprintf_r+0x2a>
 8008a26:	89ab      	ldrh	r3, [r5, #12]
 8008a28:	059a      	lsls	r2, r3, #22
 8008a2a:	d402      	bmi.n	8008a32 <_vfiprintf_r+0x2a>
 8008a2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a2e:	f7ff fd6e 	bl	800850e <__retarget_lock_acquire_recursive>
 8008a32:	89ab      	ldrh	r3, [r5, #12]
 8008a34:	071b      	lsls	r3, r3, #28
 8008a36:	d501      	bpl.n	8008a3c <_vfiprintf_r+0x34>
 8008a38:	692b      	ldr	r3, [r5, #16]
 8008a3a:	b99b      	cbnz	r3, 8008a64 <_vfiprintf_r+0x5c>
 8008a3c:	4629      	mov	r1, r5
 8008a3e:	4630      	mov	r0, r6
 8008a40:	f7ff fc94 	bl	800836c <__swsetup_r>
 8008a44:	b170      	cbz	r0, 8008a64 <_vfiprintf_r+0x5c>
 8008a46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a48:	07dc      	lsls	r4, r3, #31
 8008a4a:	d504      	bpl.n	8008a56 <_vfiprintf_r+0x4e>
 8008a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a50:	b01d      	add	sp, #116	; 0x74
 8008a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a56:	89ab      	ldrh	r3, [r5, #12]
 8008a58:	0598      	lsls	r0, r3, #22
 8008a5a:	d4f7      	bmi.n	8008a4c <_vfiprintf_r+0x44>
 8008a5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a5e:	f7ff fd57 	bl	8008510 <__retarget_lock_release_recursive>
 8008a62:	e7f3      	b.n	8008a4c <_vfiprintf_r+0x44>
 8008a64:	2300      	movs	r3, #0
 8008a66:	9309      	str	r3, [sp, #36]	; 0x24
 8008a68:	2320      	movs	r3, #32
 8008a6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a72:	2330      	movs	r3, #48	; 0x30
 8008a74:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008c28 <_vfiprintf_r+0x220>
 8008a78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a7c:	f04f 0901 	mov.w	r9, #1
 8008a80:	4623      	mov	r3, r4
 8008a82:	469a      	mov	sl, r3
 8008a84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a88:	b10a      	cbz	r2, 8008a8e <_vfiprintf_r+0x86>
 8008a8a:	2a25      	cmp	r2, #37	; 0x25
 8008a8c:	d1f9      	bne.n	8008a82 <_vfiprintf_r+0x7a>
 8008a8e:	ebba 0b04 	subs.w	fp, sl, r4
 8008a92:	d00b      	beq.n	8008aac <_vfiprintf_r+0xa4>
 8008a94:	465b      	mov	r3, fp
 8008a96:	4622      	mov	r2, r4
 8008a98:	4629      	mov	r1, r5
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	f7ff ffa1 	bl	80089e2 <__sfputs_r>
 8008aa0:	3001      	adds	r0, #1
 8008aa2:	f000 80a9 	beq.w	8008bf8 <_vfiprintf_r+0x1f0>
 8008aa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008aa8:	445a      	add	r2, fp
 8008aaa:	9209      	str	r2, [sp, #36]	; 0x24
 8008aac:	f89a 3000 	ldrb.w	r3, [sl]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	f000 80a1 	beq.w	8008bf8 <_vfiprintf_r+0x1f0>
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8008abc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ac0:	f10a 0a01 	add.w	sl, sl, #1
 8008ac4:	9304      	str	r3, [sp, #16]
 8008ac6:	9307      	str	r3, [sp, #28]
 8008ac8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008acc:	931a      	str	r3, [sp, #104]	; 0x68
 8008ace:	4654      	mov	r4, sl
 8008ad0:	2205      	movs	r2, #5
 8008ad2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ad6:	4854      	ldr	r0, [pc, #336]	; (8008c28 <_vfiprintf_r+0x220>)
 8008ad8:	f7f7 fb8a 	bl	80001f0 <memchr>
 8008adc:	9a04      	ldr	r2, [sp, #16]
 8008ade:	b9d8      	cbnz	r0, 8008b18 <_vfiprintf_r+0x110>
 8008ae0:	06d1      	lsls	r1, r2, #27
 8008ae2:	bf44      	itt	mi
 8008ae4:	2320      	movmi	r3, #32
 8008ae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008aea:	0713      	lsls	r3, r2, #28
 8008aec:	bf44      	itt	mi
 8008aee:	232b      	movmi	r3, #43	; 0x2b
 8008af0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008af4:	f89a 3000 	ldrb.w	r3, [sl]
 8008af8:	2b2a      	cmp	r3, #42	; 0x2a
 8008afa:	d015      	beq.n	8008b28 <_vfiprintf_r+0x120>
 8008afc:	9a07      	ldr	r2, [sp, #28]
 8008afe:	4654      	mov	r4, sl
 8008b00:	2000      	movs	r0, #0
 8008b02:	f04f 0c0a 	mov.w	ip, #10
 8008b06:	4621      	mov	r1, r4
 8008b08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b0c:	3b30      	subs	r3, #48	; 0x30
 8008b0e:	2b09      	cmp	r3, #9
 8008b10:	d94d      	bls.n	8008bae <_vfiprintf_r+0x1a6>
 8008b12:	b1b0      	cbz	r0, 8008b42 <_vfiprintf_r+0x13a>
 8008b14:	9207      	str	r2, [sp, #28]
 8008b16:	e014      	b.n	8008b42 <_vfiprintf_r+0x13a>
 8008b18:	eba0 0308 	sub.w	r3, r0, r8
 8008b1c:	fa09 f303 	lsl.w	r3, r9, r3
 8008b20:	4313      	orrs	r3, r2
 8008b22:	9304      	str	r3, [sp, #16]
 8008b24:	46a2      	mov	sl, r4
 8008b26:	e7d2      	b.n	8008ace <_vfiprintf_r+0xc6>
 8008b28:	9b03      	ldr	r3, [sp, #12]
 8008b2a:	1d19      	adds	r1, r3, #4
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	9103      	str	r1, [sp, #12]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	bfbb      	ittet	lt
 8008b34:	425b      	neglt	r3, r3
 8008b36:	f042 0202 	orrlt.w	r2, r2, #2
 8008b3a:	9307      	strge	r3, [sp, #28]
 8008b3c:	9307      	strlt	r3, [sp, #28]
 8008b3e:	bfb8      	it	lt
 8008b40:	9204      	strlt	r2, [sp, #16]
 8008b42:	7823      	ldrb	r3, [r4, #0]
 8008b44:	2b2e      	cmp	r3, #46	; 0x2e
 8008b46:	d10c      	bne.n	8008b62 <_vfiprintf_r+0x15a>
 8008b48:	7863      	ldrb	r3, [r4, #1]
 8008b4a:	2b2a      	cmp	r3, #42	; 0x2a
 8008b4c:	d134      	bne.n	8008bb8 <_vfiprintf_r+0x1b0>
 8008b4e:	9b03      	ldr	r3, [sp, #12]
 8008b50:	1d1a      	adds	r2, r3, #4
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	9203      	str	r2, [sp, #12]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	bfb8      	it	lt
 8008b5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b5e:	3402      	adds	r4, #2
 8008b60:	9305      	str	r3, [sp, #20]
 8008b62:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008c38 <_vfiprintf_r+0x230>
 8008b66:	7821      	ldrb	r1, [r4, #0]
 8008b68:	2203      	movs	r2, #3
 8008b6a:	4650      	mov	r0, sl
 8008b6c:	f7f7 fb40 	bl	80001f0 <memchr>
 8008b70:	b138      	cbz	r0, 8008b82 <_vfiprintf_r+0x17a>
 8008b72:	9b04      	ldr	r3, [sp, #16]
 8008b74:	eba0 000a 	sub.w	r0, r0, sl
 8008b78:	2240      	movs	r2, #64	; 0x40
 8008b7a:	4082      	lsls	r2, r0
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	3401      	adds	r4, #1
 8008b80:	9304      	str	r3, [sp, #16]
 8008b82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b86:	4829      	ldr	r0, [pc, #164]	; (8008c2c <_vfiprintf_r+0x224>)
 8008b88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b8c:	2206      	movs	r2, #6
 8008b8e:	f7f7 fb2f 	bl	80001f0 <memchr>
 8008b92:	2800      	cmp	r0, #0
 8008b94:	d03f      	beq.n	8008c16 <_vfiprintf_r+0x20e>
 8008b96:	4b26      	ldr	r3, [pc, #152]	; (8008c30 <_vfiprintf_r+0x228>)
 8008b98:	bb1b      	cbnz	r3, 8008be2 <_vfiprintf_r+0x1da>
 8008b9a:	9b03      	ldr	r3, [sp, #12]
 8008b9c:	3307      	adds	r3, #7
 8008b9e:	f023 0307 	bic.w	r3, r3, #7
 8008ba2:	3308      	adds	r3, #8
 8008ba4:	9303      	str	r3, [sp, #12]
 8008ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ba8:	443b      	add	r3, r7
 8008baa:	9309      	str	r3, [sp, #36]	; 0x24
 8008bac:	e768      	b.n	8008a80 <_vfiprintf_r+0x78>
 8008bae:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bb2:	460c      	mov	r4, r1
 8008bb4:	2001      	movs	r0, #1
 8008bb6:	e7a6      	b.n	8008b06 <_vfiprintf_r+0xfe>
 8008bb8:	2300      	movs	r3, #0
 8008bba:	3401      	adds	r4, #1
 8008bbc:	9305      	str	r3, [sp, #20]
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	f04f 0c0a 	mov.w	ip, #10
 8008bc4:	4620      	mov	r0, r4
 8008bc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bca:	3a30      	subs	r2, #48	; 0x30
 8008bcc:	2a09      	cmp	r2, #9
 8008bce:	d903      	bls.n	8008bd8 <_vfiprintf_r+0x1d0>
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d0c6      	beq.n	8008b62 <_vfiprintf_r+0x15a>
 8008bd4:	9105      	str	r1, [sp, #20]
 8008bd6:	e7c4      	b.n	8008b62 <_vfiprintf_r+0x15a>
 8008bd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bdc:	4604      	mov	r4, r0
 8008bde:	2301      	movs	r3, #1
 8008be0:	e7f0      	b.n	8008bc4 <_vfiprintf_r+0x1bc>
 8008be2:	ab03      	add	r3, sp, #12
 8008be4:	9300      	str	r3, [sp, #0]
 8008be6:	462a      	mov	r2, r5
 8008be8:	4b12      	ldr	r3, [pc, #72]	; (8008c34 <_vfiprintf_r+0x22c>)
 8008bea:	a904      	add	r1, sp, #16
 8008bec:	4630      	mov	r0, r6
 8008bee:	f3af 8000 	nop.w
 8008bf2:	4607      	mov	r7, r0
 8008bf4:	1c78      	adds	r0, r7, #1
 8008bf6:	d1d6      	bne.n	8008ba6 <_vfiprintf_r+0x19e>
 8008bf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bfa:	07d9      	lsls	r1, r3, #31
 8008bfc:	d405      	bmi.n	8008c0a <_vfiprintf_r+0x202>
 8008bfe:	89ab      	ldrh	r3, [r5, #12]
 8008c00:	059a      	lsls	r2, r3, #22
 8008c02:	d402      	bmi.n	8008c0a <_vfiprintf_r+0x202>
 8008c04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c06:	f7ff fc83 	bl	8008510 <__retarget_lock_release_recursive>
 8008c0a:	89ab      	ldrh	r3, [r5, #12]
 8008c0c:	065b      	lsls	r3, r3, #25
 8008c0e:	f53f af1d 	bmi.w	8008a4c <_vfiprintf_r+0x44>
 8008c12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c14:	e71c      	b.n	8008a50 <_vfiprintf_r+0x48>
 8008c16:	ab03      	add	r3, sp, #12
 8008c18:	9300      	str	r3, [sp, #0]
 8008c1a:	462a      	mov	r2, r5
 8008c1c:	4b05      	ldr	r3, [pc, #20]	; (8008c34 <_vfiprintf_r+0x22c>)
 8008c1e:	a904      	add	r1, sp, #16
 8008c20:	4630      	mov	r0, r6
 8008c22:	f000 f879 	bl	8008d18 <_printf_i>
 8008c26:	e7e4      	b.n	8008bf2 <_vfiprintf_r+0x1ea>
 8008c28:	08009474 	.word	0x08009474
 8008c2c:	0800947e 	.word	0x0800947e
 8008c30:	00000000 	.word	0x00000000
 8008c34:	080089e3 	.word	0x080089e3
 8008c38:	0800947a 	.word	0x0800947a

08008c3c <_printf_common>:
 8008c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c40:	4616      	mov	r6, r2
 8008c42:	4699      	mov	r9, r3
 8008c44:	688a      	ldr	r2, [r1, #8]
 8008c46:	690b      	ldr	r3, [r1, #16]
 8008c48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	bfb8      	it	lt
 8008c50:	4613      	movlt	r3, r2
 8008c52:	6033      	str	r3, [r6, #0]
 8008c54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c58:	4607      	mov	r7, r0
 8008c5a:	460c      	mov	r4, r1
 8008c5c:	b10a      	cbz	r2, 8008c62 <_printf_common+0x26>
 8008c5e:	3301      	adds	r3, #1
 8008c60:	6033      	str	r3, [r6, #0]
 8008c62:	6823      	ldr	r3, [r4, #0]
 8008c64:	0699      	lsls	r1, r3, #26
 8008c66:	bf42      	ittt	mi
 8008c68:	6833      	ldrmi	r3, [r6, #0]
 8008c6a:	3302      	addmi	r3, #2
 8008c6c:	6033      	strmi	r3, [r6, #0]
 8008c6e:	6825      	ldr	r5, [r4, #0]
 8008c70:	f015 0506 	ands.w	r5, r5, #6
 8008c74:	d106      	bne.n	8008c84 <_printf_common+0x48>
 8008c76:	f104 0a19 	add.w	sl, r4, #25
 8008c7a:	68e3      	ldr	r3, [r4, #12]
 8008c7c:	6832      	ldr	r2, [r6, #0]
 8008c7e:	1a9b      	subs	r3, r3, r2
 8008c80:	42ab      	cmp	r3, r5
 8008c82:	dc26      	bgt.n	8008cd2 <_printf_common+0x96>
 8008c84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c88:	1e13      	subs	r3, r2, #0
 8008c8a:	6822      	ldr	r2, [r4, #0]
 8008c8c:	bf18      	it	ne
 8008c8e:	2301      	movne	r3, #1
 8008c90:	0692      	lsls	r2, r2, #26
 8008c92:	d42b      	bmi.n	8008cec <_printf_common+0xb0>
 8008c94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c98:	4649      	mov	r1, r9
 8008c9a:	4638      	mov	r0, r7
 8008c9c:	47c0      	blx	r8
 8008c9e:	3001      	adds	r0, #1
 8008ca0:	d01e      	beq.n	8008ce0 <_printf_common+0xa4>
 8008ca2:	6823      	ldr	r3, [r4, #0]
 8008ca4:	6922      	ldr	r2, [r4, #16]
 8008ca6:	f003 0306 	and.w	r3, r3, #6
 8008caa:	2b04      	cmp	r3, #4
 8008cac:	bf02      	ittt	eq
 8008cae:	68e5      	ldreq	r5, [r4, #12]
 8008cb0:	6833      	ldreq	r3, [r6, #0]
 8008cb2:	1aed      	subeq	r5, r5, r3
 8008cb4:	68a3      	ldr	r3, [r4, #8]
 8008cb6:	bf0c      	ite	eq
 8008cb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008cbc:	2500      	movne	r5, #0
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	bfc4      	itt	gt
 8008cc2:	1a9b      	subgt	r3, r3, r2
 8008cc4:	18ed      	addgt	r5, r5, r3
 8008cc6:	2600      	movs	r6, #0
 8008cc8:	341a      	adds	r4, #26
 8008cca:	42b5      	cmp	r5, r6
 8008ccc:	d11a      	bne.n	8008d04 <_printf_common+0xc8>
 8008cce:	2000      	movs	r0, #0
 8008cd0:	e008      	b.n	8008ce4 <_printf_common+0xa8>
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	4652      	mov	r2, sl
 8008cd6:	4649      	mov	r1, r9
 8008cd8:	4638      	mov	r0, r7
 8008cda:	47c0      	blx	r8
 8008cdc:	3001      	adds	r0, #1
 8008cde:	d103      	bne.n	8008ce8 <_printf_common+0xac>
 8008ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ce8:	3501      	adds	r5, #1
 8008cea:	e7c6      	b.n	8008c7a <_printf_common+0x3e>
 8008cec:	18e1      	adds	r1, r4, r3
 8008cee:	1c5a      	adds	r2, r3, #1
 8008cf0:	2030      	movs	r0, #48	; 0x30
 8008cf2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008cf6:	4422      	add	r2, r4
 8008cf8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008cfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d00:	3302      	adds	r3, #2
 8008d02:	e7c7      	b.n	8008c94 <_printf_common+0x58>
 8008d04:	2301      	movs	r3, #1
 8008d06:	4622      	mov	r2, r4
 8008d08:	4649      	mov	r1, r9
 8008d0a:	4638      	mov	r0, r7
 8008d0c:	47c0      	blx	r8
 8008d0e:	3001      	adds	r0, #1
 8008d10:	d0e6      	beq.n	8008ce0 <_printf_common+0xa4>
 8008d12:	3601      	adds	r6, #1
 8008d14:	e7d9      	b.n	8008cca <_printf_common+0x8e>
	...

08008d18 <_printf_i>:
 8008d18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d1c:	7e0f      	ldrb	r7, [r1, #24]
 8008d1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d20:	2f78      	cmp	r7, #120	; 0x78
 8008d22:	4691      	mov	r9, r2
 8008d24:	4680      	mov	r8, r0
 8008d26:	460c      	mov	r4, r1
 8008d28:	469a      	mov	sl, r3
 8008d2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008d2e:	d807      	bhi.n	8008d40 <_printf_i+0x28>
 8008d30:	2f62      	cmp	r7, #98	; 0x62
 8008d32:	d80a      	bhi.n	8008d4a <_printf_i+0x32>
 8008d34:	2f00      	cmp	r7, #0
 8008d36:	f000 80d4 	beq.w	8008ee2 <_printf_i+0x1ca>
 8008d3a:	2f58      	cmp	r7, #88	; 0x58
 8008d3c:	f000 80c0 	beq.w	8008ec0 <_printf_i+0x1a8>
 8008d40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d48:	e03a      	b.n	8008dc0 <_printf_i+0xa8>
 8008d4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d4e:	2b15      	cmp	r3, #21
 8008d50:	d8f6      	bhi.n	8008d40 <_printf_i+0x28>
 8008d52:	a101      	add	r1, pc, #4	; (adr r1, 8008d58 <_printf_i+0x40>)
 8008d54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d58:	08008db1 	.word	0x08008db1
 8008d5c:	08008dc5 	.word	0x08008dc5
 8008d60:	08008d41 	.word	0x08008d41
 8008d64:	08008d41 	.word	0x08008d41
 8008d68:	08008d41 	.word	0x08008d41
 8008d6c:	08008d41 	.word	0x08008d41
 8008d70:	08008dc5 	.word	0x08008dc5
 8008d74:	08008d41 	.word	0x08008d41
 8008d78:	08008d41 	.word	0x08008d41
 8008d7c:	08008d41 	.word	0x08008d41
 8008d80:	08008d41 	.word	0x08008d41
 8008d84:	08008ec9 	.word	0x08008ec9
 8008d88:	08008df1 	.word	0x08008df1
 8008d8c:	08008e83 	.word	0x08008e83
 8008d90:	08008d41 	.word	0x08008d41
 8008d94:	08008d41 	.word	0x08008d41
 8008d98:	08008eeb 	.word	0x08008eeb
 8008d9c:	08008d41 	.word	0x08008d41
 8008da0:	08008df1 	.word	0x08008df1
 8008da4:	08008d41 	.word	0x08008d41
 8008da8:	08008d41 	.word	0x08008d41
 8008dac:	08008e8b 	.word	0x08008e8b
 8008db0:	682b      	ldr	r3, [r5, #0]
 8008db2:	1d1a      	adds	r2, r3, #4
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	602a      	str	r2, [r5, #0]
 8008db8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008dbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e09f      	b.n	8008f04 <_printf_i+0x1ec>
 8008dc4:	6820      	ldr	r0, [r4, #0]
 8008dc6:	682b      	ldr	r3, [r5, #0]
 8008dc8:	0607      	lsls	r7, r0, #24
 8008dca:	f103 0104 	add.w	r1, r3, #4
 8008dce:	6029      	str	r1, [r5, #0]
 8008dd0:	d501      	bpl.n	8008dd6 <_printf_i+0xbe>
 8008dd2:	681e      	ldr	r6, [r3, #0]
 8008dd4:	e003      	b.n	8008dde <_printf_i+0xc6>
 8008dd6:	0646      	lsls	r6, r0, #25
 8008dd8:	d5fb      	bpl.n	8008dd2 <_printf_i+0xba>
 8008dda:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008dde:	2e00      	cmp	r6, #0
 8008de0:	da03      	bge.n	8008dea <_printf_i+0xd2>
 8008de2:	232d      	movs	r3, #45	; 0x2d
 8008de4:	4276      	negs	r6, r6
 8008de6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dea:	485a      	ldr	r0, [pc, #360]	; (8008f54 <_printf_i+0x23c>)
 8008dec:	230a      	movs	r3, #10
 8008dee:	e012      	b.n	8008e16 <_printf_i+0xfe>
 8008df0:	682b      	ldr	r3, [r5, #0]
 8008df2:	6820      	ldr	r0, [r4, #0]
 8008df4:	1d19      	adds	r1, r3, #4
 8008df6:	6029      	str	r1, [r5, #0]
 8008df8:	0605      	lsls	r5, r0, #24
 8008dfa:	d501      	bpl.n	8008e00 <_printf_i+0xe8>
 8008dfc:	681e      	ldr	r6, [r3, #0]
 8008dfe:	e002      	b.n	8008e06 <_printf_i+0xee>
 8008e00:	0641      	lsls	r1, r0, #25
 8008e02:	d5fb      	bpl.n	8008dfc <_printf_i+0xe4>
 8008e04:	881e      	ldrh	r6, [r3, #0]
 8008e06:	4853      	ldr	r0, [pc, #332]	; (8008f54 <_printf_i+0x23c>)
 8008e08:	2f6f      	cmp	r7, #111	; 0x6f
 8008e0a:	bf0c      	ite	eq
 8008e0c:	2308      	moveq	r3, #8
 8008e0e:	230a      	movne	r3, #10
 8008e10:	2100      	movs	r1, #0
 8008e12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e16:	6865      	ldr	r5, [r4, #4]
 8008e18:	60a5      	str	r5, [r4, #8]
 8008e1a:	2d00      	cmp	r5, #0
 8008e1c:	bfa2      	ittt	ge
 8008e1e:	6821      	ldrge	r1, [r4, #0]
 8008e20:	f021 0104 	bicge.w	r1, r1, #4
 8008e24:	6021      	strge	r1, [r4, #0]
 8008e26:	b90e      	cbnz	r6, 8008e2c <_printf_i+0x114>
 8008e28:	2d00      	cmp	r5, #0
 8008e2a:	d04b      	beq.n	8008ec4 <_printf_i+0x1ac>
 8008e2c:	4615      	mov	r5, r2
 8008e2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008e32:	fb03 6711 	mls	r7, r3, r1, r6
 8008e36:	5dc7      	ldrb	r7, [r0, r7]
 8008e38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008e3c:	4637      	mov	r7, r6
 8008e3e:	42bb      	cmp	r3, r7
 8008e40:	460e      	mov	r6, r1
 8008e42:	d9f4      	bls.n	8008e2e <_printf_i+0x116>
 8008e44:	2b08      	cmp	r3, #8
 8008e46:	d10b      	bne.n	8008e60 <_printf_i+0x148>
 8008e48:	6823      	ldr	r3, [r4, #0]
 8008e4a:	07de      	lsls	r6, r3, #31
 8008e4c:	d508      	bpl.n	8008e60 <_printf_i+0x148>
 8008e4e:	6923      	ldr	r3, [r4, #16]
 8008e50:	6861      	ldr	r1, [r4, #4]
 8008e52:	4299      	cmp	r1, r3
 8008e54:	bfde      	ittt	le
 8008e56:	2330      	movle	r3, #48	; 0x30
 8008e58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e60:	1b52      	subs	r2, r2, r5
 8008e62:	6122      	str	r2, [r4, #16]
 8008e64:	f8cd a000 	str.w	sl, [sp]
 8008e68:	464b      	mov	r3, r9
 8008e6a:	aa03      	add	r2, sp, #12
 8008e6c:	4621      	mov	r1, r4
 8008e6e:	4640      	mov	r0, r8
 8008e70:	f7ff fee4 	bl	8008c3c <_printf_common>
 8008e74:	3001      	adds	r0, #1
 8008e76:	d14a      	bne.n	8008f0e <_printf_i+0x1f6>
 8008e78:	f04f 30ff 	mov.w	r0, #4294967295
 8008e7c:	b004      	add	sp, #16
 8008e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e82:	6823      	ldr	r3, [r4, #0]
 8008e84:	f043 0320 	orr.w	r3, r3, #32
 8008e88:	6023      	str	r3, [r4, #0]
 8008e8a:	4833      	ldr	r0, [pc, #204]	; (8008f58 <_printf_i+0x240>)
 8008e8c:	2778      	movs	r7, #120	; 0x78
 8008e8e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008e92:	6823      	ldr	r3, [r4, #0]
 8008e94:	6829      	ldr	r1, [r5, #0]
 8008e96:	061f      	lsls	r7, r3, #24
 8008e98:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e9c:	d402      	bmi.n	8008ea4 <_printf_i+0x18c>
 8008e9e:	065f      	lsls	r7, r3, #25
 8008ea0:	bf48      	it	mi
 8008ea2:	b2b6      	uxthmi	r6, r6
 8008ea4:	07df      	lsls	r7, r3, #31
 8008ea6:	bf48      	it	mi
 8008ea8:	f043 0320 	orrmi.w	r3, r3, #32
 8008eac:	6029      	str	r1, [r5, #0]
 8008eae:	bf48      	it	mi
 8008eb0:	6023      	strmi	r3, [r4, #0]
 8008eb2:	b91e      	cbnz	r6, 8008ebc <_printf_i+0x1a4>
 8008eb4:	6823      	ldr	r3, [r4, #0]
 8008eb6:	f023 0320 	bic.w	r3, r3, #32
 8008eba:	6023      	str	r3, [r4, #0]
 8008ebc:	2310      	movs	r3, #16
 8008ebe:	e7a7      	b.n	8008e10 <_printf_i+0xf8>
 8008ec0:	4824      	ldr	r0, [pc, #144]	; (8008f54 <_printf_i+0x23c>)
 8008ec2:	e7e4      	b.n	8008e8e <_printf_i+0x176>
 8008ec4:	4615      	mov	r5, r2
 8008ec6:	e7bd      	b.n	8008e44 <_printf_i+0x12c>
 8008ec8:	682b      	ldr	r3, [r5, #0]
 8008eca:	6826      	ldr	r6, [r4, #0]
 8008ecc:	6961      	ldr	r1, [r4, #20]
 8008ece:	1d18      	adds	r0, r3, #4
 8008ed0:	6028      	str	r0, [r5, #0]
 8008ed2:	0635      	lsls	r5, r6, #24
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	d501      	bpl.n	8008edc <_printf_i+0x1c4>
 8008ed8:	6019      	str	r1, [r3, #0]
 8008eda:	e002      	b.n	8008ee2 <_printf_i+0x1ca>
 8008edc:	0670      	lsls	r0, r6, #25
 8008ede:	d5fb      	bpl.n	8008ed8 <_printf_i+0x1c0>
 8008ee0:	8019      	strh	r1, [r3, #0]
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	6123      	str	r3, [r4, #16]
 8008ee6:	4615      	mov	r5, r2
 8008ee8:	e7bc      	b.n	8008e64 <_printf_i+0x14c>
 8008eea:	682b      	ldr	r3, [r5, #0]
 8008eec:	1d1a      	adds	r2, r3, #4
 8008eee:	602a      	str	r2, [r5, #0]
 8008ef0:	681d      	ldr	r5, [r3, #0]
 8008ef2:	6862      	ldr	r2, [r4, #4]
 8008ef4:	2100      	movs	r1, #0
 8008ef6:	4628      	mov	r0, r5
 8008ef8:	f7f7 f97a 	bl	80001f0 <memchr>
 8008efc:	b108      	cbz	r0, 8008f02 <_printf_i+0x1ea>
 8008efe:	1b40      	subs	r0, r0, r5
 8008f00:	6060      	str	r0, [r4, #4]
 8008f02:	6863      	ldr	r3, [r4, #4]
 8008f04:	6123      	str	r3, [r4, #16]
 8008f06:	2300      	movs	r3, #0
 8008f08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f0c:	e7aa      	b.n	8008e64 <_printf_i+0x14c>
 8008f0e:	6923      	ldr	r3, [r4, #16]
 8008f10:	462a      	mov	r2, r5
 8008f12:	4649      	mov	r1, r9
 8008f14:	4640      	mov	r0, r8
 8008f16:	47d0      	blx	sl
 8008f18:	3001      	adds	r0, #1
 8008f1a:	d0ad      	beq.n	8008e78 <_printf_i+0x160>
 8008f1c:	6823      	ldr	r3, [r4, #0]
 8008f1e:	079b      	lsls	r3, r3, #30
 8008f20:	d413      	bmi.n	8008f4a <_printf_i+0x232>
 8008f22:	68e0      	ldr	r0, [r4, #12]
 8008f24:	9b03      	ldr	r3, [sp, #12]
 8008f26:	4298      	cmp	r0, r3
 8008f28:	bfb8      	it	lt
 8008f2a:	4618      	movlt	r0, r3
 8008f2c:	e7a6      	b.n	8008e7c <_printf_i+0x164>
 8008f2e:	2301      	movs	r3, #1
 8008f30:	4632      	mov	r2, r6
 8008f32:	4649      	mov	r1, r9
 8008f34:	4640      	mov	r0, r8
 8008f36:	47d0      	blx	sl
 8008f38:	3001      	adds	r0, #1
 8008f3a:	d09d      	beq.n	8008e78 <_printf_i+0x160>
 8008f3c:	3501      	adds	r5, #1
 8008f3e:	68e3      	ldr	r3, [r4, #12]
 8008f40:	9903      	ldr	r1, [sp, #12]
 8008f42:	1a5b      	subs	r3, r3, r1
 8008f44:	42ab      	cmp	r3, r5
 8008f46:	dcf2      	bgt.n	8008f2e <_printf_i+0x216>
 8008f48:	e7eb      	b.n	8008f22 <_printf_i+0x20a>
 8008f4a:	2500      	movs	r5, #0
 8008f4c:	f104 0619 	add.w	r6, r4, #25
 8008f50:	e7f5      	b.n	8008f3e <_printf_i+0x226>
 8008f52:	bf00      	nop
 8008f54:	08009485 	.word	0x08009485
 8008f58:	08009496 	.word	0x08009496

08008f5c <__sflush_r>:
 8008f5c:	898a      	ldrh	r2, [r1, #12]
 8008f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f62:	4605      	mov	r5, r0
 8008f64:	0710      	lsls	r0, r2, #28
 8008f66:	460c      	mov	r4, r1
 8008f68:	d458      	bmi.n	800901c <__sflush_r+0xc0>
 8008f6a:	684b      	ldr	r3, [r1, #4]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	dc05      	bgt.n	8008f7c <__sflush_r+0x20>
 8008f70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	dc02      	bgt.n	8008f7c <__sflush_r+0x20>
 8008f76:	2000      	movs	r0, #0
 8008f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f7e:	2e00      	cmp	r6, #0
 8008f80:	d0f9      	beq.n	8008f76 <__sflush_r+0x1a>
 8008f82:	2300      	movs	r3, #0
 8008f84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f88:	682f      	ldr	r7, [r5, #0]
 8008f8a:	6a21      	ldr	r1, [r4, #32]
 8008f8c:	602b      	str	r3, [r5, #0]
 8008f8e:	d032      	beq.n	8008ff6 <__sflush_r+0x9a>
 8008f90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f92:	89a3      	ldrh	r3, [r4, #12]
 8008f94:	075a      	lsls	r2, r3, #29
 8008f96:	d505      	bpl.n	8008fa4 <__sflush_r+0x48>
 8008f98:	6863      	ldr	r3, [r4, #4]
 8008f9a:	1ac0      	subs	r0, r0, r3
 8008f9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f9e:	b10b      	cbz	r3, 8008fa4 <__sflush_r+0x48>
 8008fa0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008fa2:	1ac0      	subs	r0, r0, r3
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008faa:	6a21      	ldr	r1, [r4, #32]
 8008fac:	4628      	mov	r0, r5
 8008fae:	47b0      	blx	r6
 8008fb0:	1c43      	adds	r3, r0, #1
 8008fb2:	89a3      	ldrh	r3, [r4, #12]
 8008fb4:	d106      	bne.n	8008fc4 <__sflush_r+0x68>
 8008fb6:	6829      	ldr	r1, [r5, #0]
 8008fb8:	291d      	cmp	r1, #29
 8008fba:	d82b      	bhi.n	8009014 <__sflush_r+0xb8>
 8008fbc:	4a29      	ldr	r2, [pc, #164]	; (8009064 <__sflush_r+0x108>)
 8008fbe:	410a      	asrs	r2, r1
 8008fc0:	07d6      	lsls	r6, r2, #31
 8008fc2:	d427      	bmi.n	8009014 <__sflush_r+0xb8>
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	6062      	str	r2, [r4, #4]
 8008fc8:	04d9      	lsls	r1, r3, #19
 8008fca:	6922      	ldr	r2, [r4, #16]
 8008fcc:	6022      	str	r2, [r4, #0]
 8008fce:	d504      	bpl.n	8008fda <__sflush_r+0x7e>
 8008fd0:	1c42      	adds	r2, r0, #1
 8008fd2:	d101      	bne.n	8008fd8 <__sflush_r+0x7c>
 8008fd4:	682b      	ldr	r3, [r5, #0]
 8008fd6:	b903      	cbnz	r3, 8008fda <__sflush_r+0x7e>
 8008fd8:	6560      	str	r0, [r4, #84]	; 0x54
 8008fda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fdc:	602f      	str	r7, [r5, #0]
 8008fde:	2900      	cmp	r1, #0
 8008fe0:	d0c9      	beq.n	8008f76 <__sflush_r+0x1a>
 8008fe2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fe6:	4299      	cmp	r1, r3
 8008fe8:	d002      	beq.n	8008ff0 <__sflush_r+0x94>
 8008fea:	4628      	mov	r0, r5
 8008fec:	f7ff fa92 	bl	8008514 <_free_r>
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	6360      	str	r0, [r4, #52]	; 0x34
 8008ff4:	e7c0      	b.n	8008f78 <__sflush_r+0x1c>
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	4628      	mov	r0, r5
 8008ffa:	47b0      	blx	r6
 8008ffc:	1c41      	adds	r1, r0, #1
 8008ffe:	d1c8      	bne.n	8008f92 <__sflush_r+0x36>
 8009000:	682b      	ldr	r3, [r5, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d0c5      	beq.n	8008f92 <__sflush_r+0x36>
 8009006:	2b1d      	cmp	r3, #29
 8009008:	d001      	beq.n	800900e <__sflush_r+0xb2>
 800900a:	2b16      	cmp	r3, #22
 800900c:	d101      	bne.n	8009012 <__sflush_r+0xb6>
 800900e:	602f      	str	r7, [r5, #0]
 8009010:	e7b1      	b.n	8008f76 <__sflush_r+0x1a>
 8009012:	89a3      	ldrh	r3, [r4, #12]
 8009014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009018:	81a3      	strh	r3, [r4, #12]
 800901a:	e7ad      	b.n	8008f78 <__sflush_r+0x1c>
 800901c:	690f      	ldr	r7, [r1, #16]
 800901e:	2f00      	cmp	r7, #0
 8009020:	d0a9      	beq.n	8008f76 <__sflush_r+0x1a>
 8009022:	0793      	lsls	r3, r2, #30
 8009024:	680e      	ldr	r6, [r1, #0]
 8009026:	bf08      	it	eq
 8009028:	694b      	ldreq	r3, [r1, #20]
 800902a:	600f      	str	r7, [r1, #0]
 800902c:	bf18      	it	ne
 800902e:	2300      	movne	r3, #0
 8009030:	eba6 0807 	sub.w	r8, r6, r7
 8009034:	608b      	str	r3, [r1, #8]
 8009036:	f1b8 0f00 	cmp.w	r8, #0
 800903a:	dd9c      	ble.n	8008f76 <__sflush_r+0x1a>
 800903c:	6a21      	ldr	r1, [r4, #32]
 800903e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009040:	4643      	mov	r3, r8
 8009042:	463a      	mov	r2, r7
 8009044:	4628      	mov	r0, r5
 8009046:	47b0      	blx	r6
 8009048:	2800      	cmp	r0, #0
 800904a:	dc06      	bgt.n	800905a <__sflush_r+0xfe>
 800904c:	89a3      	ldrh	r3, [r4, #12]
 800904e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009052:	81a3      	strh	r3, [r4, #12]
 8009054:	f04f 30ff 	mov.w	r0, #4294967295
 8009058:	e78e      	b.n	8008f78 <__sflush_r+0x1c>
 800905a:	4407      	add	r7, r0
 800905c:	eba8 0800 	sub.w	r8, r8, r0
 8009060:	e7e9      	b.n	8009036 <__sflush_r+0xda>
 8009062:	bf00      	nop
 8009064:	dfbffffe 	.word	0xdfbffffe

08009068 <_fflush_r>:
 8009068:	b538      	push	{r3, r4, r5, lr}
 800906a:	690b      	ldr	r3, [r1, #16]
 800906c:	4605      	mov	r5, r0
 800906e:	460c      	mov	r4, r1
 8009070:	b913      	cbnz	r3, 8009078 <_fflush_r+0x10>
 8009072:	2500      	movs	r5, #0
 8009074:	4628      	mov	r0, r5
 8009076:	bd38      	pop	{r3, r4, r5, pc}
 8009078:	b118      	cbz	r0, 8009082 <_fflush_r+0x1a>
 800907a:	6a03      	ldr	r3, [r0, #32]
 800907c:	b90b      	cbnz	r3, 8009082 <_fflush_r+0x1a>
 800907e:	f7ff f831 	bl	80080e4 <__sinit>
 8009082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d0f3      	beq.n	8009072 <_fflush_r+0xa>
 800908a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800908c:	07d0      	lsls	r0, r2, #31
 800908e:	d404      	bmi.n	800909a <_fflush_r+0x32>
 8009090:	0599      	lsls	r1, r3, #22
 8009092:	d402      	bmi.n	800909a <_fflush_r+0x32>
 8009094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009096:	f7ff fa3a 	bl	800850e <__retarget_lock_acquire_recursive>
 800909a:	4628      	mov	r0, r5
 800909c:	4621      	mov	r1, r4
 800909e:	f7ff ff5d 	bl	8008f5c <__sflush_r>
 80090a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090a4:	07da      	lsls	r2, r3, #31
 80090a6:	4605      	mov	r5, r0
 80090a8:	d4e4      	bmi.n	8009074 <_fflush_r+0xc>
 80090aa:	89a3      	ldrh	r3, [r4, #12]
 80090ac:	059b      	lsls	r3, r3, #22
 80090ae:	d4e1      	bmi.n	8009074 <_fflush_r+0xc>
 80090b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090b2:	f7ff fa2d 	bl	8008510 <__retarget_lock_release_recursive>
 80090b6:	e7dd      	b.n	8009074 <_fflush_r+0xc>

080090b8 <__swhatbuf_r>:
 80090b8:	b570      	push	{r4, r5, r6, lr}
 80090ba:	460c      	mov	r4, r1
 80090bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090c0:	2900      	cmp	r1, #0
 80090c2:	b096      	sub	sp, #88	; 0x58
 80090c4:	4615      	mov	r5, r2
 80090c6:	461e      	mov	r6, r3
 80090c8:	da0d      	bge.n	80090e6 <__swhatbuf_r+0x2e>
 80090ca:	89a3      	ldrh	r3, [r4, #12]
 80090cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80090d0:	f04f 0100 	mov.w	r1, #0
 80090d4:	bf0c      	ite	eq
 80090d6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80090da:	2340      	movne	r3, #64	; 0x40
 80090dc:	2000      	movs	r0, #0
 80090de:	6031      	str	r1, [r6, #0]
 80090e0:	602b      	str	r3, [r5, #0]
 80090e2:	b016      	add	sp, #88	; 0x58
 80090e4:	bd70      	pop	{r4, r5, r6, pc}
 80090e6:	466a      	mov	r2, sp
 80090e8:	f000 f862 	bl	80091b0 <_fstat_r>
 80090ec:	2800      	cmp	r0, #0
 80090ee:	dbec      	blt.n	80090ca <__swhatbuf_r+0x12>
 80090f0:	9901      	ldr	r1, [sp, #4]
 80090f2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80090f6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80090fa:	4259      	negs	r1, r3
 80090fc:	4159      	adcs	r1, r3
 80090fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009102:	e7eb      	b.n	80090dc <__swhatbuf_r+0x24>

08009104 <__smakebuf_r>:
 8009104:	898b      	ldrh	r3, [r1, #12]
 8009106:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009108:	079d      	lsls	r5, r3, #30
 800910a:	4606      	mov	r6, r0
 800910c:	460c      	mov	r4, r1
 800910e:	d507      	bpl.n	8009120 <__smakebuf_r+0x1c>
 8009110:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009114:	6023      	str	r3, [r4, #0]
 8009116:	6123      	str	r3, [r4, #16]
 8009118:	2301      	movs	r3, #1
 800911a:	6163      	str	r3, [r4, #20]
 800911c:	b002      	add	sp, #8
 800911e:	bd70      	pop	{r4, r5, r6, pc}
 8009120:	ab01      	add	r3, sp, #4
 8009122:	466a      	mov	r2, sp
 8009124:	f7ff ffc8 	bl	80090b8 <__swhatbuf_r>
 8009128:	9900      	ldr	r1, [sp, #0]
 800912a:	4605      	mov	r5, r0
 800912c:	4630      	mov	r0, r6
 800912e:	f7ff fa5d 	bl	80085ec <_malloc_r>
 8009132:	b948      	cbnz	r0, 8009148 <__smakebuf_r+0x44>
 8009134:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009138:	059a      	lsls	r2, r3, #22
 800913a:	d4ef      	bmi.n	800911c <__smakebuf_r+0x18>
 800913c:	f023 0303 	bic.w	r3, r3, #3
 8009140:	f043 0302 	orr.w	r3, r3, #2
 8009144:	81a3      	strh	r3, [r4, #12]
 8009146:	e7e3      	b.n	8009110 <__smakebuf_r+0xc>
 8009148:	89a3      	ldrh	r3, [r4, #12]
 800914a:	6020      	str	r0, [r4, #0]
 800914c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009150:	81a3      	strh	r3, [r4, #12]
 8009152:	9b00      	ldr	r3, [sp, #0]
 8009154:	6163      	str	r3, [r4, #20]
 8009156:	9b01      	ldr	r3, [sp, #4]
 8009158:	6120      	str	r0, [r4, #16]
 800915a:	b15b      	cbz	r3, 8009174 <__smakebuf_r+0x70>
 800915c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009160:	4630      	mov	r0, r6
 8009162:	f000 f837 	bl	80091d4 <_isatty_r>
 8009166:	b128      	cbz	r0, 8009174 <__smakebuf_r+0x70>
 8009168:	89a3      	ldrh	r3, [r4, #12]
 800916a:	f023 0303 	bic.w	r3, r3, #3
 800916e:	f043 0301 	orr.w	r3, r3, #1
 8009172:	81a3      	strh	r3, [r4, #12]
 8009174:	89a3      	ldrh	r3, [r4, #12]
 8009176:	431d      	orrs	r5, r3
 8009178:	81a5      	strh	r5, [r4, #12]
 800917a:	e7cf      	b.n	800911c <__smakebuf_r+0x18>

0800917c <memmove>:
 800917c:	4288      	cmp	r0, r1
 800917e:	b510      	push	{r4, lr}
 8009180:	eb01 0402 	add.w	r4, r1, r2
 8009184:	d902      	bls.n	800918c <memmove+0x10>
 8009186:	4284      	cmp	r4, r0
 8009188:	4623      	mov	r3, r4
 800918a:	d807      	bhi.n	800919c <memmove+0x20>
 800918c:	1e43      	subs	r3, r0, #1
 800918e:	42a1      	cmp	r1, r4
 8009190:	d008      	beq.n	80091a4 <memmove+0x28>
 8009192:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009196:	f803 2f01 	strb.w	r2, [r3, #1]!
 800919a:	e7f8      	b.n	800918e <memmove+0x12>
 800919c:	4402      	add	r2, r0
 800919e:	4601      	mov	r1, r0
 80091a0:	428a      	cmp	r2, r1
 80091a2:	d100      	bne.n	80091a6 <memmove+0x2a>
 80091a4:	bd10      	pop	{r4, pc}
 80091a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80091aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80091ae:	e7f7      	b.n	80091a0 <memmove+0x24>

080091b0 <_fstat_r>:
 80091b0:	b538      	push	{r3, r4, r5, lr}
 80091b2:	4d07      	ldr	r5, [pc, #28]	; (80091d0 <_fstat_r+0x20>)
 80091b4:	2300      	movs	r3, #0
 80091b6:	4604      	mov	r4, r0
 80091b8:	4608      	mov	r0, r1
 80091ba:	4611      	mov	r1, r2
 80091bc:	602b      	str	r3, [r5, #0]
 80091be:	f7f9 f90a 	bl	80023d6 <_fstat>
 80091c2:	1c43      	adds	r3, r0, #1
 80091c4:	d102      	bne.n	80091cc <_fstat_r+0x1c>
 80091c6:	682b      	ldr	r3, [r5, #0]
 80091c8:	b103      	cbz	r3, 80091cc <_fstat_r+0x1c>
 80091ca:	6023      	str	r3, [r4, #0]
 80091cc:	bd38      	pop	{r3, r4, r5, pc}
 80091ce:	bf00      	nop
 80091d0:	20000c88 	.word	0x20000c88

080091d4 <_isatty_r>:
 80091d4:	b538      	push	{r3, r4, r5, lr}
 80091d6:	4d06      	ldr	r5, [pc, #24]	; (80091f0 <_isatty_r+0x1c>)
 80091d8:	2300      	movs	r3, #0
 80091da:	4604      	mov	r4, r0
 80091dc:	4608      	mov	r0, r1
 80091de:	602b      	str	r3, [r5, #0]
 80091e0:	f7f9 f909 	bl	80023f6 <_isatty>
 80091e4:	1c43      	adds	r3, r0, #1
 80091e6:	d102      	bne.n	80091ee <_isatty_r+0x1a>
 80091e8:	682b      	ldr	r3, [r5, #0]
 80091ea:	b103      	cbz	r3, 80091ee <_isatty_r+0x1a>
 80091ec:	6023      	str	r3, [r4, #0]
 80091ee:	bd38      	pop	{r3, r4, r5, pc}
 80091f0:	20000c88 	.word	0x20000c88

080091f4 <_sbrk_r>:
 80091f4:	b538      	push	{r3, r4, r5, lr}
 80091f6:	4d06      	ldr	r5, [pc, #24]	; (8009210 <_sbrk_r+0x1c>)
 80091f8:	2300      	movs	r3, #0
 80091fa:	4604      	mov	r4, r0
 80091fc:	4608      	mov	r0, r1
 80091fe:	602b      	str	r3, [r5, #0]
 8009200:	f7f9 f912 	bl	8002428 <_sbrk>
 8009204:	1c43      	adds	r3, r0, #1
 8009206:	d102      	bne.n	800920e <_sbrk_r+0x1a>
 8009208:	682b      	ldr	r3, [r5, #0]
 800920a:	b103      	cbz	r3, 800920e <_sbrk_r+0x1a>
 800920c:	6023      	str	r3, [r4, #0]
 800920e:	bd38      	pop	{r3, r4, r5, pc}
 8009210:	20000c88 	.word	0x20000c88

08009214 <memcpy>:
 8009214:	440a      	add	r2, r1
 8009216:	4291      	cmp	r1, r2
 8009218:	f100 33ff 	add.w	r3, r0, #4294967295
 800921c:	d100      	bne.n	8009220 <memcpy+0xc>
 800921e:	4770      	bx	lr
 8009220:	b510      	push	{r4, lr}
 8009222:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009226:	f803 4f01 	strb.w	r4, [r3, #1]!
 800922a:	4291      	cmp	r1, r2
 800922c:	d1f9      	bne.n	8009222 <memcpy+0xe>
 800922e:	bd10      	pop	{r4, pc}

08009230 <_realloc_r>:
 8009230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009234:	4680      	mov	r8, r0
 8009236:	4614      	mov	r4, r2
 8009238:	460e      	mov	r6, r1
 800923a:	b921      	cbnz	r1, 8009246 <_realloc_r+0x16>
 800923c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009240:	4611      	mov	r1, r2
 8009242:	f7ff b9d3 	b.w	80085ec <_malloc_r>
 8009246:	b92a      	cbnz	r2, 8009254 <_realloc_r+0x24>
 8009248:	f7ff f964 	bl	8008514 <_free_r>
 800924c:	4625      	mov	r5, r4
 800924e:	4628      	mov	r0, r5
 8009250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009254:	f000 f81b 	bl	800928e <_malloc_usable_size_r>
 8009258:	4284      	cmp	r4, r0
 800925a:	4607      	mov	r7, r0
 800925c:	d802      	bhi.n	8009264 <_realloc_r+0x34>
 800925e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009262:	d812      	bhi.n	800928a <_realloc_r+0x5a>
 8009264:	4621      	mov	r1, r4
 8009266:	4640      	mov	r0, r8
 8009268:	f7ff f9c0 	bl	80085ec <_malloc_r>
 800926c:	4605      	mov	r5, r0
 800926e:	2800      	cmp	r0, #0
 8009270:	d0ed      	beq.n	800924e <_realloc_r+0x1e>
 8009272:	42bc      	cmp	r4, r7
 8009274:	4622      	mov	r2, r4
 8009276:	4631      	mov	r1, r6
 8009278:	bf28      	it	cs
 800927a:	463a      	movcs	r2, r7
 800927c:	f7ff ffca 	bl	8009214 <memcpy>
 8009280:	4631      	mov	r1, r6
 8009282:	4640      	mov	r0, r8
 8009284:	f7ff f946 	bl	8008514 <_free_r>
 8009288:	e7e1      	b.n	800924e <_realloc_r+0x1e>
 800928a:	4635      	mov	r5, r6
 800928c:	e7df      	b.n	800924e <_realloc_r+0x1e>

0800928e <_malloc_usable_size_r>:
 800928e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009292:	1f18      	subs	r0, r3, #4
 8009294:	2b00      	cmp	r3, #0
 8009296:	bfbc      	itt	lt
 8009298:	580b      	ldrlt	r3, [r1, r0]
 800929a:	18c0      	addlt	r0, r0, r3
 800929c:	4770      	bx	lr
	...

080092a0 <_init>:
 80092a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092a2:	bf00      	nop
 80092a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092a6:	bc08      	pop	{r3}
 80092a8:	469e      	mov	lr, r3
 80092aa:	4770      	bx	lr

080092ac <_fini>:
 80092ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ae:	bf00      	nop
 80092b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092b2:	bc08      	pop	{r3}
 80092b4:	469e      	mov	lr, r3
 80092b6:	4770      	bx	lr
